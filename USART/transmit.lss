
transmit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ba  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000010e  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  0000012e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000072  00000000  00000000  00000149  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000003f  00000000  00000000  000001bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000008c  00000000  00000000  000001fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000288  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000006b  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include<avr/io.h>
void main(void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
DDRD=0xFF;
  74:	e1 e3       	ldi	r30, 0x31	; 49
  76:	f0 e0       	ldi	r31, 0x00	; 0
  78:	8f ef       	ldi	r24, 0xFF	; 255
  7a:	80 83       	st	Z, r24
DDRA=0x00;
  7c:	ea e3       	ldi	r30, 0x3A	; 58
  7e:	f0 e0       	ldi	r31, 0x00	; 0
  80:	10 82       	st	Z, r1
UBRRL=207;//set baud rate 4800 with U2X reset
  82:	e9 e2       	ldi	r30, 0x29	; 41
  84:	f0 e0       	ldi	r31, 0x00	; 0
  86:	8f ec       	ldi	r24, 0xCF	; 207
  88:	80 83       	st	Z, r24
UCSRB=(1<<TXEN);//transmitter enabled
  8a:	ea e2       	ldi	r30, 0x2A	; 42
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	88 e0       	ldi	r24, 0x08	; 8
  90:	80 83       	st	Z, r24
UCSRC=(0<<UMSEL)|(1<<URSEL)|(0<<USBS)|(3<<UCSZ0);//8bit frame size 1 stop bits
  92:	e0 e4       	ldi	r30, 0x40	; 64
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	86 e8       	ldi	r24, 0x86	; 134
  98:	80 83       	st	Z, r24
while(1)
{
while(!(UCSRA&(1<<UDRE)))//till data reg not empty
  9a:	eb e2       	ldi	r30, 0x2B	; 43
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	88 2f       	mov	r24, r24
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	80 72       	andi	r24, 0x20	; 32
  a6:	90 70       	andi	r25, 0x00	; 0
  a8:	00 97       	sbiw	r24, 0x00	; 0
  aa:	b9 f3       	breq	.-18     	; 0x9a <main+0x2e>
;
UDR=0xAA;
  ac:	ec e2       	ldi	r30, 0x2C	; 44
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	8a ea       	ldi	r24, 0xAA	; 170
  b2:	80 83       	st	Z, r24
  b4:	f2 cf       	rjmp	.-28     	; 0x9a <main+0x2e>

000000b6 <_exit>:
  b6:	f8 94       	cli

000000b8 <__stop_program>:
  b8:	ff cf       	rjmp	.-2      	; 0xb8 <__stop_program>
