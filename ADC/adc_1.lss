
adc_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001b2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000206  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  00000226  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000008f  00000000  00000000  00000241  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000004e  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000c9  00000000  00000000  0000031e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  000003e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000070  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
   8:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
   c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  10:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  14:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  18:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  1c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  20:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  24:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  28:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  2c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  30:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  34:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  38:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  3c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  40:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  44:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  48:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  4c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  50:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  54:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  58:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  5c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  60:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  64:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  68:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  6c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  70:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  74:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  78:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  7c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  80:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  84:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  88:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  8c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  90:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  94:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  98:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  9c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  a0:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  a4:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  a8:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  ac:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  b0:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  b4:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  b8:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  bc:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  c0:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  c4:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  c8:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  cc:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  d0:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  d4:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  d8:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  dc:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  e0:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
  f0:	12 e0       	ldi	r17, 0x02	; 2
  f2:	a0 e0       	ldi	r26, 0x00	; 0
  f4:	b2 e0       	ldi	r27, 0x02	; 2
  f6:	e2 eb       	ldi	r30, 0xB2	; 178
  f8:	f1 e0       	ldi	r31, 0x01	; 1
  fa:	00 e0       	ldi	r16, 0x00	; 0
  fc:	0b bf       	out	0x3b, r16	; 59
  fe:	02 c0       	rjmp	.+4      	; 0x104 <__do_copy_data+0x14>
 100:	07 90       	elpm	r0, Z+
 102:	0d 92       	st	X+, r0
 104:	a0 30       	cpi	r26, 0x00	; 0
 106:	b1 07       	cpc	r27, r17
 108:	d9 f7       	brne	.-10     	; 0x100 <__do_copy_data+0x10>
 10a:	0e 94 8b 00 	call	0x116	; 0x116 <main>
 10e:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <_exit>

00000112 <__bad_interrupt>:
 112:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000116 <main>:
#include<avr/io.h>
#include"delay.h"
void main(void)
{
 116:	df 93       	push	r29
 118:	cf 93       	push	r28
 11a:	00 d0       	rcall	.+0      	; 0x11c <main+0x6>
 11c:	00 d0       	rcall	.+0      	; 0x11e <main+0x8>
 11e:	cd b7       	in	r28, 0x3d	; 61
 120:	de b7       	in	r29, 0x3e	; 62
int adcl,adch;
DDRA=0xFF;
 122:	e1 e2       	ldi	r30, 0x21	; 33
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	8f ef       	ldi	r24, 0xFF	; 255
 128:	80 83       	st	Z, r24
DDRF=0x00;
 12a:	e0 e3       	ldi	r30, 0x30	; 48
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	10 82       	st	Z, r1
PORTF = 0x00;
 130:	e1 e3       	ldi	r30, 0x31	; 49
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	10 82       	st	Z, r1
DDRB=0xFF;
 136:	e4 e2       	ldi	r30, 0x24	; 36
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	8f ef       	ldi	r24, 0xFF	; 255
 13c:	80 83       	st	Z, r24
PORTB=0xAA;
 13e:	e5 e2       	ldi	r30, 0x25	; 37
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	8a ea       	ldi	r24, 0xAA	; 170
 144:	80 83       	st	Z, r24
ADCSRB=0x00;
 146:	eb e7       	ldi	r30, 0x7B	; 123
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	10 82       	st	Z, r1
ADCSRA=0xc7;//(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(0<<ADPS0);//ADC enabled prescaled to 128
 14c:	ea e7       	ldi	r30, 0x7A	; 122
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	87 ec       	ldi	r24, 0xC7	; 199
 152:	80 83       	st	Z, r24
ADMUX=0xC1;//reference voltage 2.56 ADLAR set ADC3 selected
 154:	ec e7       	ldi	r30, 0x7C	; 124
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	81 ec       	ldi	r24, 0xC1	; 193
 15a:	80 83       	st	Z, r24
	while(1)
	{
		
		
		ADCSRA |= 0x40;//conversion started
 15c:	aa e7       	ldi	r26, 0x7A	; 122
 15e:	b0 e0       	ldi	r27, 0x00	; 0
 160:	ea e7       	ldi	r30, 0x7A	; 122
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	80 64       	ori	r24, 0x40	; 64
 168:	8c 93       	st	X, r24
		
		ADCL=0;
 16a:	e8 e7       	ldi	r30, 0x78	; 120
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	10 82       	st	Z, r1
		ADCH=0;
 170:	e9 e7       	ldi	r30, 0x79	; 121
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	10 82       	st	Z, r1
		
		while((ADCSRA&(0x40)));//till conversion not complete
 176:	ea e7       	ldi	r30, 0x7A	; 122
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	80 81       	ld	r24, Z
 17c:	88 2f       	mov	r24, r24
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	80 74       	andi	r24, 0x40	; 64
 182:	90 70       	andi	r25, 0x00	; 0
 184:	00 97       	sbiw	r24, 0x00	; 0
 186:	b9 f7       	brne	.-18     	; 0x176 <main+0x60>
		
		adcl=ADCL;//ADC reg read
 188:	e8 e7       	ldi	r30, 0x78	; 120
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	80 81       	ld	r24, Z
 18e:	88 2f       	mov	r24, r24
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	9c 83       	std	Y+4, r25	; 0x04
 194:	8b 83       	std	Y+3, r24	; 0x03
		adch=ADCH;
 196:	e9 e7       	ldi	r30, 0x79	; 121
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	80 81       	ld	r24, Z
 19c:	88 2f       	mov	r24, r24
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	9a 83       	std	Y+2, r25	; 0x02
 1a2:	89 83       	std	Y+1, r24	; 0x01
		PORTA=adcl;
 1a4:	e2 e2       	ldi	r30, 0x22	; 34
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	8b 81       	ldd	r24, Y+3	; 0x03
 1aa:	80 83       	st	Z, r24
 1ac:	d7 cf       	rjmp	.-82     	; 0x15c <main+0x46>

000001ae <_exit>:
 1ae:	f8 94       	cli

000001b0 <__stop_program>:
 1b0:	ff cf       	rjmp	.-2      	; 0x1b0 <__stop_program>
