
botcode_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000352  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000003a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  000003c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000eb  00000000  00000000  000003e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000005b  00000000  00000000  000004cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000029d  00000000  00000000  00000527  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  000007c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000008e  00000000  00000000  000007e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 a7 01 	jmp	0x34e	; 0x34e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

#include<avr/io.h>
#include<util/delay.h>

void main()
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
  74:	2d 97       	sbiw	r28, 0x0d	; 13
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	f8 94       	cli
  7a:	de bf       	out	0x3e, r29	; 62
  7c:	0f be       	out	0x3f, r0	; 63
  7e:	cd bf       	out	0x3d, r28	; 61
	DDRA = 0xFF;
  80:	ea e3       	ldi	r30, 0x3A	; 58
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	8f ef       	ldi	r24, 0xFF	; 255
  86:	80 83       	st	Z, r24
	DDRB = 0x00;
  88:	e7 e3       	ldi	r30, 0x37	; 55
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	10 82       	st	Z, r1
	DDRC = 0x00;
  8e:	e4 e3       	ldi	r30, 0x34	; 52
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	10 82       	st	Z, r1
	DDRD = 0xFF;
  94:	e1 e3       	ldi	r30, 0x31	; 49
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	8f ef       	ldi	r24, 0xFF	; 255
  9a:	80 83       	st	Z, r24
	PORTA = 0x00;
  9c:	eb e3       	ldi	r30, 0x3B	; 59
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	10 82       	st	Z, r1
	PORTD = 0x00;
  a2:	e2 e3       	ldi	r30, 0x32	; 50
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	10 82       	st	Z, r1
	int direction = 0;
  a8:	1d 86       	std	Y+13, r1	; 0x0d
  aa:	1c 86       	std	Y+12, r1	; 0x0c
	int clamped = 0;
  ac:	1b 86       	std	Y+11, r1	; 0x0b
  ae:	1a 86       	std	Y+10, r1	; 0x0a
	int reverse = 0;
  b0:	19 86       	std	Y+9, r1	; 0x09
  b2:	18 86       	std	Y+8, r1	; 0x08
	int endtask = 0;
  b4:	1f 82       	std	Y+7, r1	; 0x07
  b6:	1e 82       	std	Y+6, r1	; 0x06
	unsigned char s1,s2,s3,b1,b2;
	while(1)
	{	
		s1 = PINB&0x01;
  b8:	e6 e3       	ldi	r30, 0x36	; 54
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	81 70       	andi	r24, 0x01	; 1
  c0:	8d 83       	std	Y+5, r24	; 0x05
		s2 = PINB&0x02;
  c2:	e6 e3       	ldi	r30, 0x36	; 54
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	82 70       	andi	r24, 0x02	; 2
  ca:	8c 83       	std	Y+4, r24	; 0x04
		s3 = PINB&0x01;
  cc:	e6 e3       	ldi	r30, 0x36	; 54
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	81 70       	andi	r24, 0x01	; 1
  d4:	8b 83       	std	Y+3, r24	; 0x03
		b1 = PINC&0x01;
  d6:	e3 e3       	ldi	r30, 0x33	; 51
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	81 70       	andi	r24, 0x01	; 1
  de:	8a 83       	std	Y+2, r24	; 0x02
		b2 = PINC&0x02;
  e0:	e3 e3       	ldi	r30, 0x33	; 51
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	82 70       	andi	r24, 0x02	; 2
  e8:	89 83       	std	Y+1, r24	; 0x01
		
		if(direction == 0)
  ea:	8c 85       	ldd	r24, Y+12	; 0x0c
  ec:	9d 85       	ldd	r25, Y+13	; 0x0d
  ee:	00 97       	sbiw	r24, 0x00	; 0
  f0:	09 f0       	breq	.+2      	; 0xf4 <main+0x88>
  f2:	83 c0       	rjmp	.+262    	; 0x1fa <main+0x18e>
		{
			//code for forward direction
			PORTA &= 0xFA;
  f4:	ab e3       	ldi	r26, 0x3B	; 59
  f6:	b0 e0       	ldi	r27, 0x00	; 0
  f8:	eb e3       	ldi	r30, 0x3B	; 59
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	8a 7f       	andi	r24, 0xFA	; 250
 100:	8c 93       	st	X, r24
			PORTA |= 0x0A;
 102:	ab e3       	ldi	r26, 0x3B	; 59
 104:	b0 e0       	ldi	r27, 0x00	; 0
 106:	eb e3       	ldi	r30, 0x3B	; 59
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	8a 60       	ori	r24, 0x0A	; 10
 10e:	8c 93       	st	X, r24
 110:	1b c0       	rjmp	.+54     	; 0x148 <main+0xdc>
			while(s2 == 0x02)
			{
				PORTD |= 0x30;
 112:	a2 e3       	ldi	r26, 0x32	; 50
 114:	b0 e0       	ldi	r27, 0x00	; 0
 116:	e2 e3       	ldi	r30, 0x32	; 50
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	80 63       	ori	r24, 0x30	; 48
 11e:	8c 93       	st	X, r24
				s1 = PINB&0x01;
 120:	e6 e3       	ldi	r30, 0x36	; 54
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	81 70       	andi	r24, 0x01	; 1
 128:	8d 83       	std	Y+5, r24	; 0x05
				s2 = PINB&0x02;
 12a:	e6 e3       	ldi	r30, 0x36	; 54
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	82 70       	andi	r24, 0x02	; 2
 132:	8c 83       	std	Y+4, r24	; 0x04
				s3 = PINB&0x01;
 134:	e6 e3       	ldi	r30, 0x36	; 54
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	81 70       	andi	r24, 0x01	; 1
 13c:	8b 83       	std	Y+3, r24	; 0x03
				b1 = PINC&0x01;
 13e:	e3 e3       	ldi	r30, 0x33	; 51
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	81 70       	andi	r24, 0x01	; 1
 146:	8a 83       	std	Y+2, r24	; 0x02
		if(direction == 0)
		{
			//code for forward direction
			PORTA &= 0xFA;
			PORTA |= 0x0A;
			while(s2 == 0x02)
 148:	8c 81       	ldd	r24, Y+4	; 0x04
 14a:	82 30       	cpi	r24, 0x02	; 2
 14c:	11 f3       	breq	.-60     	; 0x112 <main+0xa6>
 14e:	22 c0       	rjmp	.+68     	; 0x194 <main+0x128>
			}
			
			while(s1 == 0x01)
			{
			
				PORTD &= 0xEF;
 150:	a2 e3       	ldi	r26, 0x32	; 50
 152:	b0 e0       	ldi	r27, 0x00	; 0
 154:	e2 e3       	ldi	r30, 0x32	; 50
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	8f 7e       	andi	r24, 0xEF	; 239
 15c:	8c 93       	st	X, r24
				PORTD |= 0x20;
 15e:	a2 e3       	ldi	r26, 0x32	; 50
 160:	b0 e0       	ldi	r27, 0x00	; 0
 162:	e2 e3       	ldi	r30, 0x32	; 50
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	80 62       	ori	r24, 0x20	; 32
 16a:	8c 93       	st	X, r24
				s1 = PINB&0x01;
 16c:	e6 e3       	ldi	r30, 0x36	; 54
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	80 81       	ld	r24, Z
 172:	81 70       	andi	r24, 0x01	; 1
 174:	8d 83       	std	Y+5, r24	; 0x05
				s2 = PINB&0x02;
 176:	e6 e3       	ldi	r30, 0x36	; 54
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	80 81       	ld	r24, Z
 17c:	82 70       	andi	r24, 0x02	; 2
 17e:	8c 83       	std	Y+4, r24	; 0x04
				s3 = PINB&0x01;
 180:	e6 e3       	ldi	r30, 0x36	; 54
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	80 81       	ld	r24, Z
 186:	81 70       	andi	r24, 0x01	; 1
 188:	8b 83       	std	Y+3, r24	; 0x03
				b1 = PINC&0x01;
 18a:	e3 e3       	ldi	r30, 0x33	; 51
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	80 81       	ld	r24, Z
 190:	81 70       	andi	r24, 0x01	; 1
 192:	8a 83       	std	Y+2, r24	; 0x02
				s3 = PINB&0x01;
				b1 = PINC&0x01;
				
			}
			
			while(s1 == 0x01)
 194:	8d 81       	ldd	r24, Y+5	; 0x05
 196:	81 30       	cpi	r24, 0x01	; 1
 198:	d9 f2       	breq	.-74     	; 0x150 <main+0xe4>
 19a:	22 c0       	rjmp	.+68     	; 0x1e0 <main+0x174>
				b1 = PINC&0x01;
			}
			
			while(s3 == 0x04)
			{
				PORTD &= 0xDF;
 19c:	a2 e3       	ldi	r26, 0x32	; 50
 19e:	b0 e0       	ldi	r27, 0x00	; 0
 1a0:	e2 e3       	ldi	r30, 0x32	; 50
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	80 81       	ld	r24, Z
 1a6:	8f 7d       	andi	r24, 0xDF	; 223
 1a8:	8c 93       	st	X, r24
				PORTD |= 0x10;
 1aa:	a2 e3       	ldi	r26, 0x32	; 50
 1ac:	b0 e0       	ldi	r27, 0x00	; 0
 1ae:	e2 e3       	ldi	r30, 0x32	; 50
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	80 81       	ld	r24, Z
 1b4:	80 61       	ori	r24, 0x10	; 16
 1b6:	8c 93       	st	X, r24
				s1 = PINB&0x01;
 1b8:	e6 e3       	ldi	r30, 0x36	; 54
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	80 81       	ld	r24, Z
 1be:	81 70       	andi	r24, 0x01	; 1
 1c0:	8d 83       	std	Y+5, r24	; 0x05
				s2 = PINB&0x02;
 1c2:	e6 e3       	ldi	r30, 0x36	; 54
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	80 81       	ld	r24, Z
 1c8:	82 70       	andi	r24, 0x02	; 2
 1ca:	8c 83       	std	Y+4, r24	; 0x04
				s3 = PINB&0x01;
 1cc:	e6 e3       	ldi	r30, 0x36	; 54
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	80 81       	ld	r24, Z
 1d2:	81 70       	andi	r24, 0x01	; 1
 1d4:	8b 83       	std	Y+3, r24	; 0x03
				b1 = PINC&0x01;
 1d6:	e3 e3       	ldi	r30, 0x33	; 51
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	80 81       	ld	r24, Z
 1dc:	81 70       	andi	r24, 0x01	; 1
 1de:	8a 83       	std	Y+2, r24	; 0x02
				s2 = PINB&0x02;
				s3 = PINB&0x01;
				b1 = PINC&0x01;
			}
			
			while(s3 == 0x04)
 1e0:	8b 81       	ldd	r24, Y+3	; 0x03
 1e2:	84 30       	cpi	r24, 0x04	; 4
 1e4:	d9 f2       	breq	.-74     	; 0x19c <main+0x130>
				s2 = PINB&0x02;
				s3 = PINB&0x01;
				b1 = PINC&0x01;
			}
			
			if(b1==0x01)
 1e6:	8a 81       	ldd	r24, Y+2	; 0x02
 1e8:	81 30       	cpi	r24, 0x01	; 1
 1ea:	39 f4       	brne	.+14     	; 0x1fa <main+0x18e>
			{
				direction = 1;
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	9d 87       	std	Y+13, r25	; 0x0d
 1f2:	8c 87       	std	Y+12, r24	; 0x0c
				PORTA = 0x00;
 1f4:	eb e3       	ldi	r30, 0x3B	; 59
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	10 82       	st	Z, r1
			}
		}
		
		if(direction == 1)
 1fa:	8c 85       	ldd	r24, Y+12	; 0x0c
 1fc:	9d 85       	ldd	r25, Y+13	; 0x0d
 1fe:	81 30       	cpi	r24, 0x01	; 1
 200:	91 05       	cpc	r25, r1
 202:	09 f0       	breq	.+2      	; 0x206 <main+0x19a>
 204:	59 cf       	rjmp	.-334    	; 0xb8 <main+0x4c>
		{
			if(clamped == 0)
 206:	8a 85       	ldd	r24, Y+10	; 0x0a
 208:	9b 85       	ldd	r25, Y+11	; 0x0b
 20a:	00 97       	sbiw	r24, 0x00	; 0
 20c:	21 f4       	brne	.+8      	; 0x216 <main+0x1aa>
			{
				//insert code for clamping
				clamped = 1;
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	9b 87       	std	Y+11, r25	; 0x0b
 214:	8a 87       	std	Y+10, r24	; 0x0a
			}
			
			if((clamped==1)&&(reverse==0))
 216:	8a 85       	ldd	r24, Y+10	; 0x0a
 218:	9b 85       	ldd	r25, Y+11	; 0x0b
 21a:	81 30       	cpi	r24, 0x01	; 1
 21c:	91 05       	cpc	r25, r1
 21e:	41 f4       	brne	.+16     	; 0x230 <main+0x1c4>
 220:	88 85       	ldd	r24, Y+8	; 0x08
 222:	99 85       	ldd	r25, Y+9	; 0x09
 224:	00 97       	sbiw	r24, 0x00	; 0
 226:	21 f4       	brne	.+8      	; 0x230 <main+0x1c4>
			{
				//turn the pulley around
				reverse = 1;
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	99 87       	std	Y+9, r25	; 0x09
 22e:	88 87       	std	Y+8, r24	; 0x08
			}
			
			if(reverse == 1)
 230:	88 85       	ldd	r24, Y+8	; 0x08
 232:	99 85       	ldd	r25, Y+9	; 0x09
 234:	81 30       	cpi	r24, 0x01	; 1
 236:	91 05       	cpc	r25, r1
 238:	09 f0       	breq	.+2      	; 0x23c <main+0x1d0>
 23a:	3e cf       	rjmp	.-388    	; 0xb8 <main+0x4c>
			{
				//code for reverse direction
				
				PORTA &= 0xF5;
 23c:	ab e3       	ldi	r26, 0x3B	; 59
 23e:	b0 e0       	ldi	r27, 0x00	; 0
 240:	eb e3       	ldi	r30, 0x3B	; 59
 242:	f0 e0       	ldi	r31, 0x00	; 0
 244:	80 81       	ld	r24, Z
 246:	85 7f       	andi	r24, 0xF5	; 245
 248:	8c 93       	st	X, r24
				PORTA |= 0x05;
 24a:	ab e3       	ldi	r26, 0x3B	; 59
 24c:	b0 e0       	ldi	r27, 0x00	; 0
 24e:	eb e3       	ldi	r30, 0x3B	; 59
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	80 81       	ld	r24, Z
 254:	85 60       	ori	r24, 0x05	; 5
 256:	8c 93       	st	X, r24
 258:	1b c0       	rjmp	.+54     	; 0x290 <main+0x224>
				while(s2 == 0x02)
				{
					PORTD |= 0x30;
 25a:	a2 e3       	ldi	r26, 0x32	; 50
 25c:	b0 e0       	ldi	r27, 0x00	; 0
 25e:	e2 e3       	ldi	r30, 0x32	; 50
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	80 81       	ld	r24, Z
 264:	80 63       	ori	r24, 0x30	; 48
 266:	8c 93       	st	X, r24
					s1 = PINB&0x01;
 268:	e6 e3       	ldi	r30, 0x36	; 54
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	80 81       	ld	r24, Z
 26e:	81 70       	andi	r24, 0x01	; 1
 270:	8d 83       	std	Y+5, r24	; 0x05
					s2 = PINB&0x02;
 272:	e6 e3       	ldi	r30, 0x36	; 54
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	80 81       	ld	r24, Z
 278:	82 70       	andi	r24, 0x02	; 2
 27a:	8c 83       	std	Y+4, r24	; 0x04
					s3 = PINB&0x01;
 27c:	e6 e3       	ldi	r30, 0x36	; 54
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	80 81       	ld	r24, Z
 282:	81 70       	andi	r24, 0x01	; 1
 284:	8b 83       	std	Y+3, r24	; 0x03
					b2 = PINC&0x02;
 286:	e3 e3       	ldi	r30, 0x33	; 51
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	80 81       	ld	r24, Z
 28c:	82 70       	andi	r24, 0x02	; 2
 28e:	89 83       	std	Y+1, r24	; 0x01
			{
				//code for reverse direction
				
				PORTA &= 0xF5;
				PORTA |= 0x05;
				while(s2 == 0x02)
 290:	8c 81       	ldd	r24, Y+4	; 0x04
 292:	82 30       	cpi	r24, 0x02	; 2
 294:	11 f3       	breq	.-60     	; 0x25a <main+0x1ee>
 296:	22 c0       	rjmp	.+68     	; 0x2dc <main+0x270>
				}
				
				while(s1 == 0x01)
				{
				
					PORTD &= 0xEF;
 298:	a2 e3       	ldi	r26, 0x32	; 50
 29a:	b0 e0       	ldi	r27, 0x00	; 0
 29c:	e2 e3       	ldi	r30, 0x32	; 50
 29e:	f0 e0       	ldi	r31, 0x00	; 0
 2a0:	80 81       	ld	r24, Z
 2a2:	8f 7e       	andi	r24, 0xEF	; 239
 2a4:	8c 93       	st	X, r24
					PORTD |= 0x20;
 2a6:	a2 e3       	ldi	r26, 0x32	; 50
 2a8:	b0 e0       	ldi	r27, 0x00	; 0
 2aa:	e2 e3       	ldi	r30, 0x32	; 50
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	80 81       	ld	r24, Z
 2b0:	80 62       	ori	r24, 0x20	; 32
 2b2:	8c 93       	st	X, r24
					s1 = PINB&0x01;
 2b4:	e6 e3       	ldi	r30, 0x36	; 54
 2b6:	f0 e0       	ldi	r31, 0x00	; 0
 2b8:	80 81       	ld	r24, Z
 2ba:	81 70       	andi	r24, 0x01	; 1
 2bc:	8d 83       	std	Y+5, r24	; 0x05
					s2 = PINB&0x02;
 2be:	e6 e3       	ldi	r30, 0x36	; 54
 2c0:	f0 e0       	ldi	r31, 0x00	; 0
 2c2:	80 81       	ld	r24, Z
 2c4:	82 70       	andi	r24, 0x02	; 2
 2c6:	8c 83       	std	Y+4, r24	; 0x04
					s3 = PINB&0x01;
 2c8:	e6 e3       	ldi	r30, 0x36	; 54
 2ca:	f0 e0       	ldi	r31, 0x00	; 0
 2cc:	80 81       	ld	r24, Z
 2ce:	81 70       	andi	r24, 0x01	; 1
 2d0:	8b 83       	std	Y+3, r24	; 0x03
					b2 = PINC&0x02;
 2d2:	e3 e3       	ldi	r30, 0x33	; 51
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	80 81       	ld	r24, Z
 2d8:	82 70       	andi	r24, 0x02	; 2
 2da:	89 83       	std	Y+1, r24	; 0x01
					s3 = PINB&0x01;
					b2 = PINC&0x02;
					
				}
				
				while(s1 == 0x01)
 2dc:	8d 81       	ldd	r24, Y+5	; 0x05
 2de:	81 30       	cpi	r24, 0x01	; 1
 2e0:	d9 f2       	breq	.-74     	; 0x298 <main+0x22c>
 2e2:	22 c0       	rjmp	.+68     	; 0x328 <main+0x2bc>
					b2 = PINC&0x02;
				}
				
				while(s3 == 0x04)
				{
					PORTD &= 0xDF;
 2e4:	a2 e3       	ldi	r26, 0x32	; 50
 2e6:	b0 e0       	ldi	r27, 0x00	; 0
 2e8:	e2 e3       	ldi	r30, 0x32	; 50
 2ea:	f0 e0       	ldi	r31, 0x00	; 0
 2ec:	80 81       	ld	r24, Z
 2ee:	8f 7d       	andi	r24, 0xDF	; 223
 2f0:	8c 93       	st	X, r24
					PORTD |= 0x10;
 2f2:	a2 e3       	ldi	r26, 0x32	; 50
 2f4:	b0 e0       	ldi	r27, 0x00	; 0
 2f6:	e2 e3       	ldi	r30, 0x32	; 50
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	80 81       	ld	r24, Z
 2fc:	80 61       	ori	r24, 0x10	; 16
 2fe:	8c 93       	st	X, r24
					s1 = PINB&0x01;
 300:	e6 e3       	ldi	r30, 0x36	; 54
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	80 81       	ld	r24, Z
 306:	81 70       	andi	r24, 0x01	; 1
 308:	8d 83       	std	Y+5, r24	; 0x05
					s2 = PINB&0x02;
 30a:	e6 e3       	ldi	r30, 0x36	; 54
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	80 81       	ld	r24, Z
 310:	82 70       	andi	r24, 0x02	; 2
 312:	8c 83       	std	Y+4, r24	; 0x04
					s3 = PINB&0x01;
 314:	e6 e3       	ldi	r30, 0x36	; 54
 316:	f0 e0       	ldi	r31, 0x00	; 0
 318:	80 81       	ld	r24, Z
 31a:	81 70       	andi	r24, 0x01	; 1
 31c:	8b 83       	std	Y+3, r24	; 0x03
					b2 = PINC&0x02;
 31e:	e3 e3       	ldi	r30, 0x33	; 51
 320:	f0 e0       	ldi	r31, 0x00	; 0
 322:	80 81       	ld	r24, Z
 324:	82 70       	andi	r24, 0x02	; 2
 326:	89 83       	std	Y+1, r24	; 0x01
					s2 = PINB&0x02;
					s3 = PINB&0x01;
					b2 = PINC&0x02;
				}
				
				while(s3 == 0x04)
 328:	8b 81       	ldd	r24, Y+3	; 0x03
 32a:	84 30       	cpi	r24, 0x04	; 4
 32c:	d9 f2       	breq	.-74     	; 0x2e4 <main+0x278>
					s2 = PINB&0x02;
					s3 = PINB&0x01;
					b2 = PINC&0x02;
				}
				
				if(b2==0x02)
 32e:	89 81       	ldd	r24, Y+1	; 0x01
 330:	82 30       	cpi	r24, 0x02	; 2
 332:	09 f0       	breq	.+2      	; 0x336 <main+0x2ca>
 334:	c1 ce       	rjmp	.-638    	; 0xb8 <main+0x4c>
				{
					direction = 2;
 336:	82 e0       	ldi	r24, 0x02	; 2
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	9d 87       	std	Y+13, r25	; 0x0d
 33c:	8c 87       	std	Y+12, r24	; 0x0c
					PORTA = 0x00;
 33e:	eb e3       	ldi	r30, 0x3B	; 59
 340:	f0 e0       	ldi	r31, 0x00	; 0
 342:	10 82       	st	Z, r1
					endtask = 1;
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	9f 83       	std	Y+7, r25	; 0x07
 34a:	8e 83       	std	Y+6, r24	; 0x06
 34c:	b5 ce       	rjmp	.-662    	; 0xb8 <main+0x4c>

0000034e <_exit>:
 34e:	f8 94       	cli

00000350 <__stop_program>:
 350:	ff cf       	rjmp	.-2      	; 0x350 <__stop_program>
