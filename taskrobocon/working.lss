
working.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000016e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000001c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  000001e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000008b  00000000  00000000  000001fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000004e  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000011f  00000000  00000000  000002d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  000003f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000070  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 b5 00 	jmp	0x16a	; 0x16a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include<avr/io.h>
void main(void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	00 d0       	rcall	.+0      	; 0x72 <main+0x6>
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62
DDRB=0b11101101;
  76:	e7 e3       	ldi	r30, 0x37	; 55
  78:	f0 e0       	ldi	r31, 0x00	; 0
  7a:	8d ee       	ldi	r24, 0xED	; 237
  7c:	80 83       	st	Z, r24
DDRD=0b11101101;
  7e:	e1 e3       	ldi	r30, 0x31	; 49
  80:	f0 e0       	ldi	r31, 0x00	; 0
  82:	8d ee       	ldi	r24, 0xED	; 237
  84:	80 83       	st	Z, r24
DDRA=0xFF;
  86:	ea e3       	ldi	r30, 0x3A	; 58
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	8f ef       	ldi	r24, 0xFF	; 255
  8c:	80 83       	st	Z, r24
DDRC=0b11011011;
  8e:	e4 e3       	ldi	r30, 0x34	; 52
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	8b ed       	ldi	r24, 0xDB	; 219
  94:	80 83       	st	Z, r24
unsigned char i,j;
while(1)
{
  PORTD=0b00010010;
  96:	e2 e3       	ldi	r30, 0x32	; 50
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	82 e1       	ldi	r24, 0x12	; 18
  9c:	80 83       	st	Z, r24
  PORTA=0x00;
  9e:	eb e3       	ldi	r30, 0x3B	; 59
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	10 82       	st	Z, r1
   PORTC=0b00010010;
  a4:	e5 e3       	ldi	r30, 0x35	; 53
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	82 e1       	ldi	r24, 0x12	; 18
  aa:	80 83       	st	Z, r24
  ac:	24 c0       	rjmp	.+72     	; 0xf6 <main+0x8a>
   while(PIND!=0b00010000)//hitswitch infront not pressed forward
  {
	PORTB =0b00010010;
  ae:	e8 e3       	ldi	r30, 0x38	; 56
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	82 e1       	ldi	r24, 0x12	; 18
  b4:	80 83       	st	Z, r24
	i=PINB;
  b6:	e6 e3       	ldi	r30, 0x36	; 54
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	8a 83       	std	Y+2, r24	; 0x02
	if((i&0x12)==0)
  be:	8a 81       	ldd	r24, Y+2	; 0x02
  c0:	88 2f       	mov	r24, r24
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	82 71       	andi	r24, 0x12	; 18
  c6:	90 70       	andi	r25, 0x00	; 0
  c8:	00 97       	sbiw	r24, 0x00	; 0
  ca:	29 f4       	brne	.+10     	; 0xd6 <main+0x6a>
	{
	//make bot go straight
	PORTA=0xF0;//right motor high
  cc:	eb e3       	ldi	r30, 0x3B	; 59
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 ef       	ldi	r24, 0xF0	; 240
  d2:	80 83       	st	Z, r24
  d4:	10 c0       	rjmp	.+32     	; 0xf6 <main+0x8a>
	//left motor high
	}
	else if((i&0x02)!=0)
  d6:	8a 81       	ldd	r24, Y+2	; 0x02
  d8:	88 2f       	mov	r24, r24
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	82 70       	andi	r24, 0x02	; 2
  de:	90 70       	andi	r25, 0x00	; 0
  e0:	00 97       	sbiw	r24, 0x00	; 0
  e2:	29 f0       	breq	.+10     	; 0xee <main+0x82>
	{
	//make bot turn left
	PORTA=0xE0;
  e4:	eb e3       	ldi	r30, 0x3B	; 59
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 ee       	ldi	r24, 0xE0	; 224
  ea:	80 83       	st	Z, r24
  ec:	04 c0       	rjmp	.+8      	; 0xf6 <main+0x8a>
  }
  else
	{
	//make bot turn right
	PORTA=0xB0;
  ee:	eb e3       	ldi	r30, 0x3B	; 59
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 eb       	ldi	r24, 0xB0	; 176
  f4:	80 83       	st	Z, r24
while(1)
{
  PORTD=0b00010010;
  PORTA=0x00;
   PORTC=0b00010010;
   while(PIND!=0b00010000)//hitswitch infront not pressed forward
  f6:	e0 e3       	ldi	r30, 0x30	; 48
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	80 31       	cpi	r24, 0x10	; 16
  fe:	b9 f6       	brne	.-82     	; 0xae <main+0x42>
	{
	//make bot turn right
	PORTA=0xB0;
  }
  }
  if(PIND==0b00010000)
 100:	e0 e3       	ldi	r30, 0x30	; 48
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	80 31       	cpi	r24, 0x10	; 16
 108:	31 f6       	brne	.-116    	; 0x96 <main+0x2a>
  {
  j=PIND;
 10a:	e0 e3       	ldi	r30, 0x30	; 48
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	89 83       	std	Y+1, r24	; 0x01
 112:	23 c0       	rjmp	.+70     	; 0x15a <main+0xee>
  while((j&0x10)!=0)//hitswitch back not  pressed backward
  {
  PORTB =0b00010010;
 114:	e8 e3       	ldi	r30, 0x38	; 56
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	82 e1       	ldi	r24, 0x12	; 18
 11a:	80 83       	st	Z, r24
  i=PINB;
 11c:	e6 e3       	ldi	r30, 0x36	; 54
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	8a 83       	std	Y+2, r24	; 0x02
	if((i&0x12)==0)
 124:	8a 81       	ldd	r24, Y+2	; 0x02
 126:	88 2f       	mov	r24, r24
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	82 71       	andi	r24, 0x12	; 18
 12c:	90 70       	andi	r25, 0x00	; 0
 12e:	00 97       	sbiw	r24, 0x00	; 0
 130:	21 f4       	brne	.+8      	; 0x13a <main+0xce>
	{
	//make bot go reverse
	PORTA=0x00;
 132:	eb e3       	ldi	r30, 0x3B	; 59
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	10 82       	st	Z, r1
 138:	10 c0       	rjmp	.+32     	; 0x15a <main+0xee>
	}
	else if((i&0x10)!=0)
 13a:	8a 81       	ldd	r24, Y+2	; 0x02
 13c:	88 2f       	mov	r24, r24
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	80 71       	andi	r24, 0x10	; 16
 142:	90 70       	andi	r25, 0x00	; 0
 144:	00 97       	sbiw	r24, 0x00	; 0
 146:	29 f0       	breq	.+10     	; 0x152 <main+0xe6>
	{
	//make bot turn left
	PORTA=0xE0;
 148:	eb e3       	ldi	r30, 0x3B	; 59
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 ee       	ldi	r24, 0xE0	; 224
 14e:	80 83       	st	Z, r24
 150:	04 c0       	rjmp	.+8      	; 0x15a <main+0xee>
	}
	else
	{
	//make bot turn right
	PORTA=0xB0;
 152:	eb e3       	ldi	r30, 0x3B	; 59
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 eb       	ldi	r24, 0xB0	; 176
 158:	80 83       	st	Z, r24
  }
  }
  if(PIND==0b00010000)
  {
  j=PIND;
  while((j&0x10)!=0)//hitswitch back not  pressed backward
 15a:	89 81       	ldd	r24, Y+1	; 0x01
 15c:	88 2f       	mov	r24, r24
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	80 71       	andi	r24, 0x10	; 16
 162:	90 70       	andi	r25, 0x00	; 0
 164:	00 97       	sbiw	r24, 0x00	; 0
 166:	b1 f6       	brne	.-84     	; 0x114 <main+0xa8>
 168:	96 cf       	rjmp	.-212    	; 0x96 <main+0x2a>

0000016a <_exit>:
 16a:	f8 94       	cli

0000016c <__stop_program>:
 16c:	ff cf       	rjmp	.-2      	; 0x16c <__stop_program>
