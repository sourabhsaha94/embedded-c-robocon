
test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000130  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000007c  00000000  00000000  000001bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000004c  00000000  00000000  0000023b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000078  00000000  00000000  00000287  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000300  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000067  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
   8:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
   c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  10:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  14:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  18:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  1c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  20:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  24:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  28:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  2c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  30:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  34:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  38:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  3c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  40:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  44:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  48:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  4c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  50:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  54:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  58:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  5c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  60:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  64:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  68:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  6c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  70:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  74:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  78:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  7c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  80:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  84:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  88:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  8c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  90:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  94:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  98:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  9c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  a0:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  a4:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  a8:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  ac:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  b0:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  b4:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  b8:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  bc:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  c0:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  c4:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  c8:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  cc:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  d0:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  d4:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  d8:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  dc:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  e0:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
  f0:	12 e0       	ldi	r17, 0x02	; 2
  f2:	a0 e0       	ldi	r26, 0x00	; 0
  f4:	b2 e0       	ldi	r27, 0x02	; 2
  f6:	e0 e3       	ldi	r30, 0x30	; 48
  f8:	f1 e0       	ldi	r31, 0x01	; 1
  fa:	00 e0       	ldi	r16, 0x00	; 0
  fc:	0b bf       	out	0x3b, r16	; 59
  fe:	02 c0       	rjmp	.+4      	; 0x104 <__do_copy_data+0x14>
 100:	07 90       	elpm	r0, Z+
 102:	0d 92       	st	X+, r0
 104:	a0 30       	cpi	r26, 0x00	; 0
 106:	b1 07       	cpc	r27, r17
 108:	d9 f7       	brne	.-10     	; 0x100 <__do_copy_data+0x10>
 10a:	0e 94 8b 00 	call	0x116	; 0x116 <main>
 10e:	0c 94 96 00 	jmp	0x12c	; 0x12c <_exit>

00000112 <__bad_interrupt>:
 112:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000116 <main>:
#include<avr/io.h>
void main(void)
{
DDRL=0x00;
 116:	10 92 0a 01 	sts	0x010A, r1
PORTL=0x00;
 11a:	10 92 0b 01 	sts	0x010B, r1
int i;
while(1)
{
DDRL=0x00;
 11e:	10 92 0a 01 	sts	0x010A, r1
PORTL=0x00;
 122:	10 92 0b 01 	sts	0x010B, r1
i=PINL;
 126:	80 91 09 01 	lds	r24, 0x0109
 12a:	f9 cf       	rjmp	.-14     	; 0x11e <main+0x8>

0000012c <_exit>:
 12c:	f8 94       	cli

0000012e <__stop_program>:
 12e:	ff cf       	rjmp	.-2      	; 0x12e <__stop_program>
