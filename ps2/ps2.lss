
ps2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004dbe  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000008  00800060  00800060  00004e32  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00004e32  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000a1  00000000  00000000  00004e52  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000012e0  00000000  00000000  00004ef3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000115  00000000  00000000  000061d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000019e1  00000000  00000000  000062e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000050  00000000  00000000  00007ccc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000124  00000000  00000000  00007d1c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
       8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
       c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a8 36       	cpi	r26, 0x68	; 104
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
      70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
      74:	0c 94 dd 26 	jmp	0x4dba	; 0x4dba <_exit>

00000078 <__bad_interrupt>:
      78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
void ReadGamepad(void);
void config(void);
void analog(void);

int main(void)
{
      7c:	0f 93       	push	r16
      7e:	1f 93       	push	r17
      80:	df 93       	push	r29
      82:	cf 93       	push	r28
      84:	cd b7       	in	r28, 0x3d	; 61
      86:	de b7       	in	r29, 0x3e	; 62
      88:	c0 56       	subi	r28, 0x60	; 96
      8a:	d0 40       	sbci	r29, 0x00	; 0
      8c:	0f b6       	in	r0, 0x3f	; 63
      8e:	f8 94       	cli
      90:	de bf       	out	0x3e, r29	; 62
      92:	0f be       	out	0x3f, r0	; 63
      94:	cd bf       	out	0x3d, r28	; 61
DDRA=0xFF;
      96:	ea e3       	ldi	r30, 0x3A	; 58
      98:	f0 e0       	ldi	r31, 0x00	; 0
      9a:	8f ef       	ldi	r24, 0xFF	; 255
      9c:	80 83       	st	Z, r24
DDRC=0xFD;//0clock1data2command4attention
      9e:	e4 e3       	ldi	r30, 0x34	; 52
      a0:	f0 e0       	ldi	r31, 0x00	; 0
      a2:	8d ef       	ldi	r24, 0xFD	; 253
      a4:	80 83       	st	Z, r24
PORTC=0xFF;
      a6:	e5 e3       	ldi	r30, 0x35	; 53
      a8:	f0 e0       	ldi	r31, 0x00	; 0
      aa:	8f ef       	ldi	r24, 0xFF	; 255
      ac:	80 83       	st	Z, r24
UBRRL=207;//set baud rate 4800 with U2X reset
      ae:	e9 e2       	ldi	r30, 0x29	; 41
      b0:	f0 e0       	ldi	r31, 0x00	; 0
      b2:	8f ec       	ldi	r24, 0xCF	; 207
      b4:	80 83       	st	Z, r24
UCSRB=(1<<TXEN);//transmitter enabled
      b6:	ea e2       	ldi	r30, 0x2A	; 42
      b8:	f0 e0       	ldi	r31, 0x00	; 0
      ba:	88 e0       	ldi	r24, 0x08	; 8
      bc:	80 83       	st	Z, r24
UCSRC=(0<<UMSEL)|(1<<URSEL)|(0<<USBS)|(3<<UCSZ0);//8bit frame size 1 stop bits
      be:	e0 e4       	ldi	r30, 0x40	; 64
      c0:	f0 e0       	ldi	r31, 0x00	; 0
      c2:	86 e8       	ldi	r24, 0x86	; 134
      c4:	80 83       	st	Z, r24
config();
      c6:	0e 94 1e 18 	call	0x303c	; 0x303c <config>
      ca:	fe 01       	movw	r30, r28
      cc:	e3 5a       	subi	r30, 0xA3	; 163
      ce:	ff 4f       	sbci	r31, 0xFF	; 255
      d0:	80 e0       	ldi	r24, 0x00	; 0
      d2:	90 e0       	ldi	r25, 0x00	; 0
      d4:	a0 e8       	ldi	r26, 0x80	; 128
      d6:	bf e3       	ldi	r27, 0x3F	; 63
      d8:	80 83       	st	Z, r24
      da:	91 83       	std	Z+1, r25	; 0x01
      dc:	a2 83       	std	Z+2, r26	; 0x02
      de:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
      e0:	8e 01       	movw	r16, r28
      e2:	07 5a       	subi	r16, 0xA7	; 167
      e4:	1f 4f       	sbci	r17, 0xFF	; 255
      e6:	fe 01       	movw	r30, r28
      e8:	e3 5a       	subi	r30, 0xA3	; 163
      ea:	ff 4f       	sbci	r31, 0xFF	; 255
      ec:	60 81       	ld	r22, Z
      ee:	71 81       	ldd	r23, Z+1	; 0x01
      f0:	82 81       	ldd	r24, Z+2	; 0x02
      f2:	93 81       	ldd	r25, Z+3	; 0x03
      f4:	2b ea       	ldi	r18, 0xAB	; 171
      f6:	3a ea       	ldi	r19, 0xAA	; 170
      f8:	4a ea       	ldi	r20, 0xAA	; 170
      fa:	50 e4       	ldi	r21, 0x40	; 64
      fc:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
     100:	dc 01       	movw	r26, r24
     102:	cb 01       	movw	r24, r22
     104:	f8 01       	movw	r30, r16
     106:	80 83       	st	Z, r24
     108:	91 83       	std	Z+1, r25	; 0x01
     10a:	a2 83       	std	Z+2, r26	; 0x02
     10c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     10e:	fe 01       	movw	r30, r28
     110:	e7 5a       	subi	r30, 0xA7	; 167
     112:	ff 4f       	sbci	r31, 0xFF	; 255
     114:	60 81       	ld	r22, Z
     116:	71 81       	ldd	r23, Z+1	; 0x01
     118:	82 81       	ldd	r24, Z+2	; 0x02
     11a:	93 81       	ldd	r25, Z+3	; 0x03
     11c:	20 e0       	ldi	r18, 0x00	; 0
     11e:	30 e0       	ldi	r19, 0x00	; 0
     120:	40 e8       	ldi	r20, 0x80	; 128
     122:	5f e3       	ldi	r21, 0x3F	; 63
     124:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__cmpsf2>
     128:	88 23       	and	r24, r24
     12a:	34 f4       	brge	.+12     	; 0x138 <main+0xbc>
		__ticks = 1;
     12c:	fe 01       	movw	r30, r28
     12e:	e8 5a       	subi	r30, 0xA8	; 168
     130:	ff 4f       	sbci	r31, 0xFF	; 255
     132:	81 e0       	ldi	r24, 0x01	; 1
     134:	80 83       	st	Z, r24
     136:	e0 c0       	rjmp	.+448    	; 0x2f8 <main+0x27c>
	else if (__tmp > 255)
     138:	fe 01       	movw	r30, r28
     13a:	e7 5a       	subi	r30, 0xA7	; 167
     13c:	ff 4f       	sbci	r31, 0xFF	; 255
     13e:	60 81       	ld	r22, Z
     140:	71 81       	ldd	r23, Z+1	; 0x01
     142:	82 81       	ldd	r24, Z+2	; 0x02
     144:	93 81       	ldd	r25, Z+3	; 0x03
     146:	20 e0       	ldi	r18, 0x00	; 0
     148:	30 e0       	ldi	r19, 0x00	; 0
     14a:	4f e7       	ldi	r20, 0x7F	; 127
     14c:	53 e4       	ldi	r21, 0x43	; 67
     14e:	0e 94 76 26 	call	0x4cec	; 0x4cec <__gesf2>
     152:	18 16       	cp	r1, r24
     154:	0c f0       	brlt	.+2      	; 0x158 <main+0xdc>
     156:	c0 c0       	rjmp	.+384    	; 0x2d8 <main+0x25c>
	{
		_delay_ms(__us / 1000.0);
     158:	fe 01       	movw	r30, r28
     15a:	e3 5a       	subi	r30, 0xA3	; 163
     15c:	ff 4f       	sbci	r31, 0xFF	; 255
     15e:	60 81       	ld	r22, Z
     160:	71 81       	ldd	r23, Z+1	; 0x01
     162:	82 81       	ldd	r24, Z+2	; 0x02
     164:	93 81       	ldd	r25, Z+3	; 0x03
     166:	20 e0       	ldi	r18, 0x00	; 0
     168:	30 e0       	ldi	r19, 0x00	; 0
     16a:	4a e7       	ldi	r20, 0x7A	; 122
     16c:	54 e4       	ldi	r21, 0x44	; 68
     16e:	0e 94 6d 25 	call	0x4ada	; 0x4ada <__divsf3>
     172:	dc 01       	movw	r26, r24
     174:	cb 01       	movw	r24, r22
     176:	fe 01       	movw	r30, r28
     178:	ec 5a       	subi	r30, 0xAC	; 172
     17a:	ff 4f       	sbci	r31, 0xFF	; 255
     17c:	80 83       	st	Z, r24
     17e:	91 83       	std	Z+1, r25	; 0x01
     180:	a2 83       	std	Z+2, r26	; 0x02
     182:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     184:	8e 01       	movw	r16, r28
     186:	00 5b       	subi	r16, 0xB0	; 176
     188:	1f 4f       	sbci	r17, 0xFF	; 255
     18a:	fe 01       	movw	r30, r28
     18c:	ec 5a       	subi	r30, 0xAC	; 172
     18e:	ff 4f       	sbci	r31, 0xFF	; 255
     190:	60 81       	ld	r22, Z
     192:	71 81       	ldd	r23, Z+1	; 0x01
     194:	82 81       	ldd	r24, Z+2	; 0x02
     196:	93 81       	ldd	r25, Z+3	; 0x03
     198:	20 e0       	ldi	r18, 0x00	; 0
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	4a e7       	ldi	r20, 0x7A	; 122
     19e:	55 e4       	ldi	r21, 0x45	; 69
     1a0:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
     1a4:	dc 01       	movw	r26, r24
     1a6:	cb 01       	movw	r24, r22
     1a8:	f8 01       	movw	r30, r16
     1aa:	80 83       	st	Z, r24
     1ac:	91 83       	std	Z+1, r25	; 0x01
     1ae:	a2 83       	std	Z+2, r26	; 0x02
     1b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     1b2:	fe 01       	movw	r30, r28
     1b4:	e0 5b       	subi	r30, 0xB0	; 176
     1b6:	ff 4f       	sbci	r31, 0xFF	; 255
     1b8:	60 81       	ld	r22, Z
     1ba:	71 81       	ldd	r23, Z+1	; 0x01
     1bc:	82 81       	ldd	r24, Z+2	; 0x02
     1be:	93 81       	ldd	r25, Z+3	; 0x03
     1c0:	20 e0       	ldi	r18, 0x00	; 0
     1c2:	30 e0       	ldi	r19, 0x00	; 0
     1c4:	40 e8       	ldi	r20, 0x80	; 128
     1c6:	5f e3       	ldi	r21, 0x3F	; 63
     1c8:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__cmpsf2>
     1cc:	88 23       	and	r24, r24
     1ce:	44 f4       	brge	.+16     	; 0x1e0 <main+0x164>
		__ticks = 1;
     1d0:	fe 01       	movw	r30, r28
     1d2:	e2 5b       	subi	r30, 0xB2	; 178
     1d4:	ff 4f       	sbci	r31, 0xFF	; 255
     1d6:	81 e0       	ldi	r24, 0x01	; 1
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	91 83       	std	Z+1, r25	; 0x01
     1dc:	80 83       	st	Z, r24
     1de:	64 c0       	rjmp	.+200    	; 0x2a8 <main+0x22c>
	else if (__tmp > 65535)
     1e0:	fe 01       	movw	r30, r28
     1e2:	e0 5b       	subi	r30, 0xB0	; 176
     1e4:	ff 4f       	sbci	r31, 0xFF	; 255
     1e6:	60 81       	ld	r22, Z
     1e8:	71 81       	ldd	r23, Z+1	; 0x01
     1ea:	82 81       	ldd	r24, Z+2	; 0x02
     1ec:	93 81       	ldd	r25, Z+3	; 0x03
     1ee:	20 e0       	ldi	r18, 0x00	; 0
     1f0:	3f ef       	ldi	r19, 0xFF	; 255
     1f2:	4f e7       	ldi	r20, 0x7F	; 127
     1f4:	57 e4       	ldi	r21, 0x47	; 71
     1f6:	0e 94 76 26 	call	0x4cec	; 0x4cec <__gesf2>
     1fa:	18 16       	cp	r1, r24
     1fc:	0c f0       	brlt	.+2      	; 0x200 <main+0x184>
     1fe:	43 c0       	rjmp	.+134    	; 0x286 <main+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     200:	fe 01       	movw	r30, r28
     202:	ec 5a       	subi	r30, 0xAC	; 172
     204:	ff 4f       	sbci	r31, 0xFF	; 255
     206:	60 81       	ld	r22, Z
     208:	71 81       	ldd	r23, Z+1	; 0x01
     20a:	82 81       	ldd	r24, Z+2	; 0x02
     20c:	93 81       	ldd	r25, Z+3	; 0x03
     20e:	20 e0       	ldi	r18, 0x00	; 0
     210:	30 e0       	ldi	r19, 0x00	; 0
     212:	40 e2       	ldi	r20, 0x20	; 32
     214:	51 e4       	ldi	r21, 0x41	; 65
     216:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
     21a:	dc 01       	movw	r26, r24
     21c:	cb 01       	movw	r24, r22
     21e:	8e 01       	movw	r16, r28
     220:	02 5b       	subi	r16, 0xB2	; 178
     222:	1f 4f       	sbci	r17, 0xFF	; 255
     224:	bc 01       	movw	r22, r24
     226:	cd 01       	movw	r24, r26
     228:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
     22c:	dc 01       	movw	r26, r24
     22e:	cb 01       	movw	r24, r22
     230:	f8 01       	movw	r30, r16
     232:	91 83       	std	Z+1, r25	; 0x01
     234:	80 83       	st	Z, r24
     236:	1f c0       	rjmp	.+62     	; 0x276 <main+0x1fa>
     238:	fe 01       	movw	r30, r28
     23a:	e4 5b       	subi	r30, 0xB4	; 180
     23c:	ff 4f       	sbci	r31, 0xFF	; 255
     23e:	80 e9       	ldi	r24, 0x90	; 144
     240:	91 e0       	ldi	r25, 0x01	; 1
     242:	91 83       	std	Z+1, r25	; 0x01
     244:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     246:	fe 01       	movw	r30, r28
     248:	e4 5b       	subi	r30, 0xB4	; 180
     24a:	ff 4f       	sbci	r31, 0xFF	; 255
     24c:	80 81       	ld	r24, Z
     24e:	91 81       	ldd	r25, Z+1	; 0x01
     250:	01 97       	sbiw	r24, 0x01	; 1
     252:	f1 f7       	brne	.-4      	; 0x250 <main+0x1d4>
     254:	fe 01       	movw	r30, r28
     256:	e4 5b       	subi	r30, 0xB4	; 180
     258:	ff 4f       	sbci	r31, 0xFF	; 255
     25a:	91 83       	std	Z+1, r25	; 0x01
     25c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     25e:	de 01       	movw	r26, r28
     260:	a2 5b       	subi	r26, 0xB2	; 178
     262:	bf 4f       	sbci	r27, 0xFF	; 255
     264:	fe 01       	movw	r30, r28
     266:	e2 5b       	subi	r30, 0xB2	; 178
     268:	ff 4f       	sbci	r31, 0xFF	; 255
     26a:	80 81       	ld	r24, Z
     26c:	91 81       	ldd	r25, Z+1	; 0x01
     26e:	01 97       	sbiw	r24, 0x01	; 1
     270:	11 96       	adiw	r26, 0x01	; 1
     272:	9c 93       	st	X, r25
     274:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     276:	fe 01       	movw	r30, r28
     278:	e2 5b       	subi	r30, 0xB2	; 178
     27a:	ff 4f       	sbci	r31, 0xFF	; 255
     27c:	80 81       	ld	r24, Z
     27e:	91 81       	ldd	r25, Z+1	; 0x01
     280:	00 97       	sbiw	r24, 0x00	; 0
     282:	d1 f6       	brne	.-76     	; 0x238 <main+0x1bc>
     284:	4b c0       	rjmp	.+150    	; 0x31c <main+0x2a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     286:	8e 01       	movw	r16, r28
     288:	02 5b       	subi	r16, 0xB2	; 178
     28a:	1f 4f       	sbci	r17, 0xFF	; 255
     28c:	fe 01       	movw	r30, r28
     28e:	e0 5b       	subi	r30, 0xB0	; 176
     290:	ff 4f       	sbci	r31, 0xFF	; 255
     292:	60 81       	ld	r22, Z
     294:	71 81       	ldd	r23, Z+1	; 0x01
     296:	82 81       	ldd	r24, Z+2	; 0x02
     298:	93 81       	ldd	r25, Z+3	; 0x03
     29a:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
     29e:	dc 01       	movw	r26, r24
     2a0:	cb 01       	movw	r24, r22
     2a2:	f8 01       	movw	r30, r16
     2a4:	91 83       	std	Z+1, r25	; 0x01
     2a6:	80 83       	st	Z, r24
     2a8:	de 01       	movw	r26, r28
     2aa:	a6 5b       	subi	r26, 0xB6	; 182
     2ac:	bf 4f       	sbci	r27, 0xFF	; 255
     2ae:	fe 01       	movw	r30, r28
     2b0:	e2 5b       	subi	r30, 0xB2	; 178
     2b2:	ff 4f       	sbci	r31, 0xFF	; 255
     2b4:	80 81       	ld	r24, Z
     2b6:	91 81       	ldd	r25, Z+1	; 0x01
     2b8:	11 96       	adiw	r26, 0x01	; 1
     2ba:	9c 93       	st	X, r25
     2bc:	8e 93       	st	-X, r24
     2be:	fe 01       	movw	r30, r28
     2c0:	e6 5b       	subi	r30, 0xB6	; 182
     2c2:	ff 4f       	sbci	r31, 0xFF	; 255
     2c4:	80 81       	ld	r24, Z
     2c6:	91 81       	ldd	r25, Z+1	; 0x01
     2c8:	01 97       	sbiw	r24, 0x01	; 1
     2ca:	f1 f7       	brne	.-4      	; 0x2c8 <main+0x24c>
     2cc:	fe 01       	movw	r30, r28
     2ce:	e6 5b       	subi	r30, 0xB6	; 182
     2d0:	ff 4f       	sbci	r31, 0xFF	; 255
     2d2:	91 83       	std	Z+1, r25	; 0x01
     2d4:	80 83       	st	Z, r24
     2d6:	22 c0       	rjmp	.+68     	; 0x31c <main+0x2a0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     2d8:	8e 01       	movw	r16, r28
     2da:	08 5a       	subi	r16, 0xA8	; 168
     2dc:	1f 4f       	sbci	r17, 0xFF	; 255
     2de:	fe 01       	movw	r30, r28
     2e0:	e7 5a       	subi	r30, 0xA7	; 167
     2e2:	ff 4f       	sbci	r31, 0xFF	; 255
     2e4:	60 81       	ld	r22, Z
     2e6:	71 81       	ldd	r23, Z+1	; 0x01
     2e8:	82 81       	ldd	r24, Z+2	; 0x02
     2ea:	93 81       	ldd	r25, Z+3	; 0x03
     2ec:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
     2f0:	dc 01       	movw	r26, r24
     2f2:	cb 01       	movw	r24, r22
     2f4:	f8 01       	movw	r30, r16
     2f6:	80 83       	st	Z, r24
     2f8:	de 01       	movw	r26, r28
     2fa:	a7 5b       	subi	r26, 0xB7	; 183
     2fc:	bf 4f       	sbci	r27, 0xFF	; 255
     2fe:	fe 01       	movw	r30, r28
     300:	e8 5a       	subi	r30, 0xA8	; 168
     302:	ff 4f       	sbci	r31, 0xFF	; 255
     304:	80 81       	ld	r24, Z
     306:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     308:	fe 01       	movw	r30, r28
     30a:	e7 5b       	subi	r30, 0xB7	; 183
     30c:	ff 4f       	sbci	r31, 0xFF	; 255
     30e:	80 81       	ld	r24, Z
     310:	8a 95       	dec	r24
     312:	f1 f7       	brne	.-4      	; 0x310 <main+0x294>
     314:	fe 01       	movw	r30, r28
     316:	e7 5b       	subi	r30, 0xB7	; 183
     318:	ff 4f       	sbci	r31, 0xFF	; 255
     31a:	80 83       	st	Z, r24
_delay_us(1);
analog();
     31c:	0e 94 20 1e 	call	0x3c40	; 0x3c40 <analog>
     320:	fe 01       	movw	r30, r28
     322:	eb 5b       	subi	r30, 0xBB	; 187
     324:	ff 4f       	sbci	r31, 0xFF	; 255
     326:	80 e0       	ldi	r24, 0x00	; 0
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	a0 e8       	ldi	r26, 0x80	; 128
     32c:	bf e3       	ldi	r27, 0x3F	; 63
     32e:	80 83       	st	Z, r24
     330:	91 83       	std	Z+1, r25	; 0x01
     332:	a2 83       	std	Z+2, r26	; 0x02
     334:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     336:	8e 01       	movw	r16, r28
     338:	0f 5b       	subi	r16, 0xBF	; 191
     33a:	1f 4f       	sbci	r17, 0xFF	; 255
     33c:	fe 01       	movw	r30, r28
     33e:	eb 5b       	subi	r30, 0xBB	; 187
     340:	ff 4f       	sbci	r31, 0xFF	; 255
     342:	60 81       	ld	r22, Z
     344:	71 81       	ldd	r23, Z+1	; 0x01
     346:	82 81       	ldd	r24, Z+2	; 0x02
     348:	93 81       	ldd	r25, Z+3	; 0x03
     34a:	2b ea       	ldi	r18, 0xAB	; 171
     34c:	3a ea       	ldi	r19, 0xAA	; 170
     34e:	4a ea       	ldi	r20, 0xAA	; 170
     350:	50 e4       	ldi	r21, 0x40	; 64
     352:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
     356:	dc 01       	movw	r26, r24
     358:	cb 01       	movw	r24, r22
     35a:	f8 01       	movw	r30, r16
     35c:	80 83       	st	Z, r24
     35e:	91 83       	std	Z+1, r25	; 0x01
     360:	a2 83       	std	Z+2, r26	; 0x02
     362:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     364:	fe 01       	movw	r30, r28
     366:	ef 5b       	subi	r30, 0xBF	; 191
     368:	ff 4f       	sbci	r31, 0xFF	; 255
     36a:	60 81       	ld	r22, Z
     36c:	71 81       	ldd	r23, Z+1	; 0x01
     36e:	82 81       	ldd	r24, Z+2	; 0x02
     370:	93 81       	ldd	r25, Z+3	; 0x03
     372:	20 e0       	ldi	r18, 0x00	; 0
     374:	30 e0       	ldi	r19, 0x00	; 0
     376:	40 e8       	ldi	r20, 0x80	; 128
     378:	5f e3       	ldi	r21, 0x3F	; 63
     37a:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__cmpsf2>
     37e:	88 23       	and	r24, r24
     380:	34 f4       	brge	.+12     	; 0x38e <main+0x312>
		__ticks = 1;
     382:	81 e0       	ldi	r24, 0x01	; 1
     384:	fe 01       	movw	r30, r28
     386:	e0 5c       	subi	r30, 0xC0	; 192
     388:	ff 4f       	sbci	r31, 0xFF	; 255
     38a:	80 83       	st	Z, r24
     38c:	9d c0       	rjmp	.+314    	; 0x4c8 <main+0x44c>
	else if (__tmp > 255)
     38e:	fe 01       	movw	r30, r28
     390:	ef 5b       	subi	r30, 0xBF	; 191
     392:	ff 4f       	sbci	r31, 0xFF	; 255
     394:	60 81       	ld	r22, Z
     396:	71 81       	ldd	r23, Z+1	; 0x01
     398:	82 81       	ldd	r24, Z+2	; 0x02
     39a:	93 81       	ldd	r25, Z+3	; 0x03
     39c:	20 e0       	ldi	r18, 0x00	; 0
     39e:	30 e0       	ldi	r19, 0x00	; 0
     3a0:	4f e7       	ldi	r20, 0x7F	; 127
     3a2:	53 e4       	ldi	r21, 0x43	; 67
     3a4:	0e 94 76 26 	call	0x4cec	; 0x4cec <__gesf2>
     3a8:	18 16       	cp	r1, r24
     3aa:	0c f0       	brlt	.+2      	; 0x3ae <main+0x332>
     3ac:	7e c0       	rjmp	.+252    	; 0x4aa <main+0x42e>
	{
		_delay_ms(__us / 1000.0);
     3ae:	fe 01       	movw	r30, r28
     3b0:	eb 5b       	subi	r30, 0xBB	; 187
     3b2:	ff 4f       	sbci	r31, 0xFF	; 255
     3b4:	60 81       	ld	r22, Z
     3b6:	71 81       	ldd	r23, Z+1	; 0x01
     3b8:	82 81       	ldd	r24, Z+2	; 0x02
     3ba:	93 81       	ldd	r25, Z+3	; 0x03
     3bc:	20 e0       	ldi	r18, 0x00	; 0
     3be:	30 e0       	ldi	r19, 0x00	; 0
     3c0:	4a e7       	ldi	r20, 0x7A	; 122
     3c2:	54 e4       	ldi	r21, 0x44	; 68
     3c4:	0e 94 6d 25 	call	0x4ada	; 0x4ada <__divsf3>
     3c8:	dc 01       	movw	r26, r24
     3ca:	cb 01       	movw	r24, r22
     3cc:	8c af       	std	Y+60, r24	; 0x3c
     3ce:	9d af       	std	Y+61, r25	; 0x3d
     3d0:	ae af       	std	Y+62, r26	; 0x3e
     3d2:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     3d4:	6c ad       	ldd	r22, Y+60	; 0x3c
     3d6:	7d ad       	ldd	r23, Y+61	; 0x3d
     3d8:	8e ad       	ldd	r24, Y+62	; 0x3e
     3da:	9f ad       	ldd	r25, Y+63	; 0x3f
     3dc:	20 e0       	ldi	r18, 0x00	; 0
     3de:	30 e0       	ldi	r19, 0x00	; 0
     3e0:	4a e7       	ldi	r20, 0x7A	; 122
     3e2:	55 e4       	ldi	r21, 0x45	; 69
     3e4:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
     3e8:	dc 01       	movw	r26, r24
     3ea:	cb 01       	movw	r24, r22
     3ec:	88 af       	std	Y+56, r24	; 0x38
     3ee:	99 af       	std	Y+57, r25	; 0x39
     3f0:	aa af       	std	Y+58, r26	; 0x3a
     3f2:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
     3f4:	68 ad       	ldd	r22, Y+56	; 0x38
     3f6:	79 ad       	ldd	r23, Y+57	; 0x39
     3f8:	8a ad       	ldd	r24, Y+58	; 0x3a
     3fa:	9b ad       	ldd	r25, Y+59	; 0x3b
     3fc:	20 e0       	ldi	r18, 0x00	; 0
     3fe:	30 e0       	ldi	r19, 0x00	; 0
     400:	40 e8       	ldi	r20, 0x80	; 128
     402:	5f e3       	ldi	r21, 0x3F	; 63
     404:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__cmpsf2>
     408:	88 23       	and	r24, r24
     40a:	2c f4       	brge	.+10     	; 0x416 <main+0x39a>
		__ticks = 1;
     40c:	81 e0       	ldi	r24, 0x01	; 1
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	9f ab       	std	Y+55, r25	; 0x37
     412:	8e ab       	std	Y+54, r24	; 0x36
     414:	3f c0       	rjmp	.+126    	; 0x494 <main+0x418>
	else if (__tmp > 65535)
     416:	68 ad       	ldd	r22, Y+56	; 0x38
     418:	79 ad       	ldd	r23, Y+57	; 0x39
     41a:	8a ad       	ldd	r24, Y+58	; 0x3a
     41c:	9b ad       	ldd	r25, Y+59	; 0x3b
     41e:	20 e0       	ldi	r18, 0x00	; 0
     420:	3f ef       	ldi	r19, 0xFF	; 255
     422:	4f e7       	ldi	r20, 0x7F	; 127
     424:	57 e4       	ldi	r21, 0x47	; 71
     426:	0e 94 76 26 	call	0x4cec	; 0x4cec <__gesf2>
     42a:	18 16       	cp	r1, r24
     42c:	4c f5       	brge	.+82     	; 0x480 <main+0x404>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     42e:	6c ad       	ldd	r22, Y+60	; 0x3c
     430:	7d ad       	ldd	r23, Y+61	; 0x3d
     432:	8e ad       	ldd	r24, Y+62	; 0x3e
     434:	9f ad       	ldd	r25, Y+63	; 0x3f
     436:	20 e0       	ldi	r18, 0x00	; 0
     438:	30 e0       	ldi	r19, 0x00	; 0
     43a:	40 e2       	ldi	r20, 0x20	; 32
     43c:	51 e4       	ldi	r21, 0x41	; 65
     43e:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
     442:	dc 01       	movw	r26, r24
     444:	cb 01       	movw	r24, r22
     446:	bc 01       	movw	r22, r24
     448:	cd 01       	movw	r24, r26
     44a:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
     44e:	dc 01       	movw	r26, r24
     450:	cb 01       	movw	r24, r22
     452:	9f ab       	std	Y+55, r25	; 0x37
     454:	8e ab       	std	Y+54, r24	; 0x36
     456:	0f c0       	rjmp	.+30     	; 0x476 <main+0x3fa>
     458:	80 e9       	ldi	r24, 0x90	; 144
     45a:	91 e0       	ldi	r25, 0x01	; 1
     45c:	9d ab       	std	Y+53, r25	; 0x35
     45e:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     460:	8c a9       	ldd	r24, Y+52	; 0x34
     462:	9d a9       	ldd	r25, Y+53	; 0x35
     464:	01 97       	sbiw	r24, 0x01	; 1
     466:	f1 f7       	brne	.-4      	; 0x464 <main+0x3e8>
     468:	9d ab       	std	Y+53, r25	; 0x35
     46a:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     46c:	8e a9       	ldd	r24, Y+54	; 0x36
     46e:	9f a9       	ldd	r25, Y+55	; 0x37
     470:	01 97       	sbiw	r24, 0x01	; 1
     472:	9f ab       	std	Y+55, r25	; 0x37
     474:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     476:	8e a9       	ldd	r24, Y+54	; 0x36
     478:	9f a9       	ldd	r25, Y+55	; 0x37
     47a:	00 97       	sbiw	r24, 0x00	; 0
     47c:	69 f7       	brne	.-38     	; 0x458 <main+0x3dc>
     47e:	2d c0       	rjmp	.+90     	; 0x4da <main+0x45e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     480:	68 ad       	ldd	r22, Y+56	; 0x38
     482:	79 ad       	ldd	r23, Y+57	; 0x39
     484:	8a ad       	ldd	r24, Y+58	; 0x3a
     486:	9b ad       	ldd	r25, Y+59	; 0x3b
     488:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
     48c:	dc 01       	movw	r26, r24
     48e:	cb 01       	movw	r24, r22
     490:	9f ab       	std	Y+55, r25	; 0x37
     492:	8e ab       	std	Y+54, r24	; 0x36
     494:	8e a9       	ldd	r24, Y+54	; 0x36
     496:	9f a9       	ldd	r25, Y+55	; 0x37
     498:	9b ab       	std	Y+51, r25	; 0x33
     49a:	8a ab       	std	Y+50, r24	; 0x32
     49c:	8a a9       	ldd	r24, Y+50	; 0x32
     49e:	9b a9       	ldd	r25, Y+51	; 0x33
     4a0:	01 97       	sbiw	r24, 0x01	; 1
     4a2:	f1 f7       	brne	.-4      	; 0x4a0 <main+0x424>
     4a4:	9b ab       	std	Y+51, r25	; 0x33
     4a6:	8a ab       	std	Y+50, r24	; 0x32
     4a8:	18 c0       	rjmp	.+48     	; 0x4da <main+0x45e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     4aa:	fe 01       	movw	r30, r28
     4ac:	ef 5b       	subi	r30, 0xBF	; 191
     4ae:	ff 4f       	sbci	r31, 0xFF	; 255
     4b0:	60 81       	ld	r22, Z
     4b2:	71 81       	ldd	r23, Z+1	; 0x01
     4b4:	82 81       	ldd	r24, Z+2	; 0x02
     4b6:	93 81       	ldd	r25, Z+3	; 0x03
     4b8:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
     4bc:	dc 01       	movw	r26, r24
     4be:	cb 01       	movw	r24, r22
     4c0:	fe 01       	movw	r30, r28
     4c2:	e0 5c       	subi	r30, 0xC0	; 192
     4c4:	ff 4f       	sbci	r31, 0xFF	; 255
     4c6:	80 83       	st	Z, r24
     4c8:	fe 01       	movw	r30, r28
     4ca:	e0 5c       	subi	r30, 0xC0	; 192
     4cc:	ff 4f       	sbci	r31, 0xFF	; 255
     4ce:	80 81       	ld	r24, Z
     4d0:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     4d2:	89 a9       	ldd	r24, Y+49	; 0x31
     4d4:	8a 95       	dec	r24
     4d6:	f1 f7       	brne	.-4      	; 0x4d4 <main+0x458>
     4d8:	89 ab       	std	Y+49, r24	; 0x31
_delay_us(1);
while(1)
{
ReadGamepad();
     4da:	0e 94 23 04 	call	0x846	; 0x846 <ReadGamepad>
     4de:	80 e0       	ldi	r24, 0x00	; 0
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	a0 ea       	ldi	r26, 0xA0	; 160
     4e4:	b0 e4       	ldi	r27, 0x40	; 64
     4e6:	8d a7       	std	Y+45, r24	; 0x2d
     4e8:	9e a7       	std	Y+46, r25	; 0x2e
     4ea:	af a7       	std	Y+47, r26	; 0x2f
     4ec:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     4ee:	6d a5       	ldd	r22, Y+45	; 0x2d
     4f0:	7e a5       	ldd	r23, Y+46	; 0x2e
     4f2:	8f a5       	ldd	r24, Y+47	; 0x2f
     4f4:	98 a9       	ldd	r25, Y+48	; 0x30
     4f6:	2b ea       	ldi	r18, 0xAB	; 171
     4f8:	3a ea       	ldi	r19, 0xAA	; 170
     4fa:	4a ea       	ldi	r20, 0xAA	; 170
     4fc:	50 e4       	ldi	r21, 0x40	; 64
     4fe:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
     502:	dc 01       	movw	r26, r24
     504:	cb 01       	movw	r24, r22
     506:	89 a7       	std	Y+41, r24	; 0x29
     508:	9a a7       	std	Y+42, r25	; 0x2a
     50a:	ab a7       	std	Y+43, r26	; 0x2b
     50c:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
     50e:	69 a5       	ldd	r22, Y+41	; 0x29
     510:	7a a5       	ldd	r23, Y+42	; 0x2a
     512:	8b a5       	ldd	r24, Y+43	; 0x2b
     514:	9c a5       	ldd	r25, Y+44	; 0x2c
     516:	20 e0       	ldi	r18, 0x00	; 0
     518:	30 e0       	ldi	r19, 0x00	; 0
     51a:	40 e8       	ldi	r20, 0x80	; 128
     51c:	5f e3       	ldi	r21, 0x3F	; 63
     51e:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__cmpsf2>
     522:	88 23       	and	r24, r24
     524:	1c f4       	brge	.+6      	; 0x52c <main+0x4b0>
		__ticks = 1;
     526:	81 e0       	ldi	r24, 0x01	; 1
     528:	88 a7       	std	Y+40, r24	; 0x28
     52a:	91 c0       	rjmp	.+290    	; 0x64e <main+0x5d2>
	else if (__tmp > 255)
     52c:	69 a5       	ldd	r22, Y+41	; 0x29
     52e:	7a a5       	ldd	r23, Y+42	; 0x2a
     530:	8b a5       	ldd	r24, Y+43	; 0x2b
     532:	9c a5       	ldd	r25, Y+44	; 0x2c
     534:	20 e0       	ldi	r18, 0x00	; 0
     536:	30 e0       	ldi	r19, 0x00	; 0
     538:	4f e7       	ldi	r20, 0x7F	; 127
     53a:	53 e4       	ldi	r21, 0x43	; 67
     53c:	0e 94 76 26 	call	0x4cec	; 0x4cec <__gesf2>
     540:	18 16       	cp	r1, r24
     542:	0c f0       	brlt	.+2      	; 0x546 <main+0x4ca>
     544:	7b c0       	rjmp	.+246    	; 0x63c <main+0x5c0>
	{
		_delay_ms(__us / 1000.0);
     546:	6d a5       	ldd	r22, Y+45	; 0x2d
     548:	7e a5       	ldd	r23, Y+46	; 0x2e
     54a:	8f a5       	ldd	r24, Y+47	; 0x2f
     54c:	98 a9       	ldd	r25, Y+48	; 0x30
     54e:	20 e0       	ldi	r18, 0x00	; 0
     550:	30 e0       	ldi	r19, 0x00	; 0
     552:	4a e7       	ldi	r20, 0x7A	; 122
     554:	54 e4       	ldi	r21, 0x44	; 68
     556:	0e 94 6d 25 	call	0x4ada	; 0x4ada <__divsf3>
     55a:	dc 01       	movw	r26, r24
     55c:	cb 01       	movw	r24, r22
     55e:	8c a3       	std	Y+36, r24	; 0x24
     560:	9d a3       	std	Y+37, r25	; 0x25
     562:	ae a3       	std	Y+38, r26	; 0x26
     564:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     566:	6c a1       	ldd	r22, Y+36	; 0x24
     568:	7d a1       	ldd	r23, Y+37	; 0x25
     56a:	8e a1       	ldd	r24, Y+38	; 0x26
     56c:	9f a1       	ldd	r25, Y+39	; 0x27
     56e:	20 e0       	ldi	r18, 0x00	; 0
     570:	30 e0       	ldi	r19, 0x00	; 0
     572:	4a e7       	ldi	r20, 0x7A	; 122
     574:	55 e4       	ldi	r21, 0x45	; 69
     576:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
     57a:	dc 01       	movw	r26, r24
     57c:	cb 01       	movw	r24, r22
     57e:	88 a3       	std	Y+32, r24	; 0x20
     580:	99 a3       	std	Y+33, r25	; 0x21
     582:	aa a3       	std	Y+34, r26	; 0x22
     584:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
     586:	68 a1       	ldd	r22, Y+32	; 0x20
     588:	79 a1       	ldd	r23, Y+33	; 0x21
     58a:	8a a1       	ldd	r24, Y+34	; 0x22
     58c:	9b a1       	ldd	r25, Y+35	; 0x23
     58e:	20 e0       	ldi	r18, 0x00	; 0
     590:	30 e0       	ldi	r19, 0x00	; 0
     592:	40 e8       	ldi	r20, 0x80	; 128
     594:	5f e3       	ldi	r21, 0x3F	; 63
     596:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__cmpsf2>
     59a:	88 23       	and	r24, r24
     59c:	2c f4       	brge	.+10     	; 0x5a8 <main+0x52c>
		__ticks = 1;
     59e:	81 e0       	ldi	r24, 0x01	; 1
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	9f 8f       	std	Y+31, r25	; 0x1f
     5a4:	8e 8f       	std	Y+30, r24	; 0x1e
     5a6:	3f c0       	rjmp	.+126    	; 0x626 <main+0x5aa>
	else if (__tmp > 65535)
     5a8:	68 a1       	ldd	r22, Y+32	; 0x20
     5aa:	79 a1       	ldd	r23, Y+33	; 0x21
     5ac:	8a a1       	ldd	r24, Y+34	; 0x22
     5ae:	9b a1       	ldd	r25, Y+35	; 0x23
     5b0:	20 e0       	ldi	r18, 0x00	; 0
     5b2:	3f ef       	ldi	r19, 0xFF	; 255
     5b4:	4f e7       	ldi	r20, 0x7F	; 127
     5b6:	57 e4       	ldi	r21, 0x47	; 71
     5b8:	0e 94 76 26 	call	0x4cec	; 0x4cec <__gesf2>
     5bc:	18 16       	cp	r1, r24
     5be:	4c f5       	brge	.+82     	; 0x612 <main+0x596>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5c0:	6c a1       	ldd	r22, Y+36	; 0x24
     5c2:	7d a1       	ldd	r23, Y+37	; 0x25
     5c4:	8e a1       	ldd	r24, Y+38	; 0x26
     5c6:	9f a1       	ldd	r25, Y+39	; 0x27
     5c8:	20 e0       	ldi	r18, 0x00	; 0
     5ca:	30 e0       	ldi	r19, 0x00	; 0
     5cc:	40 e2       	ldi	r20, 0x20	; 32
     5ce:	51 e4       	ldi	r21, 0x41	; 65
     5d0:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
     5d4:	dc 01       	movw	r26, r24
     5d6:	cb 01       	movw	r24, r22
     5d8:	bc 01       	movw	r22, r24
     5da:	cd 01       	movw	r24, r26
     5dc:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
     5e0:	dc 01       	movw	r26, r24
     5e2:	cb 01       	movw	r24, r22
     5e4:	9f 8f       	std	Y+31, r25	; 0x1f
     5e6:	8e 8f       	std	Y+30, r24	; 0x1e
     5e8:	0f c0       	rjmp	.+30     	; 0x608 <main+0x58c>
     5ea:	80 e9       	ldi	r24, 0x90	; 144
     5ec:	91 e0       	ldi	r25, 0x01	; 1
     5ee:	9d 8f       	std	Y+29, r25	; 0x1d
     5f0:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     5f2:	8c 8d       	ldd	r24, Y+28	; 0x1c
     5f4:	9d 8d       	ldd	r25, Y+29	; 0x1d
     5f6:	01 97       	sbiw	r24, 0x01	; 1
     5f8:	f1 f7       	brne	.-4      	; 0x5f6 <main+0x57a>
     5fa:	9d 8f       	std	Y+29, r25	; 0x1d
     5fc:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5fe:	8e 8d       	ldd	r24, Y+30	; 0x1e
     600:	9f 8d       	ldd	r25, Y+31	; 0x1f
     602:	01 97       	sbiw	r24, 0x01	; 1
     604:	9f 8f       	std	Y+31, r25	; 0x1f
     606:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     608:	8e 8d       	ldd	r24, Y+30	; 0x1e
     60a:	9f 8d       	ldd	r25, Y+31	; 0x1f
     60c:	00 97       	sbiw	r24, 0x00	; 0
     60e:	69 f7       	brne	.-38     	; 0x5ea <main+0x56e>
     610:	24 c0       	rjmp	.+72     	; 0x65a <main+0x5de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     612:	68 a1       	ldd	r22, Y+32	; 0x20
     614:	79 a1       	ldd	r23, Y+33	; 0x21
     616:	8a a1       	ldd	r24, Y+34	; 0x22
     618:	9b a1       	ldd	r25, Y+35	; 0x23
     61a:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
     61e:	dc 01       	movw	r26, r24
     620:	cb 01       	movw	r24, r22
     622:	9f 8f       	std	Y+31, r25	; 0x1f
     624:	8e 8f       	std	Y+30, r24	; 0x1e
     626:	8e 8d       	ldd	r24, Y+30	; 0x1e
     628:	9f 8d       	ldd	r25, Y+31	; 0x1f
     62a:	9b 8f       	std	Y+27, r25	; 0x1b
     62c:	8a 8f       	std	Y+26, r24	; 0x1a
     62e:	8a 8d       	ldd	r24, Y+26	; 0x1a
     630:	9b 8d       	ldd	r25, Y+27	; 0x1b
     632:	01 97       	sbiw	r24, 0x01	; 1
     634:	f1 f7       	brne	.-4      	; 0x632 <main+0x5b6>
     636:	9b 8f       	std	Y+27, r25	; 0x1b
     638:	8a 8f       	std	Y+26, r24	; 0x1a
     63a:	0f c0       	rjmp	.+30     	; 0x65a <main+0x5de>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     63c:	69 a5       	ldd	r22, Y+41	; 0x29
     63e:	7a a5       	ldd	r23, Y+42	; 0x2a
     640:	8b a5       	ldd	r24, Y+43	; 0x2b
     642:	9c a5       	ldd	r25, Y+44	; 0x2c
     644:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
     648:	dc 01       	movw	r26, r24
     64a:	cb 01       	movw	r24, r22
     64c:	88 a7       	std	Y+40, r24	; 0x28
     64e:	88 a5       	ldd	r24, Y+40	; 0x28
     650:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     652:	89 8d       	ldd	r24, Y+25	; 0x19
     654:	8a 95       	dec	r24
     656:	f1 f7       	brne	.-4      	; 0x654 <main+0x5d8>
     658:	89 8f       	std	Y+25, r24	; 0x19
_delay_us(5);
while(!(UCSRA&(1<<UDRE)))//till data reg not empty
     65a:	eb e2       	ldi	r30, 0x2B	; 43
     65c:	f0 e0       	ldi	r31, 0x00	; 0
     65e:	80 81       	ld	r24, Z
     660:	88 2f       	mov	r24, r24
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	80 72       	andi	r24, 0x20	; 32
     666:	90 70       	andi	r25, 0x00	; 0
     668:	00 97       	sbiw	r24, 0x00	; 0
     66a:	b9 f3       	breq	.-18     	; 0x65a <main+0x5de>
;
UDR=0x01;
     66c:	ec e2       	ldi	r30, 0x2C	; 44
     66e:	f0 e0       	ldi	r31, 0x00	; 0
     670:	81 e0       	ldi	r24, 0x01	; 1
     672:	80 83       	st	Z, r24
     674:	80 e0       	ldi	r24, 0x00	; 0
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	a0 ea       	ldi	r26, 0xA0	; 160
     67a:	b0 e4       	ldi	r27, 0x40	; 64
     67c:	8d 8b       	std	Y+21, r24	; 0x15
     67e:	9e 8b       	std	Y+22, r25	; 0x16
     680:	af 8b       	std	Y+23, r26	; 0x17
     682:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     684:	6d 89       	ldd	r22, Y+21	; 0x15
     686:	7e 89       	ldd	r23, Y+22	; 0x16
     688:	8f 89       	ldd	r24, Y+23	; 0x17
     68a:	98 8d       	ldd	r25, Y+24	; 0x18
     68c:	2b ea       	ldi	r18, 0xAB	; 171
     68e:	3a ea       	ldi	r19, 0xAA	; 170
     690:	4a ea       	ldi	r20, 0xAA	; 170
     692:	50 e4       	ldi	r21, 0x40	; 64
     694:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
     698:	dc 01       	movw	r26, r24
     69a:	cb 01       	movw	r24, r22
     69c:	89 8b       	std	Y+17, r24	; 0x11
     69e:	9a 8b       	std	Y+18, r25	; 0x12
     6a0:	ab 8b       	std	Y+19, r26	; 0x13
     6a2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     6a4:	69 89       	ldd	r22, Y+17	; 0x11
     6a6:	7a 89       	ldd	r23, Y+18	; 0x12
     6a8:	8b 89       	ldd	r24, Y+19	; 0x13
     6aa:	9c 89       	ldd	r25, Y+20	; 0x14
     6ac:	20 e0       	ldi	r18, 0x00	; 0
     6ae:	30 e0       	ldi	r19, 0x00	; 0
     6b0:	40 e8       	ldi	r20, 0x80	; 128
     6b2:	5f e3       	ldi	r21, 0x3F	; 63
     6b4:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__cmpsf2>
     6b8:	88 23       	and	r24, r24
     6ba:	1c f4       	brge	.+6      	; 0x6c2 <main+0x646>
		__ticks = 1;
     6bc:	81 e0       	ldi	r24, 0x01	; 1
     6be:	88 8b       	std	Y+16, r24	; 0x10
     6c0:	91 c0       	rjmp	.+290    	; 0x7e4 <main+0x768>
	else if (__tmp > 255)
     6c2:	69 89       	ldd	r22, Y+17	; 0x11
     6c4:	7a 89       	ldd	r23, Y+18	; 0x12
     6c6:	8b 89       	ldd	r24, Y+19	; 0x13
     6c8:	9c 89       	ldd	r25, Y+20	; 0x14
     6ca:	20 e0       	ldi	r18, 0x00	; 0
     6cc:	30 e0       	ldi	r19, 0x00	; 0
     6ce:	4f e7       	ldi	r20, 0x7F	; 127
     6d0:	53 e4       	ldi	r21, 0x43	; 67
     6d2:	0e 94 76 26 	call	0x4cec	; 0x4cec <__gesf2>
     6d6:	18 16       	cp	r1, r24
     6d8:	0c f0       	brlt	.+2      	; 0x6dc <main+0x660>
     6da:	7b c0       	rjmp	.+246    	; 0x7d2 <main+0x756>
	{
		_delay_ms(__us / 1000.0);
     6dc:	6d 89       	ldd	r22, Y+21	; 0x15
     6de:	7e 89       	ldd	r23, Y+22	; 0x16
     6e0:	8f 89       	ldd	r24, Y+23	; 0x17
     6e2:	98 8d       	ldd	r25, Y+24	; 0x18
     6e4:	20 e0       	ldi	r18, 0x00	; 0
     6e6:	30 e0       	ldi	r19, 0x00	; 0
     6e8:	4a e7       	ldi	r20, 0x7A	; 122
     6ea:	54 e4       	ldi	r21, 0x44	; 68
     6ec:	0e 94 6d 25 	call	0x4ada	; 0x4ada <__divsf3>
     6f0:	dc 01       	movw	r26, r24
     6f2:	cb 01       	movw	r24, r22
     6f4:	8c 87       	std	Y+12, r24	; 0x0c
     6f6:	9d 87       	std	Y+13, r25	; 0x0d
     6f8:	ae 87       	std	Y+14, r26	; 0x0e
     6fa:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     6fc:	6c 85       	ldd	r22, Y+12	; 0x0c
     6fe:	7d 85       	ldd	r23, Y+13	; 0x0d
     700:	8e 85       	ldd	r24, Y+14	; 0x0e
     702:	9f 85       	ldd	r25, Y+15	; 0x0f
     704:	20 e0       	ldi	r18, 0x00	; 0
     706:	30 e0       	ldi	r19, 0x00	; 0
     708:	4a e7       	ldi	r20, 0x7A	; 122
     70a:	55 e4       	ldi	r21, 0x45	; 69
     70c:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
     710:	dc 01       	movw	r26, r24
     712:	cb 01       	movw	r24, r22
     714:	88 87       	std	Y+8, r24	; 0x08
     716:	99 87       	std	Y+9, r25	; 0x09
     718:	aa 87       	std	Y+10, r26	; 0x0a
     71a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     71c:	68 85       	ldd	r22, Y+8	; 0x08
     71e:	79 85       	ldd	r23, Y+9	; 0x09
     720:	8a 85       	ldd	r24, Y+10	; 0x0a
     722:	9b 85       	ldd	r25, Y+11	; 0x0b
     724:	20 e0       	ldi	r18, 0x00	; 0
     726:	30 e0       	ldi	r19, 0x00	; 0
     728:	40 e8       	ldi	r20, 0x80	; 128
     72a:	5f e3       	ldi	r21, 0x3F	; 63
     72c:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__cmpsf2>
     730:	88 23       	and	r24, r24
     732:	2c f4       	brge	.+10     	; 0x73e <main+0x6c2>
		__ticks = 1;
     734:	81 e0       	ldi	r24, 0x01	; 1
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	9f 83       	std	Y+7, r25	; 0x07
     73a:	8e 83       	std	Y+6, r24	; 0x06
     73c:	3f c0       	rjmp	.+126    	; 0x7bc <main+0x740>
	else if (__tmp > 65535)
     73e:	68 85       	ldd	r22, Y+8	; 0x08
     740:	79 85       	ldd	r23, Y+9	; 0x09
     742:	8a 85       	ldd	r24, Y+10	; 0x0a
     744:	9b 85       	ldd	r25, Y+11	; 0x0b
     746:	20 e0       	ldi	r18, 0x00	; 0
     748:	3f ef       	ldi	r19, 0xFF	; 255
     74a:	4f e7       	ldi	r20, 0x7F	; 127
     74c:	57 e4       	ldi	r21, 0x47	; 71
     74e:	0e 94 76 26 	call	0x4cec	; 0x4cec <__gesf2>
     752:	18 16       	cp	r1, r24
     754:	4c f5       	brge	.+82     	; 0x7a8 <main+0x72c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     756:	6c 85       	ldd	r22, Y+12	; 0x0c
     758:	7d 85       	ldd	r23, Y+13	; 0x0d
     75a:	8e 85       	ldd	r24, Y+14	; 0x0e
     75c:	9f 85       	ldd	r25, Y+15	; 0x0f
     75e:	20 e0       	ldi	r18, 0x00	; 0
     760:	30 e0       	ldi	r19, 0x00	; 0
     762:	40 e2       	ldi	r20, 0x20	; 32
     764:	51 e4       	ldi	r21, 0x41	; 65
     766:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
     76a:	dc 01       	movw	r26, r24
     76c:	cb 01       	movw	r24, r22
     76e:	bc 01       	movw	r22, r24
     770:	cd 01       	movw	r24, r26
     772:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
     776:	dc 01       	movw	r26, r24
     778:	cb 01       	movw	r24, r22
     77a:	9f 83       	std	Y+7, r25	; 0x07
     77c:	8e 83       	std	Y+6, r24	; 0x06
     77e:	0f c0       	rjmp	.+30     	; 0x79e <main+0x722>
     780:	80 e9       	ldi	r24, 0x90	; 144
     782:	91 e0       	ldi	r25, 0x01	; 1
     784:	9d 83       	std	Y+5, r25	; 0x05
     786:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     788:	8c 81       	ldd	r24, Y+4	; 0x04
     78a:	9d 81       	ldd	r25, Y+5	; 0x05
     78c:	01 97       	sbiw	r24, 0x01	; 1
     78e:	f1 f7       	brne	.-4      	; 0x78c <main+0x710>
     790:	9d 83       	std	Y+5, r25	; 0x05
     792:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     794:	8e 81       	ldd	r24, Y+6	; 0x06
     796:	9f 81       	ldd	r25, Y+7	; 0x07
     798:	01 97       	sbiw	r24, 0x01	; 1
     79a:	9f 83       	std	Y+7, r25	; 0x07
     79c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     79e:	8e 81       	ldd	r24, Y+6	; 0x06
     7a0:	9f 81       	ldd	r25, Y+7	; 0x07
     7a2:	00 97       	sbiw	r24, 0x00	; 0
     7a4:	69 f7       	brne	.-38     	; 0x780 <main+0x704>
     7a6:	24 c0       	rjmp	.+72     	; 0x7f0 <main+0x774>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7a8:	68 85       	ldd	r22, Y+8	; 0x08
     7aa:	79 85       	ldd	r23, Y+9	; 0x09
     7ac:	8a 85       	ldd	r24, Y+10	; 0x0a
     7ae:	9b 85       	ldd	r25, Y+11	; 0x0b
     7b0:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
     7b4:	dc 01       	movw	r26, r24
     7b6:	cb 01       	movw	r24, r22
     7b8:	9f 83       	std	Y+7, r25	; 0x07
     7ba:	8e 83       	std	Y+6, r24	; 0x06
     7bc:	8e 81       	ldd	r24, Y+6	; 0x06
     7be:	9f 81       	ldd	r25, Y+7	; 0x07
     7c0:	9b 83       	std	Y+3, r25	; 0x03
     7c2:	8a 83       	std	Y+2, r24	; 0x02
     7c4:	8a 81       	ldd	r24, Y+2	; 0x02
     7c6:	9b 81       	ldd	r25, Y+3	; 0x03
     7c8:	01 97       	sbiw	r24, 0x01	; 1
     7ca:	f1 f7       	brne	.-4      	; 0x7c8 <main+0x74c>
     7cc:	9b 83       	std	Y+3, r25	; 0x03
     7ce:	8a 83       	std	Y+2, r24	; 0x02
     7d0:	0f c0       	rjmp	.+30     	; 0x7f0 <main+0x774>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     7d2:	69 89       	ldd	r22, Y+17	; 0x11
     7d4:	7a 89       	ldd	r23, Y+18	; 0x12
     7d6:	8b 89       	ldd	r24, Y+19	; 0x13
     7d8:	9c 89       	ldd	r25, Y+20	; 0x14
     7da:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
     7de:	dc 01       	movw	r26, r24
     7e0:	cb 01       	movw	r24, r22
     7e2:	88 8b       	std	Y+16, r24	; 0x10
     7e4:	88 89       	ldd	r24, Y+16	; 0x10
     7e6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     7e8:	89 81       	ldd	r24, Y+1	; 0x01
     7ea:	8a 95       	dec	r24
     7ec:	f1 f7       	brne	.-4      	; 0x7ea <main+0x76e>
     7ee:	89 83       	std	Y+1, r24	; 0x01
_delay_us(5);
while(!(UCSRA&(1<<UDRE)))//till data reg not empty
     7f0:	eb e2       	ldi	r30, 0x2B	; 43
     7f2:	f0 e0       	ldi	r31, 0x00	; 0
     7f4:	80 81       	ld	r24, Z
     7f6:	88 2f       	mov	r24, r24
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	80 72       	andi	r24, 0x20	; 32
     7fc:	90 70       	andi	r25, 0x00	; 0
     7fe:	00 97       	sbiw	r24, 0x00	; 0
     800:	b9 f3       	breq	.-18     	; 0x7f0 <main+0x774>
;
UDR=PS2data5;
     802:	ec e2       	ldi	r30, 0x2C	; 44
     804:	f0 e0       	ldi	r31, 0x00	; 0
     806:	80 91 66 00 	lds	r24, 0x0066
     80a:	80 83       	st	Z, r24
while(!(UCSRA&(1<<UDRE)))//till data reg not empty
     80c:	eb e2       	ldi	r30, 0x2B	; 43
     80e:	f0 e0       	ldi	r31, 0x00	; 0
     810:	80 81       	ld	r24, Z
     812:	88 2f       	mov	r24, r24
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	80 72       	andi	r24, 0x20	; 32
     818:	90 70       	andi	r25, 0x00	; 0
     81a:	00 97       	sbiw	r24, 0x00	; 0
     81c:	b9 f3       	breq	.-18     	; 0x80c <main+0x790>
;
UDR=PS2data8;
     81e:	ec e2       	ldi	r30, 0x2C	; 44
     820:	f0 e0       	ldi	r31, 0x00	; 0
     822:	80 91 65 00 	lds	r24, 0x0065
     826:	80 83       	st	Z, r24
while(!(UCSRA&(1<<UDRE)))//till data reg not empty
     828:	eb e2       	ldi	r30, 0x2B	; 43
     82a:	f0 e0       	ldi	r31, 0x00	; 0
     82c:	80 81       	ld	r24, Z
     82e:	88 2f       	mov	r24, r24
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	80 72       	andi	r24, 0x20	; 32
     834:	90 70       	andi	r25, 0x00	; 0
     836:	00 97       	sbiw	r24, 0x00	; 0
     838:	b9 f3       	breq	.-18     	; 0x828 <main+0x7ac>
;
UDR=PS2data7;
     83a:	ec e2       	ldi	r30, 0x2C	; 44
     83c:	f0 e0       	ldi	r31, 0x00	; 0
     83e:	80 91 60 00 	lds	r24, 0x0060
     842:	80 83       	st	Z, r24
     844:	4a ce       	rjmp	.-876    	; 0x4da <main+0x45e>

00000846 <ReadGamepad>:
}
}
void ReadGamepad()
{
     846:	0f 93       	push	r16
     848:	1f 93       	push	r17
     84a:	df 93       	push	r29
     84c:	cf 93       	push	r28
     84e:	cd b7       	in	r28, 0x3d	; 61
     850:	de b7       	in	r29, 0x3e	; 62
     852:	c0 58       	subi	r28, 0x80	; 128
     854:	d1 40       	sbci	r29, 0x01	; 1
     856:	0f b6       	in	r0, 0x3f	; 63
     858:	f8 94       	cli
     85a:	de bf       	out	0x3e, r29	; 62
     85c:	0f be       	out	0x3f, r0	; 63
     85e:	cd bf       	out	0x3d, r28	; 61
   SET(PS2PORT,PS2cmd); 
     860:	a5 e3       	ldi	r26, 0x35	; 53
     862:	b0 e0       	ldi	r27, 0x00	; 0
     864:	e5 e3       	ldi	r30, 0x35	; 53
     866:	f0 e0       	ldi	r31, 0x00	; 0
     868:	80 81       	ld	r24, Z
     86a:	84 60       	ori	r24, 0x04	; 4
     86c:	8c 93       	st	X, r24
   SET(PS2PORT,PS2clk); 
     86e:	a5 e3       	ldi	r26, 0x35	; 53
     870:	b0 e0       	ldi	r27, 0x00	; 0
     872:	e5 e3       	ldi	r30, 0x35	; 53
     874:	f0 e0       	ldi	r31, 0x00	; 0
     876:	80 81       	ld	r24, Z
     878:	81 60       	ori	r24, 0x01	; 1
     87a:	8c 93       	st	X, r24
   CLR(PS2PORT,PS2att); // low enable joystick
     87c:	a5 e3       	ldi	r26, 0x35	; 53
     87e:	b0 e0       	ldi	r27, 0x00	; 0
     880:	e5 e3       	ldi	r30, 0x35	; 53
     882:	f0 e0       	ldi	r31, 0x00	; 0
     884:	80 81       	ld	r24, Z
     886:	8f 7e       	andi	r24, 0xEF	; 239
     888:	8c 93       	st	X, r24
     88a:	fe 01       	movw	r30, r28
     88c:	e3 58       	subi	r30, 0x83	; 131
     88e:	fe 4f       	sbci	r31, 0xFE	; 254
     890:	80 e0       	ldi	r24, 0x00	; 0
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	a0 e8       	ldi	r26, 0x80	; 128
     896:	bf e3       	ldi	r27, 0x3F	; 63
     898:	80 83       	st	Z, r24
     89a:	91 83       	std	Z+1, r25	; 0x01
     89c:	a2 83       	std	Z+2, r26	; 0x02
     89e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     8a0:	8e 01       	movw	r16, r28
     8a2:	07 58       	subi	r16, 0x87	; 135
     8a4:	1e 4f       	sbci	r17, 0xFE	; 254
     8a6:	fe 01       	movw	r30, r28
     8a8:	e3 58       	subi	r30, 0x83	; 131
     8aa:	fe 4f       	sbci	r31, 0xFE	; 254
     8ac:	60 81       	ld	r22, Z
     8ae:	71 81       	ldd	r23, Z+1	; 0x01
     8b0:	82 81       	ldd	r24, Z+2	; 0x02
     8b2:	93 81       	ldd	r25, Z+3	; 0x03
     8b4:	2b ea       	ldi	r18, 0xAB	; 171
     8b6:	3a ea       	ldi	r19, 0xAA	; 170
     8b8:	4a ea       	ldi	r20, 0xAA	; 170
     8ba:	50 e4       	ldi	r21, 0x40	; 64
     8bc:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
     8c0:	dc 01       	movw	r26, r24
     8c2:	cb 01       	movw	r24, r22
     8c4:	f8 01       	movw	r30, r16
     8c6:	80 83       	st	Z, r24
     8c8:	91 83       	std	Z+1, r25	; 0x01
     8ca:	a2 83       	std	Z+2, r26	; 0x02
     8cc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     8ce:	fe 01       	movw	r30, r28
     8d0:	e7 58       	subi	r30, 0x87	; 135
     8d2:	fe 4f       	sbci	r31, 0xFE	; 254
     8d4:	60 81       	ld	r22, Z
     8d6:	71 81       	ldd	r23, Z+1	; 0x01
     8d8:	82 81       	ldd	r24, Z+2	; 0x02
     8da:	93 81       	ldd	r25, Z+3	; 0x03
     8dc:	20 e0       	ldi	r18, 0x00	; 0
     8de:	30 e0       	ldi	r19, 0x00	; 0
     8e0:	40 e8       	ldi	r20, 0x80	; 128
     8e2:	5f e3       	ldi	r21, 0x3F	; 63
     8e4:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__cmpsf2>
     8e8:	88 23       	and	r24, r24
     8ea:	34 f4       	brge	.+12     	; 0x8f8 <__stack+0x99>
		__ticks = 1;
     8ec:	fe 01       	movw	r30, r28
     8ee:	e8 58       	subi	r30, 0x88	; 136
     8f0:	fe 4f       	sbci	r31, 0xFE	; 254
     8f2:	81 e0       	ldi	r24, 0x01	; 1
     8f4:	80 83       	st	Z, r24
     8f6:	e0 c0       	rjmp	.+448    	; 0xab8 <__stack+0x259>
	else if (__tmp > 255)
     8f8:	fe 01       	movw	r30, r28
     8fa:	e7 58       	subi	r30, 0x87	; 135
     8fc:	fe 4f       	sbci	r31, 0xFE	; 254
     8fe:	60 81       	ld	r22, Z
     900:	71 81       	ldd	r23, Z+1	; 0x01
     902:	82 81       	ldd	r24, Z+2	; 0x02
     904:	93 81       	ldd	r25, Z+3	; 0x03
     906:	20 e0       	ldi	r18, 0x00	; 0
     908:	30 e0       	ldi	r19, 0x00	; 0
     90a:	4f e7       	ldi	r20, 0x7F	; 127
     90c:	53 e4       	ldi	r21, 0x43	; 67
     90e:	0e 94 76 26 	call	0x4cec	; 0x4cec <__gesf2>
     912:	18 16       	cp	r1, r24
     914:	0c f0       	brlt	.+2      	; 0x918 <__stack+0xb9>
     916:	c0 c0       	rjmp	.+384    	; 0xa98 <__stack+0x239>
	{
		_delay_ms(__us / 1000.0);
     918:	fe 01       	movw	r30, r28
     91a:	e3 58       	subi	r30, 0x83	; 131
     91c:	fe 4f       	sbci	r31, 0xFE	; 254
     91e:	60 81       	ld	r22, Z
     920:	71 81       	ldd	r23, Z+1	; 0x01
     922:	82 81       	ldd	r24, Z+2	; 0x02
     924:	93 81       	ldd	r25, Z+3	; 0x03
     926:	20 e0       	ldi	r18, 0x00	; 0
     928:	30 e0       	ldi	r19, 0x00	; 0
     92a:	4a e7       	ldi	r20, 0x7A	; 122
     92c:	54 e4       	ldi	r21, 0x44	; 68
     92e:	0e 94 6d 25 	call	0x4ada	; 0x4ada <__divsf3>
     932:	dc 01       	movw	r26, r24
     934:	cb 01       	movw	r24, r22
     936:	fe 01       	movw	r30, r28
     938:	ec 58       	subi	r30, 0x8C	; 140
     93a:	fe 4f       	sbci	r31, 0xFE	; 254
     93c:	80 83       	st	Z, r24
     93e:	91 83       	std	Z+1, r25	; 0x01
     940:	a2 83       	std	Z+2, r26	; 0x02
     942:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     944:	8e 01       	movw	r16, r28
     946:	00 59       	subi	r16, 0x90	; 144
     948:	1e 4f       	sbci	r17, 0xFE	; 254
     94a:	fe 01       	movw	r30, r28
     94c:	ec 58       	subi	r30, 0x8C	; 140
     94e:	fe 4f       	sbci	r31, 0xFE	; 254
     950:	60 81       	ld	r22, Z
     952:	71 81       	ldd	r23, Z+1	; 0x01
     954:	82 81       	ldd	r24, Z+2	; 0x02
     956:	93 81       	ldd	r25, Z+3	; 0x03
     958:	20 e0       	ldi	r18, 0x00	; 0
     95a:	30 e0       	ldi	r19, 0x00	; 0
     95c:	4a e7       	ldi	r20, 0x7A	; 122
     95e:	55 e4       	ldi	r21, 0x45	; 69
     960:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
     964:	dc 01       	movw	r26, r24
     966:	cb 01       	movw	r24, r22
     968:	f8 01       	movw	r30, r16
     96a:	80 83       	st	Z, r24
     96c:	91 83       	std	Z+1, r25	; 0x01
     96e:	a2 83       	std	Z+2, r26	; 0x02
     970:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     972:	fe 01       	movw	r30, r28
     974:	e0 59       	subi	r30, 0x90	; 144
     976:	fe 4f       	sbci	r31, 0xFE	; 254
     978:	60 81       	ld	r22, Z
     97a:	71 81       	ldd	r23, Z+1	; 0x01
     97c:	82 81       	ldd	r24, Z+2	; 0x02
     97e:	93 81       	ldd	r25, Z+3	; 0x03
     980:	20 e0       	ldi	r18, 0x00	; 0
     982:	30 e0       	ldi	r19, 0x00	; 0
     984:	40 e8       	ldi	r20, 0x80	; 128
     986:	5f e3       	ldi	r21, 0x3F	; 63
     988:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__cmpsf2>
     98c:	88 23       	and	r24, r24
     98e:	44 f4       	brge	.+16     	; 0x9a0 <__stack+0x141>
		__ticks = 1;
     990:	fe 01       	movw	r30, r28
     992:	e2 59       	subi	r30, 0x92	; 146
     994:	fe 4f       	sbci	r31, 0xFE	; 254
     996:	81 e0       	ldi	r24, 0x01	; 1
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	91 83       	std	Z+1, r25	; 0x01
     99c:	80 83       	st	Z, r24
     99e:	64 c0       	rjmp	.+200    	; 0xa68 <__stack+0x209>
	else if (__tmp > 65535)
     9a0:	fe 01       	movw	r30, r28
     9a2:	e0 59       	subi	r30, 0x90	; 144
     9a4:	fe 4f       	sbci	r31, 0xFE	; 254
     9a6:	60 81       	ld	r22, Z
     9a8:	71 81       	ldd	r23, Z+1	; 0x01
     9aa:	82 81       	ldd	r24, Z+2	; 0x02
     9ac:	93 81       	ldd	r25, Z+3	; 0x03
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	3f ef       	ldi	r19, 0xFF	; 255
     9b2:	4f e7       	ldi	r20, 0x7F	; 127
     9b4:	57 e4       	ldi	r21, 0x47	; 71
     9b6:	0e 94 76 26 	call	0x4cec	; 0x4cec <__gesf2>
     9ba:	18 16       	cp	r1, r24
     9bc:	0c f0       	brlt	.+2      	; 0x9c0 <__stack+0x161>
     9be:	43 c0       	rjmp	.+134    	; 0xa46 <__stack+0x1e7>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     9c0:	fe 01       	movw	r30, r28
     9c2:	ec 58       	subi	r30, 0x8C	; 140
     9c4:	fe 4f       	sbci	r31, 0xFE	; 254
     9c6:	60 81       	ld	r22, Z
     9c8:	71 81       	ldd	r23, Z+1	; 0x01
     9ca:	82 81       	ldd	r24, Z+2	; 0x02
     9cc:	93 81       	ldd	r25, Z+3	; 0x03
     9ce:	20 e0       	ldi	r18, 0x00	; 0
     9d0:	30 e0       	ldi	r19, 0x00	; 0
     9d2:	40 e2       	ldi	r20, 0x20	; 32
     9d4:	51 e4       	ldi	r21, 0x41	; 65
     9d6:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
     9da:	dc 01       	movw	r26, r24
     9dc:	cb 01       	movw	r24, r22
     9de:	8e 01       	movw	r16, r28
     9e0:	02 59       	subi	r16, 0x92	; 146
     9e2:	1e 4f       	sbci	r17, 0xFE	; 254
     9e4:	bc 01       	movw	r22, r24
     9e6:	cd 01       	movw	r24, r26
     9e8:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
     9ec:	dc 01       	movw	r26, r24
     9ee:	cb 01       	movw	r24, r22
     9f0:	f8 01       	movw	r30, r16
     9f2:	91 83       	std	Z+1, r25	; 0x01
     9f4:	80 83       	st	Z, r24
     9f6:	1f c0       	rjmp	.+62     	; 0xa36 <__stack+0x1d7>
     9f8:	fe 01       	movw	r30, r28
     9fa:	e4 59       	subi	r30, 0x94	; 148
     9fc:	fe 4f       	sbci	r31, 0xFE	; 254
     9fe:	80 e9       	ldi	r24, 0x90	; 144
     a00:	91 e0       	ldi	r25, 0x01	; 1
     a02:	91 83       	std	Z+1, r25	; 0x01
     a04:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     a06:	fe 01       	movw	r30, r28
     a08:	e4 59       	subi	r30, 0x94	; 148
     a0a:	fe 4f       	sbci	r31, 0xFE	; 254
     a0c:	80 81       	ld	r24, Z
     a0e:	91 81       	ldd	r25, Z+1	; 0x01
     a10:	01 97       	sbiw	r24, 0x01	; 1
     a12:	f1 f7       	brne	.-4      	; 0xa10 <__stack+0x1b1>
     a14:	fe 01       	movw	r30, r28
     a16:	e4 59       	subi	r30, 0x94	; 148
     a18:	fe 4f       	sbci	r31, 0xFE	; 254
     a1a:	91 83       	std	Z+1, r25	; 0x01
     a1c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a1e:	de 01       	movw	r26, r28
     a20:	a2 59       	subi	r26, 0x92	; 146
     a22:	be 4f       	sbci	r27, 0xFE	; 254
     a24:	fe 01       	movw	r30, r28
     a26:	e2 59       	subi	r30, 0x92	; 146
     a28:	fe 4f       	sbci	r31, 0xFE	; 254
     a2a:	80 81       	ld	r24, Z
     a2c:	91 81       	ldd	r25, Z+1	; 0x01
     a2e:	01 97       	sbiw	r24, 0x01	; 1
     a30:	11 96       	adiw	r26, 0x01	; 1
     a32:	9c 93       	st	X, r25
     a34:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a36:	fe 01       	movw	r30, r28
     a38:	e2 59       	subi	r30, 0x92	; 146
     a3a:	fe 4f       	sbci	r31, 0xFE	; 254
     a3c:	80 81       	ld	r24, Z
     a3e:	91 81       	ldd	r25, Z+1	; 0x01
     a40:	00 97       	sbiw	r24, 0x00	; 0
     a42:	d1 f6       	brne	.-76     	; 0x9f8 <__stack+0x199>
     a44:	4b c0       	rjmp	.+150    	; 0xadc <__stack+0x27d>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a46:	8e 01       	movw	r16, r28
     a48:	02 59       	subi	r16, 0x92	; 146
     a4a:	1e 4f       	sbci	r17, 0xFE	; 254
     a4c:	fe 01       	movw	r30, r28
     a4e:	e0 59       	subi	r30, 0x90	; 144
     a50:	fe 4f       	sbci	r31, 0xFE	; 254
     a52:	60 81       	ld	r22, Z
     a54:	71 81       	ldd	r23, Z+1	; 0x01
     a56:	82 81       	ldd	r24, Z+2	; 0x02
     a58:	93 81       	ldd	r25, Z+3	; 0x03
     a5a:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
     a5e:	dc 01       	movw	r26, r24
     a60:	cb 01       	movw	r24, r22
     a62:	f8 01       	movw	r30, r16
     a64:	91 83       	std	Z+1, r25	; 0x01
     a66:	80 83       	st	Z, r24
     a68:	de 01       	movw	r26, r28
     a6a:	a6 59       	subi	r26, 0x96	; 150
     a6c:	be 4f       	sbci	r27, 0xFE	; 254
     a6e:	fe 01       	movw	r30, r28
     a70:	e2 59       	subi	r30, 0x92	; 146
     a72:	fe 4f       	sbci	r31, 0xFE	; 254
     a74:	80 81       	ld	r24, Z
     a76:	91 81       	ldd	r25, Z+1	; 0x01
     a78:	11 96       	adiw	r26, 0x01	; 1
     a7a:	9c 93       	st	X, r25
     a7c:	8e 93       	st	-X, r24
     a7e:	fe 01       	movw	r30, r28
     a80:	e6 59       	subi	r30, 0x96	; 150
     a82:	fe 4f       	sbci	r31, 0xFE	; 254
     a84:	80 81       	ld	r24, Z
     a86:	91 81       	ldd	r25, Z+1	; 0x01
     a88:	01 97       	sbiw	r24, 0x01	; 1
     a8a:	f1 f7       	brne	.-4      	; 0xa88 <__stack+0x229>
     a8c:	fe 01       	movw	r30, r28
     a8e:	e6 59       	subi	r30, 0x96	; 150
     a90:	fe 4f       	sbci	r31, 0xFE	; 254
     a92:	91 83       	std	Z+1, r25	; 0x01
     a94:	80 83       	st	Z, r24
     a96:	22 c0       	rjmp	.+68     	; 0xadc <__stack+0x27d>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     a98:	8e 01       	movw	r16, r28
     a9a:	08 58       	subi	r16, 0x88	; 136
     a9c:	1e 4f       	sbci	r17, 0xFE	; 254
     a9e:	fe 01       	movw	r30, r28
     aa0:	e7 58       	subi	r30, 0x87	; 135
     aa2:	fe 4f       	sbci	r31, 0xFE	; 254
     aa4:	60 81       	ld	r22, Z
     aa6:	71 81       	ldd	r23, Z+1	; 0x01
     aa8:	82 81       	ldd	r24, Z+2	; 0x02
     aaa:	93 81       	ldd	r25, Z+3	; 0x03
     aac:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
     ab0:	dc 01       	movw	r26, r24
     ab2:	cb 01       	movw	r24, r22
     ab4:	f8 01       	movw	r30, r16
     ab6:	80 83       	st	Z, r24
     ab8:	de 01       	movw	r26, r28
     aba:	a7 59       	subi	r26, 0x97	; 151
     abc:	be 4f       	sbci	r27, 0xFE	; 254
     abe:	fe 01       	movw	r30, r28
     ac0:	e8 58       	subi	r30, 0x88	; 136
     ac2:	fe 4f       	sbci	r31, 0xFE	; 254
     ac4:	80 81       	ld	r24, Z
     ac6:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     ac8:	fe 01       	movw	r30, r28
     aca:	e7 59       	subi	r30, 0x97	; 151
     acc:	fe 4f       	sbci	r31, 0xFE	; 254
     ace:	80 81       	ld	r24, Z
     ad0:	8a 95       	dec	r24
     ad2:	f1 f7       	brne	.-4      	; 0xad0 <__stack+0x271>
     ad4:	fe 01       	movw	r30, r28
     ad6:	e7 59       	subi	r30, 0x97	; 151
     ad8:	fe 4f       	sbci	r31, 0xFE	; 254
     ada:	80 83       	st	Z, r24
  _delay_us(1);
  
   PS2byte=0x01; // first command
     adc:	81 e0       	ldi	r24, 0x01	; 1
     ade:	80 93 67 00 	sts	0x0067, r24
   for(i=0;i<8;i++)
     ae2:	10 92 63 00 	sts	0x0063, r1
     ae6:	35 c0       	rjmp	.+106    	; 0xb52 <__stack+0x2f3>
   {
      if(CHK(PS2byte,i)) SET(PS2PORT,PS2cmd);
     ae8:	80 91 67 00 	lds	r24, 0x0067
     aec:	28 2f       	mov	r18, r24
     aee:	30 e0       	ldi	r19, 0x00	; 0
     af0:	80 91 63 00 	lds	r24, 0x0063
     af4:	88 2f       	mov	r24, r24
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	a9 01       	movw	r20, r18
     afa:	02 c0       	rjmp	.+4      	; 0xb00 <__stack+0x2a1>
     afc:	55 95       	asr	r21
     afe:	47 95       	ror	r20
     b00:	8a 95       	dec	r24
     b02:	e2 f7       	brpl	.-8      	; 0xafc <__stack+0x29d>
     b04:	ca 01       	movw	r24, r20
     b06:	81 70       	andi	r24, 0x01	; 1
     b08:	90 70       	andi	r25, 0x00	; 0
     b0a:	88 23       	and	r24, r24
     b0c:	41 f0       	breq	.+16     	; 0xb1e <__stack+0x2bf>
     b0e:	a5 e3       	ldi	r26, 0x35	; 53
     b10:	b0 e0       	ldi	r27, 0x00	; 0
     b12:	e5 e3       	ldi	r30, 0x35	; 53
     b14:	f0 e0       	ldi	r31, 0x00	; 0
     b16:	80 81       	ld	r24, Z
     b18:	84 60       	ori	r24, 0x04	; 4
     b1a:	8c 93       	st	X, r24
     b1c:	07 c0       	rjmp	.+14     	; 0xb2c <__stack+0x2cd>
	  else  CLR(PS2PORT,PS2cmd);
     b1e:	a5 e3       	ldi	r26, 0x35	; 53
     b20:	b0 e0       	ldi	r27, 0x00	; 0
     b22:	e5 e3       	ldi	r30, 0x35	; 53
     b24:	f0 e0       	ldi	r31, 0x00	; 0
     b26:	80 81       	ld	r24, Z
     b28:	8b 7f       	andi	r24, 0xFB	; 251
     b2a:	8c 93       	st	X, r24
      CLR(PS2PORT,PS2clk); 
     b2c:	a5 e3       	ldi	r26, 0x35	; 53
     b2e:	b0 e0       	ldi	r27, 0x00	; 0
     b30:	e5 e3       	ldi	r30, 0x35	; 53
     b32:	f0 e0       	ldi	r31, 0x00	; 0
     b34:	80 81       	ld	r24, Z
     b36:	8e 7f       	andi	r24, 0xFE	; 254
     b38:	8c 93       	st	X, r24
      SET(PS2PORT,PS2clk); 
     b3a:	a5 e3       	ldi	r26, 0x35	; 53
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	e5 e3       	ldi	r30, 0x35	; 53
     b40:	f0 e0       	ldi	r31, 0x00	; 0
     b42:	80 81       	ld	r24, Z
     b44:	81 60       	ori	r24, 0x01	; 1
     b46:	8c 93       	st	X, r24
   SET(PS2PORT,PS2clk); 
   CLR(PS2PORT,PS2att); // low enable joystick
  _delay_us(1);
  
   PS2byte=0x01; // first command
   for(i=0;i<8;i++)
     b48:	80 91 63 00 	lds	r24, 0x0063
     b4c:	8f 5f       	subi	r24, 0xFF	; 255
     b4e:	80 93 63 00 	sts	0x0063, r24
     b52:	80 91 63 00 	lds	r24, 0x0063
     b56:	88 30       	cpi	r24, 0x08	; 8
     b58:	38 f2       	brcs	.-114    	; 0xae8 <__stack+0x289>
      if(CHK(PS2byte,i)) SET(PS2PORT,PS2cmd);
	  else  CLR(PS2PORT,PS2cmd);
      CLR(PS2PORT,PS2clk); 
      SET(PS2PORT,PS2clk); 
   }
   SET(PS2PORT,PS2cmd); 
     b5a:	a5 e3       	ldi	r26, 0x35	; 53
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	e5 e3       	ldi	r30, 0x35	; 53
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	80 81       	ld	r24, Z
     b64:	84 60       	ori	r24, 0x04	; 4
     b66:	8c 93       	st	X, r24
     b68:	fe 01       	movw	r30, r28
     b6a:	eb 59       	subi	r30, 0x9B	; 155
     b6c:	fe 4f       	sbci	r31, 0xFE	; 254
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	a0 e8       	ldi	r26, 0x80	; 128
     b74:	bf e3       	ldi	r27, 0x3F	; 63
     b76:	80 83       	st	Z, r24
     b78:	91 83       	std	Z+1, r25	; 0x01
     b7a:	a2 83       	std	Z+2, r26	; 0x02
     b7c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     b7e:	8e 01       	movw	r16, r28
     b80:	0f 59       	subi	r16, 0x9F	; 159
     b82:	1e 4f       	sbci	r17, 0xFE	; 254
     b84:	fe 01       	movw	r30, r28
     b86:	eb 59       	subi	r30, 0x9B	; 155
     b88:	fe 4f       	sbci	r31, 0xFE	; 254
     b8a:	60 81       	ld	r22, Z
     b8c:	71 81       	ldd	r23, Z+1	; 0x01
     b8e:	82 81       	ldd	r24, Z+2	; 0x02
     b90:	93 81       	ldd	r25, Z+3	; 0x03
     b92:	2b ea       	ldi	r18, 0xAB	; 171
     b94:	3a ea       	ldi	r19, 0xAA	; 170
     b96:	4a ea       	ldi	r20, 0xAA	; 170
     b98:	50 e4       	ldi	r21, 0x40	; 64
     b9a:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
     b9e:	dc 01       	movw	r26, r24
     ba0:	cb 01       	movw	r24, r22
     ba2:	f8 01       	movw	r30, r16
     ba4:	80 83       	st	Z, r24
     ba6:	91 83       	std	Z+1, r25	; 0x01
     ba8:	a2 83       	std	Z+2, r26	; 0x02
     baa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     bac:	fe 01       	movw	r30, r28
     bae:	ef 59       	subi	r30, 0x9F	; 159
     bb0:	fe 4f       	sbci	r31, 0xFE	; 254
     bb2:	60 81       	ld	r22, Z
     bb4:	71 81       	ldd	r23, Z+1	; 0x01
     bb6:	82 81       	ldd	r24, Z+2	; 0x02
     bb8:	93 81       	ldd	r25, Z+3	; 0x03
     bba:	20 e0       	ldi	r18, 0x00	; 0
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	40 e8       	ldi	r20, 0x80	; 128
     bc0:	5f e3       	ldi	r21, 0x3F	; 63
     bc2:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__cmpsf2>
     bc6:	88 23       	and	r24, r24
     bc8:	34 f4       	brge	.+12     	; 0xbd6 <__stack+0x377>
		__ticks = 1;
     bca:	fe 01       	movw	r30, r28
     bcc:	e0 5a       	subi	r30, 0xA0	; 160
     bce:	fe 4f       	sbci	r31, 0xFE	; 254
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	80 83       	st	Z, r24
     bd4:	e0 c0       	rjmp	.+448    	; 0xd96 <__stack+0x537>
	else if (__tmp > 255)
     bd6:	fe 01       	movw	r30, r28
     bd8:	ef 59       	subi	r30, 0x9F	; 159
     bda:	fe 4f       	sbci	r31, 0xFE	; 254
     bdc:	60 81       	ld	r22, Z
     bde:	71 81       	ldd	r23, Z+1	; 0x01
     be0:	82 81       	ldd	r24, Z+2	; 0x02
     be2:	93 81       	ldd	r25, Z+3	; 0x03
     be4:	20 e0       	ldi	r18, 0x00	; 0
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	4f e7       	ldi	r20, 0x7F	; 127
     bea:	53 e4       	ldi	r21, 0x43	; 67
     bec:	0e 94 76 26 	call	0x4cec	; 0x4cec <__gesf2>
     bf0:	18 16       	cp	r1, r24
     bf2:	0c f0       	brlt	.+2      	; 0xbf6 <__stack+0x397>
     bf4:	c0 c0       	rjmp	.+384    	; 0xd76 <__stack+0x517>
	{
		_delay_ms(__us / 1000.0);
     bf6:	fe 01       	movw	r30, r28
     bf8:	eb 59       	subi	r30, 0x9B	; 155
     bfa:	fe 4f       	sbci	r31, 0xFE	; 254
     bfc:	60 81       	ld	r22, Z
     bfe:	71 81       	ldd	r23, Z+1	; 0x01
     c00:	82 81       	ldd	r24, Z+2	; 0x02
     c02:	93 81       	ldd	r25, Z+3	; 0x03
     c04:	20 e0       	ldi	r18, 0x00	; 0
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	4a e7       	ldi	r20, 0x7A	; 122
     c0a:	54 e4       	ldi	r21, 0x44	; 68
     c0c:	0e 94 6d 25 	call	0x4ada	; 0x4ada <__divsf3>
     c10:	dc 01       	movw	r26, r24
     c12:	cb 01       	movw	r24, r22
     c14:	fe 01       	movw	r30, r28
     c16:	e4 5a       	subi	r30, 0xA4	; 164
     c18:	fe 4f       	sbci	r31, 0xFE	; 254
     c1a:	80 83       	st	Z, r24
     c1c:	91 83       	std	Z+1, r25	; 0x01
     c1e:	a2 83       	std	Z+2, r26	; 0x02
     c20:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c22:	8e 01       	movw	r16, r28
     c24:	08 5a       	subi	r16, 0xA8	; 168
     c26:	1e 4f       	sbci	r17, 0xFE	; 254
     c28:	fe 01       	movw	r30, r28
     c2a:	e4 5a       	subi	r30, 0xA4	; 164
     c2c:	fe 4f       	sbci	r31, 0xFE	; 254
     c2e:	60 81       	ld	r22, Z
     c30:	71 81       	ldd	r23, Z+1	; 0x01
     c32:	82 81       	ldd	r24, Z+2	; 0x02
     c34:	93 81       	ldd	r25, Z+3	; 0x03
     c36:	20 e0       	ldi	r18, 0x00	; 0
     c38:	30 e0       	ldi	r19, 0x00	; 0
     c3a:	4a e7       	ldi	r20, 0x7A	; 122
     c3c:	55 e4       	ldi	r21, 0x45	; 69
     c3e:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
     c42:	dc 01       	movw	r26, r24
     c44:	cb 01       	movw	r24, r22
     c46:	f8 01       	movw	r30, r16
     c48:	80 83       	st	Z, r24
     c4a:	91 83       	std	Z+1, r25	; 0x01
     c4c:	a2 83       	std	Z+2, r26	; 0x02
     c4e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     c50:	fe 01       	movw	r30, r28
     c52:	e8 5a       	subi	r30, 0xA8	; 168
     c54:	fe 4f       	sbci	r31, 0xFE	; 254
     c56:	60 81       	ld	r22, Z
     c58:	71 81       	ldd	r23, Z+1	; 0x01
     c5a:	82 81       	ldd	r24, Z+2	; 0x02
     c5c:	93 81       	ldd	r25, Z+3	; 0x03
     c5e:	20 e0       	ldi	r18, 0x00	; 0
     c60:	30 e0       	ldi	r19, 0x00	; 0
     c62:	40 e8       	ldi	r20, 0x80	; 128
     c64:	5f e3       	ldi	r21, 0x3F	; 63
     c66:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__cmpsf2>
     c6a:	88 23       	and	r24, r24
     c6c:	44 f4       	brge	.+16     	; 0xc7e <__stack+0x41f>
		__ticks = 1;
     c6e:	fe 01       	movw	r30, r28
     c70:	ea 5a       	subi	r30, 0xAA	; 170
     c72:	fe 4f       	sbci	r31, 0xFE	; 254
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	91 83       	std	Z+1, r25	; 0x01
     c7a:	80 83       	st	Z, r24
     c7c:	64 c0       	rjmp	.+200    	; 0xd46 <__stack+0x4e7>
	else if (__tmp > 65535)
     c7e:	fe 01       	movw	r30, r28
     c80:	e8 5a       	subi	r30, 0xA8	; 168
     c82:	fe 4f       	sbci	r31, 0xFE	; 254
     c84:	60 81       	ld	r22, Z
     c86:	71 81       	ldd	r23, Z+1	; 0x01
     c88:	82 81       	ldd	r24, Z+2	; 0x02
     c8a:	93 81       	ldd	r25, Z+3	; 0x03
     c8c:	20 e0       	ldi	r18, 0x00	; 0
     c8e:	3f ef       	ldi	r19, 0xFF	; 255
     c90:	4f e7       	ldi	r20, 0x7F	; 127
     c92:	57 e4       	ldi	r21, 0x47	; 71
     c94:	0e 94 76 26 	call	0x4cec	; 0x4cec <__gesf2>
     c98:	18 16       	cp	r1, r24
     c9a:	0c f0       	brlt	.+2      	; 0xc9e <__stack+0x43f>
     c9c:	43 c0       	rjmp	.+134    	; 0xd24 <__stack+0x4c5>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c9e:	fe 01       	movw	r30, r28
     ca0:	e4 5a       	subi	r30, 0xA4	; 164
     ca2:	fe 4f       	sbci	r31, 0xFE	; 254
     ca4:	60 81       	ld	r22, Z
     ca6:	71 81       	ldd	r23, Z+1	; 0x01
     ca8:	82 81       	ldd	r24, Z+2	; 0x02
     caa:	93 81       	ldd	r25, Z+3	; 0x03
     cac:	20 e0       	ldi	r18, 0x00	; 0
     cae:	30 e0       	ldi	r19, 0x00	; 0
     cb0:	40 e2       	ldi	r20, 0x20	; 32
     cb2:	51 e4       	ldi	r21, 0x41	; 65
     cb4:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
     cb8:	dc 01       	movw	r26, r24
     cba:	cb 01       	movw	r24, r22
     cbc:	8e 01       	movw	r16, r28
     cbe:	0a 5a       	subi	r16, 0xAA	; 170
     cc0:	1e 4f       	sbci	r17, 0xFE	; 254
     cc2:	bc 01       	movw	r22, r24
     cc4:	cd 01       	movw	r24, r26
     cc6:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
     cca:	dc 01       	movw	r26, r24
     ccc:	cb 01       	movw	r24, r22
     cce:	f8 01       	movw	r30, r16
     cd0:	91 83       	std	Z+1, r25	; 0x01
     cd2:	80 83       	st	Z, r24
     cd4:	1f c0       	rjmp	.+62     	; 0xd14 <__stack+0x4b5>
     cd6:	fe 01       	movw	r30, r28
     cd8:	ec 5a       	subi	r30, 0xAC	; 172
     cda:	fe 4f       	sbci	r31, 0xFE	; 254
     cdc:	80 e9       	ldi	r24, 0x90	; 144
     cde:	91 e0       	ldi	r25, 0x01	; 1
     ce0:	91 83       	std	Z+1, r25	; 0x01
     ce2:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ce4:	fe 01       	movw	r30, r28
     ce6:	ec 5a       	subi	r30, 0xAC	; 172
     ce8:	fe 4f       	sbci	r31, 0xFE	; 254
     cea:	80 81       	ld	r24, Z
     cec:	91 81       	ldd	r25, Z+1	; 0x01
     cee:	01 97       	sbiw	r24, 0x01	; 1
     cf0:	f1 f7       	brne	.-4      	; 0xcee <__stack+0x48f>
     cf2:	fe 01       	movw	r30, r28
     cf4:	ec 5a       	subi	r30, 0xAC	; 172
     cf6:	fe 4f       	sbci	r31, 0xFE	; 254
     cf8:	91 83       	std	Z+1, r25	; 0x01
     cfa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cfc:	de 01       	movw	r26, r28
     cfe:	aa 5a       	subi	r26, 0xAA	; 170
     d00:	be 4f       	sbci	r27, 0xFE	; 254
     d02:	fe 01       	movw	r30, r28
     d04:	ea 5a       	subi	r30, 0xAA	; 170
     d06:	fe 4f       	sbci	r31, 0xFE	; 254
     d08:	80 81       	ld	r24, Z
     d0a:	91 81       	ldd	r25, Z+1	; 0x01
     d0c:	01 97       	sbiw	r24, 0x01	; 1
     d0e:	11 96       	adiw	r26, 0x01	; 1
     d10:	9c 93       	st	X, r25
     d12:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d14:	fe 01       	movw	r30, r28
     d16:	ea 5a       	subi	r30, 0xAA	; 170
     d18:	fe 4f       	sbci	r31, 0xFE	; 254
     d1a:	80 81       	ld	r24, Z
     d1c:	91 81       	ldd	r25, Z+1	; 0x01
     d1e:	00 97       	sbiw	r24, 0x00	; 0
     d20:	d1 f6       	brne	.-76     	; 0xcd6 <__stack+0x477>
     d22:	4b c0       	rjmp	.+150    	; 0xdba <__stack+0x55b>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d24:	8e 01       	movw	r16, r28
     d26:	0a 5a       	subi	r16, 0xAA	; 170
     d28:	1e 4f       	sbci	r17, 0xFE	; 254
     d2a:	fe 01       	movw	r30, r28
     d2c:	e8 5a       	subi	r30, 0xA8	; 168
     d2e:	fe 4f       	sbci	r31, 0xFE	; 254
     d30:	60 81       	ld	r22, Z
     d32:	71 81       	ldd	r23, Z+1	; 0x01
     d34:	82 81       	ldd	r24, Z+2	; 0x02
     d36:	93 81       	ldd	r25, Z+3	; 0x03
     d38:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
     d3c:	dc 01       	movw	r26, r24
     d3e:	cb 01       	movw	r24, r22
     d40:	f8 01       	movw	r30, r16
     d42:	91 83       	std	Z+1, r25	; 0x01
     d44:	80 83       	st	Z, r24
     d46:	de 01       	movw	r26, r28
     d48:	ae 5a       	subi	r26, 0xAE	; 174
     d4a:	be 4f       	sbci	r27, 0xFE	; 254
     d4c:	fe 01       	movw	r30, r28
     d4e:	ea 5a       	subi	r30, 0xAA	; 170
     d50:	fe 4f       	sbci	r31, 0xFE	; 254
     d52:	80 81       	ld	r24, Z
     d54:	91 81       	ldd	r25, Z+1	; 0x01
     d56:	11 96       	adiw	r26, 0x01	; 1
     d58:	9c 93       	st	X, r25
     d5a:	8e 93       	st	-X, r24
     d5c:	fe 01       	movw	r30, r28
     d5e:	ee 5a       	subi	r30, 0xAE	; 174
     d60:	fe 4f       	sbci	r31, 0xFE	; 254
     d62:	80 81       	ld	r24, Z
     d64:	91 81       	ldd	r25, Z+1	; 0x01
     d66:	01 97       	sbiw	r24, 0x01	; 1
     d68:	f1 f7       	brne	.-4      	; 0xd66 <__stack+0x507>
     d6a:	fe 01       	movw	r30, r28
     d6c:	ee 5a       	subi	r30, 0xAE	; 174
     d6e:	fe 4f       	sbci	r31, 0xFE	; 254
     d70:	91 83       	std	Z+1, r25	; 0x01
     d72:	80 83       	st	Z, r24
     d74:	22 c0       	rjmp	.+68     	; 0xdba <__stack+0x55b>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     d76:	8e 01       	movw	r16, r28
     d78:	00 5a       	subi	r16, 0xA0	; 160
     d7a:	1e 4f       	sbci	r17, 0xFE	; 254
     d7c:	fe 01       	movw	r30, r28
     d7e:	ef 59       	subi	r30, 0x9F	; 159
     d80:	fe 4f       	sbci	r31, 0xFE	; 254
     d82:	60 81       	ld	r22, Z
     d84:	71 81       	ldd	r23, Z+1	; 0x01
     d86:	82 81       	ldd	r24, Z+2	; 0x02
     d88:	93 81       	ldd	r25, Z+3	; 0x03
     d8a:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
     d8e:	dc 01       	movw	r26, r24
     d90:	cb 01       	movw	r24, r22
     d92:	f8 01       	movw	r30, r16
     d94:	80 83       	st	Z, r24
     d96:	de 01       	movw	r26, r28
     d98:	af 5a       	subi	r26, 0xAF	; 175
     d9a:	be 4f       	sbci	r27, 0xFE	; 254
     d9c:	fe 01       	movw	r30, r28
     d9e:	e0 5a       	subi	r30, 0xA0	; 160
     da0:	fe 4f       	sbci	r31, 0xFE	; 254
     da2:	80 81       	ld	r24, Z
     da4:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     da6:	fe 01       	movw	r30, r28
     da8:	ef 5a       	subi	r30, 0xAF	; 175
     daa:	fe 4f       	sbci	r31, 0xFE	; 254
     dac:	80 81       	ld	r24, Z
     dae:	8a 95       	dec	r24
     db0:	f1 f7       	brne	.-4      	; 0xdae <__stack+0x54f>
     db2:	fe 01       	movw	r30, r28
     db4:	ef 5a       	subi	r30, 0xAF	; 175
     db6:	fe 4f       	sbci	r31, 0xFE	; 254
     db8:	80 83       	st	Z, r24
   _delay_us(1);
   
   PS2byte=0x42; // sec command
     dba:	82 e4       	ldi	r24, 0x42	; 66
     dbc:	80 93 67 00 	sts	0x0067, r24
   for(i=0;i<8;i++)
     dc0:	10 92 63 00 	sts	0x0063, r1
     dc4:	35 c0       	rjmp	.+106    	; 0xe30 <__stack+0x5d1>
   {
      if(CHK(PS2byte,i)) SET(PS2PORT,PS2cmd);
     dc6:	80 91 67 00 	lds	r24, 0x0067
     dca:	28 2f       	mov	r18, r24
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	80 91 63 00 	lds	r24, 0x0063
     dd2:	88 2f       	mov	r24, r24
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	a9 01       	movw	r20, r18
     dd8:	02 c0       	rjmp	.+4      	; 0xdde <__stack+0x57f>
     dda:	55 95       	asr	r21
     ddc:	47 95       	ror	r20
     dde:	8a 95       	dec	r24
     de0:	e2 f7       	brpl	.-8      	; 0xdda <__stack+0x57b>
     de2:	ca 01       	movw	r24, r20
     de4:	81 70       	andi	r24, 0x01	; 1
     de6:	90 70       	andi	r25, 0x00	; 0
     de8:	88 23       	and	r24, r24
     dea:	41 f0       	breq	.+16     	; 0xdfc <__stack+0x59d>
     dec:	a5 e3       	ldi	r26, 0x35	; 53
     dee:	b0 e0       	ldi	r27, 0x00	; 0
     df0:	e5 e3       	ldi	r30, 0x35	; 53
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	80 81       	ld	r24, Z
     df6:	84 60       	ori	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	07 c0       	rjmp	.+14     	; 0xe0a <__stack+0x5ab>
	  else  CLR(PS2PORT,PS2cmd);
     dfc:	a5 e3       	ldi	r26, 0x35	; 53
     dfe:	b0 e0       	ldi	r27, 0x00	; 0
     e00:	e5 e3       	ldi	r30, 0x35	; 53
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
     e06:	8b 7f       	andi	r24, 0xFB	; 251
     e08:	8c 93       	st	X, r24
      CLR(PS2PORT,PS2clk); 
     e0a:	a5 e3       	ldi	r26, 0x35	; 53
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e5 e3       	ldi	r30, 0x35	; 53
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	8e 7f       	andi	r24, 0xFE	; 254
     e16:	8c 93       	st	X, r24
      SET(PS2PORT,PS2clk); 
     e18:	a5 e3       	ldi	r26, 0x35	; 53
     e1a:	b0 e0       	ldi	r27, 0x00	; 0
     e1c:	e5 e3       	ldi	r30, 0x35	; 53
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	80 81       	ld	r24, Z
     e22:	81 60       	ori	r24, 0x01	; 1
     e24:	8c 93       	st	X, r24
   }
   SET(PS2PORT,PS2cmd); 
   _delay_us(1);
   
   PS2byte=0x42; // sec command
   for(i=0;i<8;i++)
     e26:	80 91 63 00 	lds	r24, 0x0063
     e2a:	8f 5f       	subi	r24, 0xFF	; 255
     e2c:	80 93 63 00 	sts	0x0063, r24
     e30:	80 91 63 00 	lds	r24, 0x0063
     e34:	88 30       	cpi	r24, 0x08	; 8
     e36:	38 f2       	brcs	.-114    	; 0xdc6 <__stack+0x567>
      if(CHK(PS2byte,i)) SET(PS2PORT,PS2cmd);
	  else  CLR(PS2PORT,PS2cmd);
      CLR(PS2PORT,PS2clk); 
      SET(PS2PORT,PS2clk); 
   }
   SET(PS2PORT,PS2cmd); 
     e38:	a5 e3       	ldi	r26, 0x35	; 53
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	e5 e3       	ldi	r30, 0x35	; 53
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	84 60       	ori	r24, 0x04	; 4
     e44:	8c 93       	st	X, r24
     e46:	fe 01       	movw	r30, r28
     e48:	e3 5b       	subi	r30, 0xB3	; 179
     e4a:	fe 4f       	sbci	r31, 0xFE	; 254
     e4c:	80 e0       	ldi	r24, 0x00	; 0
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	a0 e8       	ldi	r26, 0x80	; 128
     e52:	bf e3       	ldi	r27, 0x3F	; 63
     e54:	80 83       	st	Z, r24
     e56:	91 83       	std	Z+1, r25	; 0x01
     e58:	a2 83       	std	Z+2, r26	; 0x02
     e5a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     e5c:	8e 01       	movw	r16, r28
     e5e:	07 5b       	subi	r16, 0xB7	; 183
     e60:	1e 4f       	sbci	r17, 0xFE	; 254
     e62:	fe 01       	movw	r30, r28
     e64:	e3 5b       	subi	r30, 0xB3	; 179
     e66:	fe 4f       	sbci	r31, 0xFE	; 254
     e68:	60 81       	ld	r22, Z
     e6a:	71 81       	ldd	r23, Z+1	; 0x01
     e6c:	82 81       	ldd	r24, Z+2	; 0x02
     e6e:	93 81       	ldd	r25, Z+3	; 0x03
     e70:	2b ea       	ldi	r18, 0xAB	; 171
     e72:	3a ea       	ldi	r19, 0xAA	; 170
     e74:	4a ea       	ldi	r20, 0xAA	; 170
     e76:	50 e4       	ldi	r21, 0x40	; 64
     e78:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
     e7c:	dc 01       	movw	r26, r24
     e7e:	cb 01       	movw	r24, r22
     e80:	f8 01       	movw	r30, r16
     e82:	80 83       	st	Z, r24
     e84:	91 83       	std	Z+1, r25	; 0x01
     e86:	a2 83       	std	Z+2, r26	; 0x02
     e88:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e8a:	fe 01       	movw	r30, r28
     e8c:	e7 5b       	subi	r30, 0xB7	; 183
     e8e:	fe 4f       	sbci	r31, 0xFE	; 254
     e90:	60 81       	ld	r22, Z
     e92:	71 81       	ldd	r23, Z+1	; 0x01
     e94:	82 81       	ldd	r24, Z+2	; 0x02
     e96:	93 81       	ldd	r25, Z+3	; 0x03
     e98:	20 e0       	ldi	r18, 0x00	; 0
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	40 e8       	ldi	r20, 0x80	; 128
     e9e:	5f e3       	ldi	r21, 0x3F	; 63
     ea0:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__cmpsf2>
     ea4:	88 23       	and	r24, r24
     ea6:	34 f4       	brge	.+12     	; 0xeb4 <__stack+0x655>
		__ticks = 1;
     ea8:	fe 01       	movw	r30, r28
     eaa:	e8 5b       	subi	r30, 0xB8	; 184
     eac:	fe 4f       	sbci	r31, 0xFE	; 254
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	80 83       	st	Z, r24
     eb2:	e0 c0       	rjmp	.+448    	; 0x1074 <__stack+0x815>
	else if (__tmp > 255)
     eb4:	fe 01       	movw	r30, r28
     eb6:	e7 5b       	subi	r30, 0xB7	; 183
     eb8:	fe 4f       	sbci	r31, 0xFE	; 254
     eba:	60 81       	ld	r22, Z
     ebc:	71 81       	ldd	r23, Z+1	; 0x01
     ebe:	82 81       	ldd	r24, Z+2	; 0x02
     ec0:	93 81       	ldd	r25, Z+3	; 0x03
     ec2:	20 e0       	ldi	r18, 0x00	; 0
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	4f e7       	ldi	r20, 0x7F	; 127
     ec8:	53 e4       	ldi	r21, 0x43	; 67
     eca:	0e 94 76 26 	call	0x4cec	; 0x4cec <__gesf2>
     ece:	18 16       	cp	r1, r24
     ed0:	0c f0       	brlt	.+2      	; 0xed4 <__stack+0x675>
     ed2:	c0 c0       	rjmp	.+384    	; 0x1054 <__stack+0x7f5>
	{
		_delay_ms(__us / 1000.0);
     ed4:	fe 01       	movw	r30, r28
     ed6:	e3 5b       	subi	r30, 0xB3	; 179
     ed8:	fe 4f       	sbci	r31, 0xFE	; 254
     eda:	60 81       	ld	r22, Z
     edc:	71 81       	ldd	r23, Z+1	; 0x01
     ede:	82 81       	ldd	r24, Z+2	; 0x02
     ee0:	93 81       	ldd	r25, Z+3	; 0x03
     ee2:	20 e0       	ldi	r18, 0x00	; 0
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	4a e7       	ldi	r20, 0x7A	; 122
     ee8:	54 e4       	ldi	r21, 0x44	; 68
     eea:	0e 94 6d 25 	call	0x4ada	; 0x4ada <__divsf3>
     eee:	dc 01       	movw	r26, r24
     ef0:	cb 01       	movw	r24, r22
     ef2:	fe 01       	movw	r30, r28
     ef4:	ec 5b       	subi	r30, 0xBC	; 188
     ef6:	fe 4f       	sbci	r31, 0xFE	; 254
     ef8:	80 83       	st	Z, r24
     efa:	91 83       	std	Z+1, r25	; 0x01
     efc:	a2 83       	std	Z+2, r26	; 0x02
     efe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f00:	8e 01       	movw	r16, r28
     f02:	00 5c       	subi	r16, 0xC0	; 192
     f04:	1e 4f       	sbci	r17, 0xFE	; 254
     f06:	fe 01       	movw	r30, r28
     f08:	ec 5b       	subi	r30, 0xBC	; 188
     f0a:	fe 4f       	sbci	r31, 0xFE	; 254
     f0c:	60 81       	ld	r22, Z
     f0e:	71 81       	ldd	r23, Z+1	; 0x01
     f10:	82 81       	ldd	r24, Z+2	; 0x02
     f12:	93 81       	ldd	r25, Z+3	; 0x03
     f14:	20 e0       	ldi	r18, 0x00	; 0
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	4a e7       	ldi	r20, 0x7A	; 122
     f1a:	55 e4       	ldi	r21, 0x45	; 69
     f1c:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
     f20:	dc 01       	movw	r26, r24
     f22:	cb 01       	movw	r24, r22
     f24:	f8 01       	movw	r30, r16
     f26:	80 83       	st	Z, r24
     f28:	91 83       	std	Z+1, r25	; 0x01
     f2a:	a2 83       	std	Z+2, r26	; 0x02
     f2c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f2e:	fe 01       	movw	r30, r28
     f30:	e0 5c       	subi	r30, 0xC0	; 192
     f32:	fe 4f       	sbci	r31, 0xFE	; 254
     f34:	60 81       	ld	r22, Z
     f36:	71 81       	ldd	r23, Z+1	; 0x01
     f38:	82 81       	ldd	r24, Z+2	; 0x02
     f3a:	93 81       	ldd	r25, Z+3	; 0x03
     f3c:	20 e0       	ldi	r18, 0x00	; 0
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	40 e8       	ldi	r20, 0x80	; 128
     f42:	5f e3       	ldi	r21, 0x3F	; 63
     f44:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__cmpsf2>
     f48:	88 23       	and	r24, r24
     f4a:	44 f4       	brge	.+16     	; 0xf5c <__stack+0x6fd>
		__ticks = 1;
     f4c:	fe 01       	movw	r30, r28
     f4e:	e2 5c       	subi	r30, 0xC2	; 194
     f50:	fe 4f       	sbci	r31, 0xFE	; 254
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	91 83       	std	Z+1, r25	; 0x01
     f58:	80 83       	st	Z, r24
     f5a:	64 c0       	rjmp	.+200    	; 0x1024 <__stack+0x7c5>
	else if (__tmp > 65535)
     f5c:	fe 01       	movw	r30, r28
     f5e:	e0 5c       	subi	r30, 0xC0	; 192
     f60:	fe 4f       	sbci	r31, 0xFE	; 254
     f62:	60 81       	ld	r22, Z
     f64:	71 81       	ldd	r23, Z+1	; 0x01
     f66:	82 81       	ldd	r24, Z+2	; 0x02
     f68:	93 81       	ldd	r25, Z+3	; 0x03
     f6a:	20 e0       	ldi	r18, 0x00	; 0
     f6c:	3f ef       	ldi	r19, 0xFF	; 255
     f6e:	4f e7       	ldi	r20, 0x7F	; 127
     f70:	57 e4       	ldi	r21, 0x47	; 71
     f72:	0e 94 76 26 	call	0x4cec	; 0x4cec <__gesf2>
     f76:	18 16       	cp	r1, r24
     f78:	0c f0       	brlt	.+2      	; 0xf7c <__stack+0x71d>
     f7a:	43 c0       	rjmp	.+134    	; 0x1002 <__stack+0x7a3>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f7c:	fe 01       	movw	r30, r28
     f7e:	ec 5b       	subi	r30, 0xBC	; 188
     f80:	fe 4f       	sbci	r31, 0xFE	; 254
     f82:	60 81       	ld	r22, Z
     f84:	71 81       	ldd	r23, Z+1	; 0x01
     f86:	82 81       	ldd	r24, Z+2	; 0x02
     f88:	93 81       	ldd	r25, Z+3	; 0x03
     f8a:	20 e0       	ldi	r18, 0x00	; 0
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	40 e2       	ldi	r20, 0x20	; 32
     f90:	51 e4       	ldi	r21, 0x41	; 65
     f92:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
     f96:	dc 01       	movw	r26, r24
     f98:	cb 01       	movw	r24, r22
     f9a:	8e 01       	movw	r16, r28
     f9c:	02 5c       	subi	r16, 0xC2	; 194
     f9e:	1e 4f       	sbci	r17, 0xFE	; 254
     fa0:	bc 01       	movw	r22, r24
     fa2:	cd 01       	movw	r24, r26
     fa4:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
     fa8:	dc 01       	movw	r26, r24
     faa:	cb 01       	movw	r24, r22
     fac:	f8 01       	movw	r30, r16
     fae:	91 83       	std	Z+1, r25	; 0x01
     fb0:	80 83       	st	Z, r24
     fb2:	1f c0       	rjmp	.+62     	; 0xff2 <__stack+0x793>
     fb4:	fe 01       	movw	r30, r28
     fb6:	e4 5c       	subi	r30, 0xC4	; 196
     fb8:	fe 4f       	sbci	r31, 0xFE	; 254
     fba:	80 e9       	ldi	r24, 0x90	; 144
     fbc:	91 e0       	ldi	r25, 0x01	; 1
     fbe:	91 83       	std	Z+1, r25	; 0x01
     fc0:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     fc2:	fe 01       	movw	r30, r28
     fc4:	e4 5c       	subi	r30, 0xC4	; 196
     fc6:	fe 4f       	sbci	r31, 0xFE	; 254
     fc8:	80 81       	ld	r24, Z
     fca:	91 81       	ldd	r25, Z+1	; 0x01
     fcc:	01 97       	sbiw	r24, 0x01	; 1
     fce:	f1 f7       	brne	.-4      	; 0xfcc <__stack+0x76d>
     fd0:	fe 01       	movw	r30, r28
     fd2:	e4 5c       	subi	r30, 0xC4	; 196
     fd4:	fe 4f       	sbci	r31, 0xFE	; 254
     fd6:	91 83       	std	Z+1, r25	; 0x01
     fd8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fda:	de 01       	movw	r26, r28
     fdc:	a2 5c       	subi	r26, 0xC2	; 194
     fde:	be 4f       	sbci	r27, 0xFE	; 254
     fe0:	fe 01       	movw	r30, r28
     fe2:	e2 5c       	subi	r30, 0xC2	; 194
     fe4:	fe 4f       	sbci	r31, 0xFE	; 254
     fe6:	80 81       	ld	r24, Z
     fe8:	91 81       	ldd	r25, Z+1	; 0x01
     fea:	01 97       	sbiw	r24, 0x01	; 1
     fec:	11 96       	adiw	r26, 0x01	; 1
     fee:	9c 93       	st	X, r25
     ff0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ff2:	fe 01       	movw	r30, r28
     ff4:	e2 5c       	subi	r30, 0xC2	; 194
     ff6:	fe 4f       	sbci	r31, 0xFE	; 254
     ff8:	80 81       	ld	r24, Z
     ffa:	91 81       	ldd	r25, Z+1	; 0x01
     ffc:	00 97       	sbiw	r24, 0x00	; 0
     ffe:	d1 f6       	brne	.-76     	; 0xfb4 <__stack+0x755>
    1000:	4b c0       	rjmp	.+150    	; 0x1098 <__stack+0x839>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1002:	8e 01       	movw	r16, r28
    1004:	02 5c       	subi	r16, 0xC2	; 194
    1006:	1e 4f       	sbci	r17, 0xFE	; 254
    1008:	fe 01       	movw	r30, r28
    100a:	e0 5c       	subi	r30, 0xC0	; 192
    100c:	fe 4f       	sbci	r31, 0xFE	; 254
    100e:	60 81       	ld	r22, Z
    1010:	71 81       	ldd	r23, Z+1	; 0x01
    1012:	82 81       	ldd	r24, Z+2	; 0x02
    1014:	93 81       	ldd	r25, Z+3	; 0x03
    1016:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
    101a:	dc 01       	movw	r26, r24
    101c:	cb 01       	movw	r24, r22
    101e:	f8 01       	movw	r30, r16
    1020:	91 83       	std	Z+1, r25	; 0x01
    1022:	80 83       	st	Z, r24
    1024:	de 01       	movw	r26, r28
    1026:	a6 5c       	subi	r26, 0xC6	; 198
    1028:	be 4f       	sbci	r27, 0xFE	; 254
    102a:	fe 01       	movw	r30, r28
    102c:	e2 5c       	subi	r30, 0xC2	; 194
    102e:	fe 4f       	sbci	r31, 0xFE	; 254
    1030:	80 81       	ld	r24, Z
    1032:	91 81       	ldd	r25, Z+1	; 0x01
    1034:	11 96       	adiw	r26, 0x01	; 1
    1036:	9c 93       	st	X, r25
    1038:	8e 93       	st	-X, r24
    103a:	fe 01       	movw	r30, r28
    103c:	e6 5c       	subi	r30, 0xC6	; 198
    103e:	fe 4f       	sbci	r31, 0xFE	; 254
    1040:	80 81       	ld	r24, Z
    1042:	91 81       	ldd	r25, Z+1	; 0x01
    1044:	01 97       	sbiw	r24, 0x01	; 1
    1046:	f1 f7       	brne	.-4      	; 0x1044 <__stack+0x7e5>
    1048:	fe 01       	movw	r30, r28
    104a:	e6 5c       	subi	r30, 0xC6	; 198
    104c:	fe 4f       	sbci	r31, 0xFE	; 254
    104e:	91 83       	std	Z+1, r25	; 0x01
    1050:	80 83       	st	Z, r24
    1052:	22 c0       	rjmp	.+68     	; 0x1098 <__stack+0x839>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1054:	8e 01       	movw	r16, r28
    1056:	08 5b       	subi	r16, 0xB8	; 184
    1058:	1e 4f       	sbci	r17, 0xFE	; 254
    105a:	fe 01       	movw	r30, r28
    105c:	e7 5b       	subi	r30, 0xB7	; 183
    105e:	fe 4f       	sbci	r31, 0xFE	; 254
    1060:	60 81       	ld	r22, Z
    1062:	71 81       	ldd	r23, Z+1	; 0x01
    1064:	82 81       	ldd	r24, Z+2	; 0x02
    1066:	93 81       	ldd	r25, Z+3	; 0x03
    1068:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
    106c:	dc 01       	movw	r26, r24
    106e:	cb 01       	movw	r24, r22
    1070:	f8 01       	movw	r30, r16
    1072:	80 83       	st	Z, r24
    1074:	de 01       	movw	r26, r28
    1076:	a7 5c       	subi	r26, 0xC7	; 199
    1078:	be 4f       	sbci	r27, 0xFE	; 254
    107a:	fe 01       	movw	r30, r28
    107c:	e8 5b       	subi	r30, 0xB8	; 184
    107e:	fe 4f       	sbci	r31, 0xFE	; 254
    1080:	80 81       	ld	r24, Z
    1082:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1084:	fe 01       	movw	r30, r28
    1086:	e7 5c       	subi	r30, 0xC7	; 199
    1088:	fe 4f       	sbci	r31, 0xFE	; 254
    108a:	80 81       	ld	r24, Z
    108c:	8a 95       	dec	r24
    108e:	f1 f7       	brne	.-4      	; 0x108c <__stack+0x82d>
    1090:	fe 01       	movw	r30, r28
    1092:	e7 5c       	subi	r30, 0xC7	; 199
    1094:	fe 4f       	sbci	r31, 0xFE	; 254
    1096:	80 83       	st	Z, r24
   _delay_us(1);
   
   for(i=0;i<8;i++)  // 3 byte
    1098:	10 92 63 00 	sts	0x0063, r1
    109c:	1a c0       	rjmp	.+52     	; 0x10d2 <__stack+0x873>
   {
      CLR(PS2PORT,PS2cmd);
    109e:	a5 e3       	ldi	r26, 0x35	; 53
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	e5 e3       	ldi	r30, 0x35	; 53
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	8b 7f       	andi	r24, 0xFB	; 251
    10aa:	8c 93       	st	X, r24
      CLR(PS2PORT,PS2clk);
    10ac:	a5 e3       	ldi	r26, 0x35	; 53
    10ae:	b0 e0       	ldi	r27, 0x00	; 0
    10b0:	e5 e3       	ldi	r30, 0x35	; 53
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
    10b6:	8e 7f       	andi	r24, 0xFE	; 254
    10b8:	8c 93       	st	X, r24
      SET(PS2PORT,PS2clk); 
    10ba:	a5 e3       	ldi	r26, 0x35	; 53
    10bc:	b0 e0       	ldi	r27, 0x00	; 0
    10be:	e5 e3       	ldi	r30, 0x35	; 53
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	81 60       	ori	r24, 0x01	; 1
    10c6:	8c 93       	st	X, r24
      SET(PS2PORT,PS2clk); 
   }
   SET(PS2PORT,PS2cmd); 
   _delay_us(1);
   
   for(i=0;i<8;i++)  // 3 byte
    10c8:	80 91 63 00 	lds	r24, 0x0063
    10cc:	8f 5f       	subi	r24, 0xFF	; 255
    10ce:	80 93 63 00 	sts	0x0063, r24
    10d2:	80 91 63 00 	lds	r24, 0x0063
    10d6:	88 30       	cpi	r24, 0x08	; 8
    10d8:	10 f3       	brcs	.-60     	; 0x109e <__stack+0x83f>
   {
      CLR(PS2PORT,PS2cmd);
      CLR(PS2PORT,PS2clk);
      SET(PS2PORT,PS2clk); 
   }
   SET(PS2PORT,PS2cmd); 
    10da:	a5 e3       	ldi	r26, 0x35	; 53
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	e5 e3       	ldi	r30, 0x35	; 53
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	84 60       	ori	r24, 0x04	; 4
    10e6:	8c 93       	st	X, r24
    10e8:	fe 01       	movw	r30, r28
    10ea:	eb 5c       	subi	r30, 0xCB	; 203
    10ec:	fe 4f       	sbci	r31, 0xFE	; 254
    10ee:	80 e0       	ldi	r24, 0x00	; 0
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	a0 e8       	ldi	r26, 0x80	; 128
    10f4:	bf e3       	ldi	r27, 0x3F	; 63
    10f6:	80 83       	st	Z, r24
    10f8:	91 83       	std	Z+1, r25	; 0x01
    10fa:	a2 83       	std	Z+2, r26	; 0x02
    10fc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    10fe:	8e 01       	movw	r16, r28
    1100:	0f 5c       	subi	r16, 0xCF	; 207
    1102:	1e 4f       	sbci	r17, 0xFE	; 254
    1104:	fe 01       	movw	r30, r28
    1106:	eb 5c       	subi	r30, 0xCB	; 203
    1108:	fe 4f       	sbci	r31, 0xFE	; 254
    110a:	60 81       	ld	r22, Z
    110c:	71 81       	ldd	r23, Z+1	; 0x01
    110e:	82 81       	ldd	r24, Z+2	; 0x02
    1110:	93 81       	ldd	r25, Z+3	; 0x03
    1112:	2b ea       	ldi	r18, 0xAB	; 171
    1114:	3a ea       	ldi	r19, 0xAA	; 170
    1116:	4a ea       	ldi	r20, 0xAA	; 170
    1118:	50 e4       	ldi	r21, 0x40	; 64
    111a:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
    111e:	dc 01       	movw	r26, r24
    1120:	cb 01       	movw	r24, r22
    1122:	f8 01       	movw	r30, r16
    1124:	80 83       	st	Z, r24
    1126:	91 83       	std	Z+1, r25	; 0x01
    1128:	a2 83       	std	Z+2, r26	; 0x02
    112a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    112c:	fe 01       	movw	r30, r28
    112e:	ef 5c       	subi	r30, 0xCF	; 207
    1130:	fe 4f       	sbci	r31, 0xFE	; 254
    1132:	60 81       	ld	r22, Z
    1134:	71 81       	ldd	r23, Z+1	; 0x01
    1136:	82 81       	ldd	r24, Z+2	; 0x02
    1138:	93 81       	ldd	r25, Z+3	; 0x03
    113a:	20 e0       	ldi	r18, 0x00	; 0
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	40 e8       	ldi	r20, 0x80	; 128
    1140:	5f e3       	ldi	r21, 0x3F	; 63
    1142:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__cmpsf2>
    1146:	88 23       	and	r24, r24
    1148:	34 f4       	brge	.+12     	; 0x1156 <__stack+0x8f7>
		__ticks = 1;
    114a:	fe 01       	movw	r30, r28
    114c:	e0 5d       	subi	r30, 0xD0	; 208
    114e:	fe 4f       	sbci	r31, 0xFE	; 254
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	80 83       	st	Z, r24
    1154:	e0 c0       	rjmp	.+448    	; 0x1316 <__stack+0xab7>
	else if (__tmp > 255)
    1156:	fe 01       	movw	r30, r28
    1158:	ef 5c       	subi	r30, 0xCF	; 207
    115a:	fe 4f       	sbci	r31, 0xFE	; 254
    115c:	60 81       	ld	r22, Z
    115e:	71 81       	ldd	r23, Z+1	; 0x01
    1160:	82 81       	ldd	r24, Z+2	; 0x02
    1162:	93 81       	ldd	r25, Z+3	; 0x03
    1164:	20 e0       	ldi	r18, 0x00	; 0
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	4f e7       	ldi	r20, 0x7F	; 127
    116a:	53 e4       	ldi	r21, 0x43	; 67
    116c:	0e 94 76 26 	call	0x4cec	; 0x4cec <__gesf2>
    1170:	18 16       	cp	r1, r24
    1172:	0c f0       	brlt	.+2      	; 0x1176 <__stack+0x917>
    1174:	c0 c0       	rjmp	.+384    	; 0x12f6 <__stack+0xa97>
	{
		_delay_ms(__us / 1000.0);
    1176:	fe 01       	movw	r30, r28
    1178:	eb 5c       	subi	r30, 0xCB	; 203
    117a:	fe 4f       	sbci	r31, 0xFE	; 254
    117c:	60 81       	ld	r22, Z
    117e:	71 81       	ldd	r23, Z+1	; 0x01
    1180:	82 81       	ldd	r24, Z+2	; 0x02
    1182:	93 81       	ldd	r25, Z+3	; 0x03
    1184:	20 e0       	ldi	r18, 0x00	; 0
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	4a e7       	ldi	r20, 0x7A	; 122
    118a:	54 e4       	ldi	r21, 0x44	; 68
    118c:	0e 94 6d 25 	call	0x4ada	; 0x4ada <__divsf3>
    1190:	dc 01       	movw	r26, r24
    1192:	cb 01       	movw	r24, r22
    1194:	fe 01       	movw	r30, r28
    1196:	e4 5d       	subi	r30, 0xD4	; 212
    1198:	fe 4f       	sbci	r31, 0xFE	; 254
    119a:	80 83       	st	Z, r24
    119c:	91 83       	std	Z+1, r25	; 0x01
    119e:	a2 83       	std	Z+2, r26	; 0x02
    11a0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11a2:	8e 01       	movw	r16, r28
    11a4:	08 5d       	subi	r16, 0xD8	; 216
    11a6:	1e 4f       	sbci	r17, 0xFE	; 254
    11a8:	fe 01       	movw	r30, r28
    11aa:	e4 5d       	subi	r30, 0xD4	; 212
    11ac:	fe 4f       	sbci	r31, 0xFE	; 254
    11ae:	60 81       	ld	r22, Z
    11b0:	71 81       	ldd	r23, Z+1	; 0x01
    11b2:	82 81       	ldd	r24, Z+2	; 0x02
    11b4:	93 81       	ldd	r25, Z+3	; 0x03
    11b6:	20 e0       	ldi	r18, 0x00	; 0
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	4a e7       	ldi	r20, 0x7A	; 122
    11bc:	55 e4       	ldi	r21, 0x45	; 69
    11be:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
    11c2:	dc 01       	movw	r26, r24
    11c4:	cb 01       	movw	r24, r22
    11c6:	f8 01       	movw	r30, r16
    11c8:	80 83       	st	Z, r24
    11ca:	91 83       	std	Z+1, r25	; 0x01
    11cc:	a2 83       	std	Z+2, r26	; 0x02
    11ce:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    11d0:	fe 01       	movw	r30, r28
    11d2:	e8 5d       	subi	r30, 0xD8	; 216
    11d4:	fe 4f       	sbci	r31, 0xFE	; 254
    11d6:	60 81       	ld	r22, Z
    11d8:	71 81       	ldd	r23, Z+1	; 0x01
    11da:	82 81       	ldd	r24, Z+2	; 0x02
    11dc:	93 81       	ldd	r25, Z+3	; 0x03
    11de:	20 e0       	ldi	r18, 0x00	; 0
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	40 e8       	ldi	r20, 0x80	; 128
    11e4:	5f e3       	ldi	r21, 0x3F	; 63
    11e6:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__cmpsf2>
    11ea:	88 23       	and	r24, r24
    11ec:	44 f4       	brge	.+16     	; 0x11fe <__stack+0x99f>
		__ticks = 1;
    11ee:	fe 01       	movw	r30, r28
    11f0:	ea 5d       	subi	r30, 0xDA	; 218
    11f2:	fe 4f       	sbci	r31, 0xFE	; 254
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	91 83       	std	Z+1, r25	; 0x01
    11fa:	80 83       	st	Z, r24
    11fc:	64 c0       	rjmp	.+200    	; 0x12c6 <__stack+0xa67>
	else if (__tmp > 65535)
    11fe:	fe 01       	movw	r30, r28
    1200:	e8 5d       	subi	r30, 0xD8	; 216
    1202:	fe 4f       	sbci	r31, 0xFE	; 254
    1204:	60 81       	ld	r22, Z
    1206:	71 81       	ldd	r23, Z+1	; 0x01
    1208:	82 81       	ldd	r24, Z+2	; 0x02
    120a:	93 81       	ldd	r25, Z+3	; 0x03
    120c:	20 e0       	ldi	r18, 0x00	; 0
    120e:	3f ef       	ldi	r19, 0xFF	; 255
    1210:	4f e7       	ldi	r20, 0x7F	; 127
    1212:	57 e4       	ldi	r21, 0x47	; 71
    1214:	0e 94 76 26 	call	0x4cec	; 0x4cec <__gesf2>
    1218:	18 16       	cp	r1, r24
    121a:	0c f0       	brlt	.+2      	; 0x121e <__stack+0x9bf>
    121c:	43 c0       	rjmp	.+134    	; 0x12a4 <__stack+0xa45>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    121e:	fe 01       	movw	r30, r28
    1220:	e4 5d       	subi	r30, 0xD4	; 212
    1222:	fe 4f       	sbci	r31, 0xFE	; 254
    1224:	60 81       	ld	r22, Z
    1226:	71 81       	ldd	r23, Z+1	; 0x01
    1228:	82 81       	ldd	r24, Z+2	; 0x02
    122a:	93 81       	ldd	r25, Z+3	; 0x03
    122c:	20 e0       	ldi	r18, 0x00	; 0
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	40 e2       	ldi	r20, 0x20	; 32
    1232:	51 e4       	ldi	r21, 0x41	; 65
    1234:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
    1238:	dc 01       	movw	r26, r24
    123a:	cb 01       	movw	r24, r22
    123c:	8e 01       	movw	r16, r28
    123e:	0a 5d       	subi	r16, 0xDA	; 218
    1240:	1e 4f       	sbci	r17, 0xFE	; 254
    1242:	bc 01       	movw	r22, r24
    1244:	cd 01       	movw	r24, r26
    1246:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
    124a:	dc 01       	movw	r26, r24
    124c:	cb 01       	movw	r24, r22
    124e:	f8 01       	movw	r30, r16
    1250:	91 83       	std	Z+1, r25	; 0x01
    1252:	80 83       	st	Z, r24
    1254:	1f c0       	rjmp	.+62     	; 0x1294 <__stack+0xa35>
    1256:	fe 01       	movw	r30, r28
    1258:	ec 5d       	subi	r30, 0xDC	; 220
    125a:	fe 4f       	sbci	r31, 0xFE	; 254
    125c:	80 e9       	ldi	r24, 0x90	; 144
    125e:	91 e0       	ldi	r25, 0x01	; 1
    1260:	91 83       	std	Z+1, r25	; 0x01
    1262:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1264:	fe 01       	movw	r30, r28
    1266:	ec 5d       	subi	r30, 0xDC	; 220
    1268:	fe 4f       	sbci	r31, 0xFE	; 254
    126a:	80 81       	ld	r24, Z
    126c:	91 81       	ldd	r25, Z+1	; 0x01
    126e:	01 97       	sbiw	r24, 0x01	; 1
    1270:	f1 f7       	brne	.-4      	; 0x126e <__stack+0xa0f>
    1272:	fe 01       	movw	r30, r28
    1274:	ec 5d       	subi	r30, 0xDC	; 220
    1276:	fe 4f       	sbci	r31, 0xFE	; 254
    1278:	91 83       	std	Z+1, r25	; 0x01
    127a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    127c:	de 01       	movw	r26, r28
    127e:	aa 5d       	subi	r26, 0xDA	; 218
    1280:	be 4f       	sbci	r27, 0xFE	; 254
    1282:	fe 01       	movw	r30, r28
    1284:	ea 5d       	subi	r30, 0xDA	; 218
    1286:	fe 4f       	sbci	r31, 0xFE	; 254
    1288:	80 81       	ld	r24, Z
    128a:	91 81       	ldd	r25, Z+1	; 0x01
    128c:	01 97       	sbiw	r24, 0x01	; 1
    128e:	11 96       	adiw	r26, 0x01	; 1
    1290:	9c 93       	st	X, r25
    1292:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1294:	fe 01       	movw	r30, r28
    1296:	ea 5d       	subi	r30, 0xDA	; 218
    1298:	fe 4f       	sbci	r31, 0xFE	; 254
    129a:	80 81       	ld	r24, Z
    129c:	91 81       	ldd	r25, Z+1	; 0x01
    129e:	00 97       	sbiw	r24, 0x00	; 0
    12a0:	d1 f6       	brne	.-76     	; 0x1256 <__stack+0x9f7>
    12a2:	4b c0       	rjmp	.+150    	; 0x133a <__stack+0xadb>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12a4:	8e 01       	movw	r16, r28
    12a6:	0a 5d       	subi	r16, 0xDA	; 218
    12a8:	1e 4f       	sbci	r17, 0xFE	; 254
    12aa:	fe 01       	movw	r30, r28
    12ac:	e8 5d       	subi	r30, 0xD8	; 216
    12ae:	fe 4f       	sbci	r31, 0xFE	; 254
    12b0:	60 81       	ld	r22, Z
    12b2:	71 81       	ldd	r23, Z+1	; 0x01
    12b4:	82 81       	ldd	r24, Z+2	; 0x02
    12b6:	93 81       	ldd	r25, Z+3	; 0x03
    12b8:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
    12bc:	dc 01       	movw	r26, r24
    12be:	cb 01       	movw	r24, r22
    12c0:	f8 01       	movw	r30, r16
    12c2:	91 83       	std	Z+1, r25	; 0x01
    12c4:	80 83       	st	Z, r24
    12c6:	de 01       	movw	r26, r28
    12c8:	ae 5d       	subi	r26, 0xDE	; 222
    12ca:	be 4f       	sbci	r27, 0xFE	; 254
    12cc:	fe 01       	movw	r30, r28
    12ce:	ea 5d       	subi	r30, 0xDA	; 218
    12d0:	fe 4f       	sbci	r31, 0xFE	; 254
    12d2:	80 81       	ld	r24, Z
    12d4:	91 81       	ldd	r25, Z+1	; 0x01
    12d6:	11 96       	adiw	r26, 0x01	; 1
    12d8:	9c 93       	st	X, r25
    12da:	8e 93       	st	-X, r24
    12dc:	fe 01       	movw	r30, r28
    12de:	ee 5d       	subi	r30, 0xDE	; 222
    12e0:	fe 4f       	sbci	r31, 0xFE	; 254
    12e2:	80 81       	ld	r24, Z
    12e4:	91 81       	ldd	r25, Z+1	; 0x01
    12e6:	01 97       	sbiw	r24, 0x01	; 1
    12e8:	f1 f7       	brne	.-4      	; 0x12e6 <__stack+0xa87>
    12ea:	fe 01       	movw	r30, r28
    12ec:	ee 5d       	subi	r30, 0xDE	; 222
    12ee:	fe 4f       	sbci	r31, 0xFE	; 254
    12f0:	91 83       	std	Z+1, r25	; 0x01
    12f2:	80 83       	st	Z, r24
    12f4:	22 c0       	rjmp	.+68     	; 0x133a <__stack+0xadb>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    12f6:	8e 01       	movw	r16, r28
    12f8:	00 5d       	subi	r16, 0xD0	; 208
    12fa:	1e 4f       	sbci	r17, 0xFE	; 254
    12fc:	fe 01       	movw	r30, r28
    12fe:	ef 5c       	subi	r30, 0xCF	; 207
    1300:	fe 4f       	sbci	r31, 0xFE	; 254
    1302:	60 81       	ld	r22, Z
    1304:	71 81       	ldd	r23, Z+1	; 0x01
    1306:	82 81       	ldd	r24, Z+2	; 0x02
    1308:	93 81       	ldd	r25, Z+3	; 0x03
    130a:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
    130e:	dc 01       	movw	r26, r24
    1310:	cb 01       	movw	r24, r22
    1312:	f8 01       	movw	r30, r16
    1314:	80 83       	st	Z, r24
    1316:	de 01       	movw	r26, r28
    1318:	af 5d       	subi	r26, 0xDF	; 223
    131a:	be 4f       	sbci	r27, 0xFE	; 254
    131c:	fe 01       	movw	r30, r28
    131e:	e0 5d       	subi	r30, 0xD0	; 208
    1320:	fe 4f       	sbci	r31, 0xFE	; 254
    1322:	80 81       	ld	r24, Z
    1324:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1326:	fe 01       	movw	r30, r28
    1328:	ef 5d       	subi	r30, 0xDF	; 223
    132a:	fe 4f       	sbci	r31, 0xFE	; 254
    132c:	80 81       	ld	r24, Z
    132e:	8a 95       	dec	r24
    1330:	f1 f7       	brne	.-4      	; 0x132e <__stack+0xacf>
    1332:	fe 01       	movw	r30, r28
    1334:	ef 5d       	subi	r30, 0xDF	; 223
    1336:	fe 4f       	sbci	r31, 0xFE	; 254
    1338:	80 83       	st	Z, r24
   _delay_us(1);
   PS2data4=0;
    133a:	10 92 61 00 	sts	0x0061, r1
   for(i=0;i<8;i++)  // 4 byte
    133e:	10 92 63 00 	sts	0x0063, r1
    1342:	5e c1       	rjmp	.+700    	; 0x1600 <__stack+0xda1>
   {
      CLR(PS2PORT,PS2cmd);
    1344:	a5 e3       	ldi	r26, 0x35	; 53
    1346:	b0 e0       	ldi	r27, 0x00	; 0
    1348:	e5 e3       	ldi	r30, 0x35	; 53
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	80 81       	ld	r24, Z
    134e:	8b 7f       	andi	r24, 0xFB	; 251
    1350:	8c 93       	st	X, r24
      CLR(PS2PORT,PS2clk);_delay_us(1);
    1352:	a5 e3       	ldi	r26, 0x35	; 53
    1354:	b0 e0       	ldi	r27, 0x00	; 0
    1356:	e5 e3       	ldi	r30, 0x35	; 53
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	80 81       	ld	r24, Z
    135c:	8e 7f       	andi	r24, 0xFE	; 254
    135e:	8c 93       	st	X, r24
    1360:	fe 01       	movw	r30, r28
    1362:	e3 5e       	subi	r30, 0xE3	; 227
    1364:	fe 4f       	sbci	r31, 0xFE	; 254
    1366:	80 e0       	ldi	r24, 0x00	; 0
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	a0 e8       	ldi	r26, 0x80	; 128
    136c:	bf e3       	ldi	r27, 0x3F	; 63
    136e:	80 83       	st	Z, r24
    1370:	91 83       	std	Z+1, r25	; 0x01
    1372:	a2 83       	std	Z+2, r26	; 0x02
    1374:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1376:	8e 01       	movw	r16, r28
    1378:	07 5e       	subi	r16, 0xE7	; 231
    137a:	1e 4f       	sbci	r17, 0xFE	; 254
    137c:	fe 01       	movw	r30, r28
    137e:	e3 5e       	subi	r30, 0xE3	; 227
    1380:	fe 4f       	sbci	r31, 0xFE	; 254
    1382:	60 81       	ld	r22, Z
    1384:	71 81       	ldd	r23, Z+1	; 0x01
    1386:	82 81       	ldd	r24, Z+2	; 0x02
    1388:	93 81       	ldd	r25, Z+3	; 0x03
    138a:	2b ea       	ldi	r18, 0xAB	; 171
    138c:	3a ea       	ldi	r19, 0xAA	; 170
    138e:	4a ea       	ldi	r20, 0xAA	; 170
    1390:	50 e4       	ldi	r21, 0x40	; 64
    1392:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
    1396:	dc 01       	movw	r26, r24
    1398:	cb 01       	movw	r24, r22
    139a:	f8 01       	movw	r30, r16
    139c:	80 83       	st	Z, r24
    139e:	91 83       	std	Z+1, r25	; 0x01
    13a0:	a2 83       	std	Z+2, r26	; 0x02
    13a2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    13a4:	fe 01       	movw	r30, r28
    13a6:	e7 5e       	subi	r30, 0xE7	; 231
    13a8:	fe 4f       	sbci	r31, 0xFE	; 254
    13aa:	60 81       	ld	r22, Z
    13ac:	71 81       	ldd	r23, Z+1	; 0x01
    13ae:	82 81       	ldd	r24, Z+2	; 0x02
    13b0:	93 81       	ldd	r25, Z+3	; 0x03
    13b2:	20 e0       	ldi	r18, 0x00	; 0
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	40 e8       	ldi	r20, 0x80	; 128
    13b8:	5f e3       	ldi	r21, 0x3F	; 63
    13ba:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__cmpsf2>
    13be:	88 23       	and	r24, r24
    13c0:	34 f4       	brge	.+12     	; 0x13ce <__stack+0xb6f>
		__ticks = 1;
    13c2:	fe 01       	movw	r30, r28
    13c4:	e8 5e       	subi	r30, 0xE8	; 232
    13c6:	fe 4f       	sbci	r31, 0xFE	; 254
    13c8:	81 e0       	ldi	r24, 0x01	; 1
    13ca:	80 83       	st	Z, r24
    13cc:	e0 c0       	rjmp	.+448    	; 0x158e <__stack+0xd2f>
	else if (__tmp > 255)
    13ce:	fe 01       	movw	r30, r28
    13d0:	e7 5e       	subi	r30, 0xE7	; 231
    13d2:	fe 4f       	sbci	r31, 0xFE	; 254
    13d4:	60 81       	ld	r22, Z
    13d6:	71 81       	ldd	r23, Z+1	; 0x01
    13d8:	82 81       	ldd	r24, Z+2	; 0x02
    13da:	93 81       	ldd	r25, Z+3	; 0x03
    13dc:	20 e0       	ldi	r18, 0x00	; 0
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	4f e7       	ldi	r20, 0x7F	; 127
    13e2:	53 e4       	ldi	r21, 0x43	; 67
    13e4:	0e 94 76 26 	call	0x4cec	; 0x4cec <__gesf2>
    13e8:	18 16       	cp	r1, r24
    13ea:	0c f0       	brlt	.+2      	; 0x13ee <__stack+0xb8f>
    13ec:	c0 c0       	rjmp	.+384    	; 0x156e <__stack+0xd0f>
	{
		_delay_ms(__us / 1000.0);
    13ee:	fe 01       	movw	r30, r28
    13f0:	e3 5e       	subi	r30, 0xE3	; 227
    13f2:	fe 4f       	sbci	r31, 0xFE	; 254
    13f4:	60 81       	ld	r22, Z
    13f6:	71 81       	ldd	r23, Z+1	; 0x01
    13f8:	82 81       	ldd	r24, Z+2	; 0x02
    13fa:	93 81       	ldd	r25, Z+3	; 0x03
    13fc:	20 e0       	ldi	r18, 0x00	; 0
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	4a e7       	ldi	r20, 0x7A	; 122
    1402:	54 e4       	ldi	r21, 0x44	; 68
    1404:	0e 94 6d 25 	call	0x4ada	; 0x4ada <__divsf3>
    1408:	dc 01       	movw	r26, r24
    140a:	cb 01       	movw	r24, r22
    140c:	fe 01       	movw	r30, r28
    140e:	ec 5e       	subi	r30, 0xEC	; 236
    1410:	fe 4f       	sbci	r31, 0xFE	; 254
    1412:	80 83       	st	Z, r24
    1414:	91 83       	std	Z+1, r25	; 0x01
    1416:	a2 83       	std	Z+2, r26	; 0x02
    1418:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    141a:	8e 01       	movw	r16, r28
    141c:	00 5f       	subi	r16, 0xF0	; 240
    141e:	1e 4f       	sbci	r17, 0xFE	; 254
    1420:	fe 01       	movw	r30, r28
    1422:	ec 5e       	subi	r30, 0xEC	; 236
    1424:	fe 4f       	sbci	r31, 0xFE	; 254
    1426:	60 81       	ld	r22, Z
    1428:	71 81       	ldd	r23, Z+1	; 0x01
    142a:	82 81       	ldd	r24, Z+2	; 0x02
    142c:	93 81       	ldd	r25, Z+3	; 0x03
    142e:	20 e0       	ldi	r18, 0x00	; 0
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	4a e7       	ldi	r20, 0x7A	; 122
    1434:	55 e4       	ldi	r21, 0x45	; 69
    1436:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
    143a:	dc 01       	movw	r26, r24
    143c:	cb 01       	movw	r24, r22
    143e:	f8 01       	movw	r30, r16
    1440:	80 83       	st	Z, r24
    1442:	91 83       	std	Z+1, r25	; 0x01
    1444:	a2 83       	std	Z+2, r26	; 0x02
    1446:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1448:	fe 01       	movw	r30, r28
    144a:	e0 5f       	subi	r30, 0xF0	; 240
    144c:	fe 4f       	sbci	r31, 0xFE	; 254
    144e:	60 81       	ld	r22, Z
    1450:	71 81       	ldd	r23, Z+1	; 0x01
    1452:	82 81       	ldd	r24, Z+2	; 0x02
    1454:	93 81       	ldd	r25, Z+3	; 0x03
    1456:	20 e0       	ldi	r18, 0x00	; 0
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	40 e8       	ldi	r20, 0x80	; 128
    145c:	5f e3       	ldi	r21, 0x3F	; 63
    145e:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__cmpsf2>
    1462:	88 23       	and	r24, r24
    1464:	44 f4       	brge	.+16     	; 0x1476 <__stack+0xc17>
		__ticks = 1;
    1466:	fe 01       	movw	r30, r28
    1468:	e2 5f       	subi	r30, 0xF2	; 242
    146a:	fe 4f       	sbci	r31, 0xFE	; 254
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	91 83       	std	Z+1, r25	; 0x01
    1472:	80 83       	st	Z, r24
    1474:	64 c0       	rjmp	.+200    	; 0x153e <__stack+0xcdf>
	else if (__tmp > 65535)
    1476:	fe 01       	movw	r30, r28
    1478:	e0 5f       	subi	r30, 0xF0	; 240
    147a:	fe 4f       	sbci	r31, 0xFE	; 254
    147c:	60 81       	ld	r22, Z
    147e:	71 81       	ldd	r23, Z+1	; 0x01
    1480:	82 81       	ldd	r24, Z+2	; 0x02
    1482:	93 81       	ldd	r25, Z+3	; 0x03
    1484:	20 e0       	ldi	r18, 0x00	; 0
    1486:	3f ef       	ldi	r19, 0xFF	; 255
    1488:	4f e7       	ldi	r20, 0x7F	; 127
    148a:	57 e4       	ldi	r21, 0x47	; 71
    148c:	0e 94 76 26 	call	0x4cec	; 0x4cec <__gesf2>
    1490:	18 16       	cp	r1, r24
    1492:	0c f0       	brlt	.+2      	; 0x1496 <__stack+0xc37>
    1494:	43 c0       	rjmp	.+134    	; 0x151c <__stack+0xcbd>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1496:	fe 01       	movw	r30, r28
    1498:	ec 5e       	subi	r30, 0xEC	; 236
    149a:	fe 4f       	sbci	r31, 0xFE	; 254
    149c:	60 81       	ld	r22, Z
    149e:	71 81       	ldd	r23, Z+1	; 0x01
    14a0:	82 81       	ldd	r24, Z+2	; 0x02
    14a2:	93 81       	ldd	r25, Z+3	; 0x03
    14a4:	20 e0       	ldi	r18, 0x00	; 0
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	40 e2       	ldi	r20, 0x20	; 32
    14aa:	51 e4       	ldi	r21, 0x41	; 65
    14ac:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
    14b0:	dc 01       	movw	r26, r24
    14b2:	cb 01       	movw	r24, r22
    14b4:	8e 01       	movw	r16, r28
    14b6:	02 5f       	subi	r16, 0xF2	; 242
    14b8:	1e 4f       	sbci	r17, 0xFE	; 254
    14ba:	bc 01       	movw	r22, r24
    14bc:	cd 01       	movw	r24, r26
    14be:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
    14c2:	dc 01       	movw	r26, r24
    14c4:	cb 01       	movw	r24, r22
    14c6:	f8 01       	movw	r30, r16
    14c8:	91 83       	std	Z+1, r25	; 0x01
    14ca:	80 83       	st	Z, r24
    14cc:	1f c0       	rjmp	.+62     	; 0x150c <__stack+0xcad>
    14ce:	fe 01       	movw	r30, r28
    14d0:	e4 5f       	subi	r30, 0xF4	; 244
    14d2:	fe 4f       	sbci	r31, 0xFE	; 254
    14d4:	80 e9       	ldi	r24, 0x90	; 144
    14d6:	91 e0       	ldi	r25, 0x01	; 1
    14d8:	91 83       	std	Z+1, r25	; 0x01
    14da:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    14dc:	fe 01       	movw	r30, r28
    14de:	e4 5f       	subi	r30, 0xF4	; 244
    14e0:	fe 4f       	sbci	r31, 0xFE	; 254
    14e2:	80 81       	ld	r24, Z
    14e4:	91 81       	ldd	r25, Z+1	; 0x01
    14e6:	01 97       	sbiw	r24, 0x01	; 1
    14e8:	f1 f7       	brne	.-4      	; 0x14e6 <__stack+0xc87>
    14ea:	fe 01       	movw	r30, r28
    14ec:	e4 5f       	subi	r30, 0xF4	; 244
    14ee:	fe 4f       	sbci	r31, 0xFE	; 254
    14f0:	91 83       	std	Z+1, r25	; 0x01
    14f2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14f4:	de 01       	movw	r26, r28
    14f6:	a2 5f       	subi	r26, 0xF2	; 242
    14f8:	be 4f       	sbci	r27, 0xFE	; 254
    14fa:	fe 01       	movw	r30, r28
    14fc:	e2 5f       	subi	r30, 0xF2	; 242
    14fe:	fe 4f       	sbci	r31, 0xFE	; 254
    1500:	80 81       	ld	r24, Z
    1502:	91 81       	ldd	r25, Z+1	; 0x01
    1504:	01 97       	sbiw	r24, 0x01	; 1
    1506:	11 96       	adiw	r26, 0x01	; 1
    1508:	9c 93       	st	X, r25
    150a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    150c:	fe 01       	movw	r30, r28
    150e:	e2 5f       	subi	r30, 0xF2	; 242
    1510:	fe 4f       	sbci	r31, 0xFE	; 254
    1512:	80 81       	ld	r24, Z
    1514:	91 81       	ldd	r25, Z+1	; 0x01
    1516:	00 97       	sbiw	r24, 0x00	; 0
    1518:	d1 f6       	brne	.-76     	; 0x14ce <__stack+0xc6f>
    151a:	4b c0       	rjmp	.+150    	; 0x15b2 <__stack+0xd53>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    151c:	8e 01       	movw	r16, r28
    151e:	02 5f       	subi	r16, 0xF2	; 242
    1520:	1e 4f       	sbci	r17, 0xFE	; 254
    1522:	fe 01       	movw	r30, r28
    1524:	e0 5f       	subi	r30, 0xF0	; 240
    1526:	fe 4f       	sbci	r31, 0xFE	; 254
    1528:	60 81       	ld	r22, Z
    152a:	71 81       	ldd	r23, Z+1	; 0x01
    152c:	82 81       	ldd	r24, Z+2	; 0x02
    152e:	93 81       	ldd	r25, Z+3	; 0x03
    1530:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
    1534:	dc 01       	movw	r26, r24
    1536:	cb 01       	movw	r24, r22
    1538:	f8 01       	movw	r30, r16
    153a:	91 83       	std	Z+1, r25	; 0x01
    153c:	80 83       	st	Z, r24
    153e:	de 01       	movw	r26, r28
    1540:	a6 5f       	subi	r26, 0xF6	; 246
    1542:	be 4f       	sbci	r27, 0xFE	; 254
    1544:	fe 01       	movw	r30, r28
    1546:	e2 5f       	subi	r30, 0xF2	; 242
    1548:	fe 4f       	sbci	r31, 0xFE	; 254
    154a:	80 81       	ld	r24, Z
    154c:	91 81       	ldd	r25, Z+1	; 0x01
    154e:	11 96       	adiw	r26, 0x01	; 1
    1550:	9c 93       	st	X, r25
    1552:	8e 93       	st	-X, r24
    1554:	fe 01       	movw	r30, r28
    1556:	e6 5f       	subi	r30, 0xF6	; 246
    1558:	fe 4f       	sbci	r31, 0xFE	; 254
    155a:	80 81       	ld	r24, Z
    155c:	91 81       	ldd	r25, Z+1	; 0x01
    155e:	01 97       	sbiw	r24, 0x01	; 1
    1560:	f1 f7       	brne	.-4      	; 0x155e <__stack+0xcff>
    1562:	fe 01       	movw	r30, r28
    1564:	e6 5f       	subi	r30, 0xF6	; 246
    1566:	fe 4f       	sbci	r31, 0xFE	; 254
    1568:	91 83       	std	Z+1, r25	; 0x01
    156a:	80 83       	st	Z, r24
    156c:	22 c0       	rjmp	.+68     	; 0x15b2 <__stack+0xd53>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    156e:	8e 01       	movw	r16, r28
    1570:	08 5e       	subi	r16, 0xE8	; 232
    1572:	1e 4f       	sbci	r17, 0xFE	; 254
    1574:	fe 01       	movw	r30, r28
    1576:	e7 5e       	subi	r30, 0xE7	; 231
    1578:	fe 4f       	sbci	r31, 0xFE	; 254
    157a:	60 81       	ld	r22, Z
    157c:	71 81       	ldd	r23, Z+1	; 0x01
    157e:	82 81       	ldd	r24, Z+2	; 0x02
    1580:	93 81       	ldd	r25, Z+3	; 0x03
    1582:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
    1586:	dc 01       	movw	r26, r24
    1588:	cb 01       	movw	r24, r22
    158a:	f8 01       	movw	r30, r16
    158c:	80 83       	st	Z, r24
    158e:	de 01       	movw	r26, r28
    1590:	a7 5f       	subi	r26, 0xF7	; 247
    1592:	be 4f       	sbci	r27, 0xFE	; 254
    1594:	fe 01       	movw	r30, r28
    1596:	e8 5e       	subi	r30, 0xE8	; 232
    1598:	fe 4f       	sbci	r31, 0xFE	; 254
    159a:	80 81       	ld	r24, Z
    159c:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    159e:	fe 01       	movw	r30, r28
    15a0:	e7 5f       	subi	r30, 0xF7	; 247
    15a2:	fe 4f       	sbci	r31, 0xFE	; 254
    15a4:	80 81       	ld	r24, Z
    15a6:	8a 95       	dec	r24
    15a8:	f1 f7       	brne	.-4      	; 0x15a6 <__stack+0xd47>
    15aa:	fe 01       	movw	r30, r28
    15ac:	e7 5f       	subi	r30, 0xF7	; 247
    15ae:	fe 4f       	sbci	r31, 0xFE	; 254
    15b0:	80 83       	st	Z, r24
	  if(CHK(PS2IN,PS2dat)) SET(PS2data4,i); 
    15b2:	e3 e3       	ldi	r30, 0x33	; 51
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 81       	ld	r24, Z
    15b8:	88 2f       	mov	r24, r24
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	82 70       	andi	r24, 0x02	; 2
    15be:	90 70       	andi	r25, 0x00	; 0
    15c0:	00 97       	sbiw	r24, 0x00	; 0
    15c2:	91 f0       	breq	.+36     	; 0x15e8 <__stack+0xd89>
    15c4:	80 91 63 00 	lds	r24, 0x0063
    15c8:	28 2f       	mov	r18, r24
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	02 2e       	mov	r0, r18
    15d2:	02 c0       	rjmp	.+4      	; 0x15d8 <__stack+0xd79>
    15d4:	88 0f       	add	r24, r24
    15d6:	99 1f       	adc	r25, r25
    15d8:	0a 94       	dec	r0
    15da:	e2 f7       	brpl	.-8      	; 0x15d4 <__stack+0xd75>
    15dc:	98 2f       	mov	r25, r24
    15de:	80 91 61 00 	lds	r24, 0x0061
    15e2:	89 2b       	or	r24, r25
    15e4:	80 93 61 00 	sts	0x0061, r24
      SET(PS2PORT,PS2clk);
    15e8:	a5 e3       	ldi	r26, 0x35	; 53
    15ea:	b0 e0       	ldi	r27, 0x00	; 0
    15ec:	e5 e3       	ldi	r30, 0x35	; 53
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	80 81       	ld	r24, Z
    15f2:	81 60       	ori	r24, 0x01	; 1
    15f4:	8c 93       	st	X, r24
      SET(PS2PORT,PS2clk); 
   }
   SET(PS2PORT,PS2cmd); 
   _delay_us(1);
   PS2data4=0;
   for(i=0;i<8;i++)  // 4 byte
    15f6:	80 91 63 00 	lds	r24, 0x0063
    15fa:	8f 5f       	subi	r24, 0xFF	; 255
    15fc:	80 93 63 00 	sts	0x0063, r24
    1600:	80 91 63 00 	lds	r24, 0x0063
    1604:	88 30       	cpi	r24, 0x08	; 8
    1606:	08 f4       	brcc	.+2      	; 0x160a <__stack+0xdab>
    1608:	9d ce       	rjmp	.-710    	; 0x1344 <__stack+0xae5>
      CLR(PS2PORT,PS2cmd);
      CLR(PS2PORT,PS2clk);_delay_us(1);
	  if(CHK(PS2IN,PS2dat)) SET(PS2data4,i); 
      SET(PS2PORT,PS2clk);
   }
   SET(PS2PORT,PS2cmd); 
    160a:	a5 e3       	ldi	r26, 0x35	; 53
    160c:	b0 e0       	ldi	r27, 0x00	; 0
    160e:	e5 e3       	ldi	r30, 0x35	; 53
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	80 81       	ld	r24, Z
    1614:	84 60       	ori	r24, 0x04	; 4
    1616:	8c 93       	st	X, r24
    1618:	fe 01       	movw	r30, r28
    161a:	eb 5f       	subi	r30, 0xFB	; 251
    161c:	fe 4f       	sbci	r31, 0xFE	; 254
    161e:	80 e0       	ldi	r24, 0x00	; 0
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	a0 e8       	ldi	r26, 0x80	; 128
    1624:	bf e3       	ldi	r27, 0x3F	; 63
    1626:	80 83       	st	Z, r24
    1628:	91 83       	std	Z+1, r25	; 0x01
    162a:	a2 83       	std	Z+2, r26	; 0x02
    162c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    162e:	8e 01       	movw	r16, r28
    1630:	0f 5f       	subi	r16, 0xFF	; 255
    1632:	1e 4f       	sbci	r17, 0xFE	; 254
    1634:	fe 01       	movw	r30, r28
    1636:	eb 5f       	subi	r30, 0xFB	; 251
    1638:	fe 4f       	sbci	r31, 0xFE	; 254
    163a:	60 81       	ld	r22, Z
    163c:	71 81       	ldd	r23, Z+1	; 0x01
    163e:	82 81       	ldd	r24, Z+2	; 0x02
    1640:	93 81       	ldd	r25, Z+3	; 0x03
    1642:	2b ea       	ldi	r18, 0xAB	; 171
    1644:	3a ea       	ldi	r19, 0xAA	; 170
    1646:	4a ea       	ldi	r20, 0xAA	; 170
    1648:	50 e4       	ldi	r21, 0x40	; 64
    164a:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
    164e:	dc 01       	movw	r26, r24
    1650:	cb 01       	movw	r24, r22
    1652:	f8 01       	movw	r30, r16
    1654:	80 83       	st	Z, r24
    1656:	91 83       	std	Z+1, r25	; 0x01
    1658:	a2 83       	std	Z+2, r26	; 0x02
    165a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    165c:	fe 01       	movw	r30, r28
    165e:	ef 5f       	subi	r30, 0xFF	; 255
    1660:	fe 4f       	sbci	r31, 0xFE	; 254
    1662:	60 81       	ld	r22, Z
    1664:	71 81       	ldd	r23, Z+1	; 0x01
    1666:	82 81       	ldd	r24, Z+2	; 0x02
    1668:	93 81       	ldd	r25, Z+3	; 0x03
    166a:	20 e0       	ldi	r18, 0x00	; 0
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	40 e8       	ldi	r20, 0x80	; 128
    1670:	5f e3       	ldi	r21, 0x3F	; 63
    1672:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__cmpsf2>
    1676:	88 23       	and	r24, r24
    1678:	34 f4       	brge	.+12     	; 0x1686 <__stack+0xe27>
		__ticks = 1;
    167a:	fe 01       	movw	r30, r28
    167c:	e0 50       	subi	r30, 0x00	; 0
    167e:	ff 4f       	sbci	r31, 0xFF	; 255
    1680:	81 e0       	ldi	r24, 0x01	; 1
    1682:	80 83       	st	Z, r24
    1684:	e0 c0       	rjmp	.+448    	; 0x1846 <__stack+0xfe7>
	else if (__tmp > 255)
    1686:	fe 01       	movw	r30, r28
    1688:	ef 5f       	subi	r30, 0xFF	; 255
    168a:	fe 4f       	sbci	r31, 0xFE	; 254
    168c:	60 81       	ld	r22, Z
    168e:	71 81       	ldd	r23, Z+1	; 0x01
    1690:	82 81       	ldd	r24, Z+2	; 0x02
    1692:	93 81       	ldd	r25, Z+3	; 0x03
    1694:	20 e0       	ldi	r18, 0x00	; 0
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	4f e7       	ldi	r20, 0x7F	; 127
    169a:	53 e4       	ldi	r21, 0x43	; 67
    169c:	0e 94 76 26 	call	0x4cec	; 0x4cec <__gesf2>
    16a0:	18 16       	cp	r1, r24
    16a2:	0c f0       	brlt	.+2      	; 0x16a6 <__stack+0xe47>
    16a4:	c0 c0       	rjmp	.+384    	; 0x1826 <__stack+0xfc7>
	{
		_delay_ms(__us / 1000.0);
    16a6:	fe 01       	movw	r30, r28
    16a8:	eb 5f       	subi	r30, 0xFB	; 251
    16aa:	fe 4f       	sbci	r31, 0xFE	; 254
    16ac:	60 81       	ld	r22, Z
    16ae:	71 81       	ldd	r23, Z+1	; 0x01
    16b0:	82 81       	ldd	r24, Z+2	; 0x02
    16b2:	93 81       	ldd	r25, Z+3	; 0x03
    16b4:	20 e0       	ldi	r18, 0x00	; 0
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	4a e7       	ldi	r20, 0x7A	; 122
    16ba:	54 e4       	ldi	r21, 0x44	; 68
    16bc:	0e 94 6d 25 	call	0x4ada	; 0x4ada <__divsf3>
    16c0:	dc 01       	movw	r26, r24
    16c2:	cb 01       	movw	r24, r22
    16c4:	fe 01       	movw	r30, r28
    16c6:	e4 50       	subi	r30, 0x04	; 4
    16c8:	ff 4f       	sbci	r31, 0xFF	; 255
    16ca:	80 83       	st	Z, r24
    16cc:	91 83       	std	Z+1, r25	; 0x01
    16ce:	a2 83       	std	Z+2, r26	; 0x02
    16d0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16d2:	8e 01       	movw	r16, r28
    16d4:	08 50       	subi	r16, 0x08	; 8
    16d6:	1f 4f       	sbci	r17, 0xFF	; 255
    16d8:	fe 01       	movw	r30, r28
    16da:	e4 50       	subi	r30, 0x04	; 4
    16dc:	ff 4f       	sbci	r31, 0xFF	; 255
    16de:	60 81       	ld	r22, Z
    16e0:	71 81       	ldd	r23, Z+1	; 0x01
    16e2:	82 81       	ldd	r24, Z+2	; 0x02
    16e4:	93 81       	ldd	r25, Z+3	; 0x03
    16e6:	20 e0       	ldi	r18, 0x00	; 0
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	4a e7       	ldi	r20, 0x7A	; 122
    16ec:	55 e4       	ldi	r21, 0x45	; 69
    16ee:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
    16f2:	dc 01       	movw	r26, r24
    16f4:	cb 01       	movw	r24, r22
    16f6:	f8 01       	movw	r30, r16
    16f8:	80 83       	st	Z, r24
    16fa:	91 83       	std	Z+1, r25	; 0x01
    16fc:	a2 83       	std	Z+2, r26	; 0x02
    16fe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1700:	fe 01       	movw	r30, r28
    1702:	e8 50       	subi	r30, 0x08	; 8
    1704:	ff 4f       	sbci	r31, 0xFF	; 255
    1706:	60 81       	ld	r22, Z
    1708:	71 81       	ldd	r23, Z+1	; 0x01
    170a:	82 81       	ldd	r24, Z+2	; 0x02
    170c:	93 81       	ldd	r25, Z+3	; 0x03
    170e:	20 e0       	ldi	r18, 0x00	; 0
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	40 e8       	ldi	r20, 0x80	; 128
    1714:	5f e3       	ldi	r21, 0x3F	; 63
    1716:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__cmpsf2>
    171a:	88 23       	and	r24, r24
    171c:	44 f4       	brge	.+16     	; 0x172e <__stack+0xecf>
		__ticks = 1;
    171e:	fe 01       	movw	r30, r28
    1720:	ea 50       	subi	r30, 0x0A	; 10
    1722:	ff 4f       	sbci	r31, 0xFF	; 255
    1724:	81 e0       	ldi	r24, 0x01	; 1
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	91 83       	std	Z+1, r25	; 0x01
    172a:	80 83       	st	Z, r24
    172c:	64 c0       	rjmp	.+200    	; 0x17f6 <__stack+0xf97>
	else if (__tmp > 65535)
    172e:	fe 01       	movw	r30, r28
    1730:	e8 50       	subi	r30, 0x08	; 8
    1732:	ff 4f       	sbci	r31, 0xFF	; 255
    1734:	60 81       	ld	r22, Z
    1736:	71 81       	ldd	r23, Z+1	; 0x01
    1738:	82 81       	ldd	r24, Z+2	; 0x02
    173a:	93 81       	ldd	r25, Z+3	; 0x03
    173c:	20 e0       	ldi	r18, 0x00	; 0
    173e:	3f ef       	ldi	r19, 0xFF	; 255
    1740:	4f e7       	ldi	r20, 0x7F	; 127
    1742:	57 e4       	ldi	r21, 0x47	; 71
    1744:	0e 94 76 26 	call	0x4cec	; 0x4cec <__gesf2>
    1748:	18 16       	cp	r1, r24
    174a:	0c f0       	brlt	.+2      	; 0x174e <__stack+0xeef>
    174c:	43 c0       	rjmp	.+134    	; 0x17d4 <__stack+0xf75>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    174e:	fe 01       	movw	r30, r28
    1750:	e4 50       	subi	r30, 0x04	; 4
    1752:	ff 4f       	sbci	r31, 0xFF	; 255
    1754:	60 81       	ld	r22, Z
    1756:	71 81       	ldd	r23, Z+1	; 0x01
    1758:	82 81       	ldd	r24, Z+2	; 0x02
    175a:	93 81       	ldd	r25, Z+3	; 0x03
    175c:	20 e0       	ldi	r18, 0x00	; 0
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	40 e2       	ldi	r20, 0x20	; 32
    1762:	51 e4       	ldi	r21, 0x41	; 65
    1764:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
    1768:	dc 01       	movw	r26, r24
    176a:	cb 01       	movw	r24, r22
    176c:	8e 01       	movw	r16, r28
    176e:	0a 50       	subi	r16, 0x0A	; 10
    1770:	1f 4f       	sbci	r17, 0xFF	; 255
    1772:	bc 01       	movw	r22, r24
    1774:	cd 01       	movw	r24, r26
    1776:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
    177a:	dc 01       	movw	r26, r24
    177c:	cb 01       	movw	r24, r22
    177e:	f8 01       	movw	r30, r16
    1780:	91 83       	std	Z+1, r25	; 0x01
    1782:	80 83       	st	Z, r24
    1784:	1f c0       	rjmp	.+62     	; 0x17c4 <__stack+0xf65>
    1786:	fe 01       	movw	r30, r28
    1788:	ec 50       	subi	r30, 0x0C	; 12
    178a:	ff 4f       	sbci	r31, 0xFF	; 255
    178c:	80 e9       	ldi	r24, 0x90	; 144
    178e:	91 e0       	ldi	r25, 0x01	; 1
    1790:	91 83       	std	Z+1, r25	; 0x01
    1792:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1794:	fe 01       	movw	r30, r28
    1796:	ec 50       	subi	r30, 0x0C	; 12
    1798:	ff 4f       	sbci	r31, 0xFF	; 255
    179a:	80 81       	ld	r24, Z
    179c:	91 81       	ldd	r25, Z+1	; 0x01
    179e:	01 97       	sbiw	r24, 0x01	; 1
    17a0:	f1 f7       	brne	.-4      	; 0x179e <__stack+0xf3f>
    17a2:	fe 01       	movw	r30, r28
    17a4:	ec 50       	subi	r30, 0x0C	; 12
    17a6:	ff 4f       	sbci	r31, 0xFF	; 255
    17a8:	91 83       	std	Z+1, r25	; 0x01
    17aa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17ac:	de 01       	movw	r26, r28
    17ae:	aa 50       	subi	r26, 0x0A	; 10
    17b0:	bf 4f       	sbci	r27, 0xFF	; 255
    17b2:	fe 01       	movw	r30, r28
    17b4:	ea 50       	subi	r30, 0x0A	; 10
    17b6:	ff 4f       	sbci	r31, 0xFF	; 255
    17b8:	80 81       	ld	r24, Z
    17ba:	91 81       	ldd	r25, Z+1	; 0x01
    17bc:	01 97       	sbiw	r24, 0x01	; 1
    17be:	11 96       	adiw	r26, 0x01	; 1
    17c0:	9c 93       	st	X, r25
    17c2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17c4:	fe 01       	movw	r30, r28
    17c6:	ea 50       	subi	r30, 0x0A	; 10
    17c8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ca:	80 81       	ld	r24, Z
    17cc:	91 81       	ldd	r25, Z+1	; 0x01
    17ce:	00 97       	sbiw	r24, 0x00	; 0
    17d0:	d1 f6       	brne	.-76     	; 0x1786 <__stack+0xf27>
    17d2:	4b c0       	rjmp	.+150    	; 0x186a <__stack+0x100b>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17d4:	8e 01       	movw	r16, r28
    17d6:	0a 50       	subi	r16, 0x0A	; 10
    17d8:	1f 4f       	sbci	r17, 0xFF	; 255
    17da:	fe 01       	movw	r30, r28
    17dc:	e8 50       	subi	r30, 0x08	; 8
    17de:	ff 4f       	sbci	r31, 0xFF	; 255
    17e0:	60 81       	ld	r22, Z
    17e2:	71 81       	ldd	r23, Z+1	; 0x01
    17e4:	82 81       	ldd	r24, Z+2	; 0x02
    17e6:	93 81       	ldd	r25, Z+3	; 0x03
    17e8:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
    17ec:	dc 01       	movw	r26, r24
    17ee:	cb 01       	movw	r24, r22
    17f0:	f8 01       	movw	r30, r16
    17f2:	91 83       	std	Z+1, r25	; 0x01
    17f4:	80 83       	st	Z, r24
    17f6:	de 01       	movw	r26, r28
    17f8:	ae 50       	subi	r26, 0x0E	; 14
    17fa:	bf 4f       	sbci	r27, 0xFF	; 255
    17fc:	fe 01       	movw	r30, r28
    17fe:	ea 50       	subi	r30, 0x0A	; 10
    1800:	ff 4f       	sbci	r31, 0xFF	; 255
    1802:	80 81       	ld	r24, Z
    1804:	91 81       	ldd	r25, Z+1	; 0x01
    1806:	11 96       	adiw	r26, 0x01	; 1
    1808:	9c 93       	st	X, r25
    180a:	8e 93       	st	-X, r24
    180c:	fe 01       	movw	r30, r28
    180e:	ee 50       	subi	r30, 0x0E	; 14
    1810:	ff 4f       	sbci	r31, 0xFF	; 255
    1812:	80 81       	ld	r24, Z
    1814:	91 81       	ldd	r25, Z+1	; 0x01
    1816:	01 97       	sbiw	r24, 0x01	; 1
    1818:	f1 f7       	brne	.-4      	; 0x1816 <__stack+0xfb7>
    181a:	fe 01       	movw	r30, r28
    181c:	ee 50       	subi	r30, 0x0E	; 14
    181e:	ff 4f       	sbci	r31, 0xFF	; 255
    1820:	91 83       	std	Z+1, r25	; 0x01
    1822:	80 83       	st	Z, r24
    1824:	22 c0       	rjmp	.+68     	; 0x186a <__stack+0x100b>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1826:	8e 01       	movw	r16, r28
    1828:	00 50       	subi	r16, 0x00	; 0
    182a:	1f 4f       	sbci	r17, 0xFF	; 255
    182c:	fe 01       	movw	r30, r28
    182e:	ef 5f       	subi	r30, 0xFF	; 255
    1830:	fe 4f       	sbci	r31, 0xFE	; 254
    1832:	60 81       	ld	r22, Z
    1834:	71 81       	ldd	r23, Z+1	; 0x01
    1836:	82 81       	ldd	r24, Z+2	; 0x02
    1838:	93 81       	ldd	r25, Z+3	; 0x03
    183a:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
    183e:	dc 01       	movw	r26, r24
    1840:	cb 01       	movw	r24, r22
    1842:	f8 01       	movw	r30, r16
    1844:	80 83       	st	Z, r24
    1846:	de 01       	movw	r26, r28
    1848:	af 50       	subi	r26, 0x0F	; 15
    184a:	bf 4f       	sbci	r27, 0xFF	; 255
    184c:	fe 01       	movw	r30, r28
    184e:	e0 50       	subi	r30, 0x00	; 0
    1850:	ff 4f       	sbci	r31, 0xFF	; 255
    1852:	80 81       	ld	r24, Z
    1854:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1856:	fe 01       	movw	r30, r28
    1858:	ef 50       	subi	r30, 0x0F	; 15
    185a:	ff 4f       	sbci	r31, 0xFF	; 255
    185c:	80 81       	ld	r24, Z
    185e:	8a 95       	dec	r24
    1860:	f1 f7       	brne	.-4      	; 0x185e <__stack+0xfff>
    1862:	fe 01       	movw	r30, r28
    1864:	ef 50       	subi	r30, 0x0F	; 15
    1866:	ff 4f       	sbci	r31, 0xFF	; 255
    1868:	80 83       	st	Z, r24
   _delay_us(1);
   
   PS2data5=0;
    186a:	10 92 66 00 	sts	0x0066, r1
   for(i=0;i<8;i++) // 5 byte digital
    186e:	10 92 63 00 	sts	0x0063, r1
    1872:	5e c1       	rjmp	.+700    	; 0x1b30 <__stack+0x12d1>
   {
      CLR(PS2PORT,PS2cmd);
    1874:	a5 e3       	ldi	r26, 0x35	; 53
    1876:	b0 e0       	ldi	r27, 0x00	; 0
    1878:	e5 e3       	ldi	r30, 0x35	; 53
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	80 81       	ld	r24, Z
    187e:	8b 7f       	andi	r24, 0xFB	; 251
    1880:	8c 93       	st	X, r24
      CLR(PS2PORT,PS2clk);_delay_us(1);
    1882:	a5 e3       	ldi	r26, 0x35	; 53
    1884:	b0 e0       	ldi	r27, 0x00	; 0
    1886:	e5 e3       	ldi	r30, 0x35	; 53
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	80 81       	ld	r24, Z
    188c:	8e 7f       	andi	r24, 0xFE	; 254
    188e:	8c 93       	st	X, r24
    1890:	fe 01       	movw	r30, r28
    1892:	e3 51       	subi	r30, 0x13	; 19
    1894:	ff 4f       	sbci	r31, 0xFF	; 255
    1896:	80 e0       	ldi	r24, 0x00	; 0
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	a0 e8       	ldi	r26, 0x80	; 128
    189c:	bf e3       	ldi	r27, 0x3F	; 63
    189e:	80 83       	st	Z, r24
    18a0:	91 83       	std	Z+1, r25	; 0x01
    18a2:	a2 83       	std	Z+2, r26	; 0x02
    18a4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    18a6:	8e 01       	movw	r16, r28
    18a8:	07 51       	subi	r16, 0x17	; 23
    18aa:	1f 4f       	sbci	r17, 0xFF	; 255
    18ac:	fe 01       	movw	r30, r28
    18ae:	e3 51       	subi	r30, 0x13	; 19
    18b0:	ff 4f       	sbci	r31, 0xFF	; 255
    18b2:	60 81       	ld	r22, Z
    18b4:	71 81       	ldd	r23, Z+1	; 0x01
    18b6:	82 81       	ldd	r24, Z+2	; 0x02
    18b8:	93 81       	ldd	r25, Z+3	; 0x03
    18ba:	2b ea       	ldi	r18, 0xAB	; 171
    18bc:	3a ea       	ldi	r19, 0xAA	; 170
    18be:	4a ea       	ldi	r20, 0xAA	; 170
    18c0:	50 e4       	ldi	r21, 0x40	; 64
    18c2:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
    18c6:	dc 01       	movw	r26, r24
    18c8:	cb 01       	movw	r24, r22
    18ca:	f8 01       	movw	r30, r16
    18cc:	80 83       	st	Z, r24
    18ce:	91 83       	std	Z+1, r25	; 0x01
    18d0:	a2 83       	std	Z+2, r26	; 0x02
    18d2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18d4:	fe 01       	movw	r30, r28
    18d6:	e7 51       	subi	r30, 0x17	; 23
    18d8:	ff 4f       	sbci	r31, 0xFF	; 255
    18da:	60 81       	ld	r22, Z
    18dc:	71 81       	ldd	r23, Z+1	; 0x01
    18de:	82 81       	ldd	r24, Z+2	; 0x02
    18e0:	93 81       	ldd	r25, Z+3	; 0x03
    18e2:	20 e0       	ldi	r18, 0x00	; 0
    18e4:	30 e0       	ldi	r19, 0x00	; 0
    18e6:	40 e8       	ldi	r20, 0x80	; 128
    18e8:	5f e3       	ldi	r21, 0x3F	; 63
    18ea:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__cmpsf2>
    18ee:	88 23       	and	r24, r24
    18f0:	34 f4       	brge	.+12     	; 0x18fe <__stack+0x109f>
		__ticks = 1;
    18f2:	fe 01       	movw	r30, r28
    18f4:	e8 51       	subi	r30, 0x18	; 24
    18f6:	ff 4f       	sbci	r31, 0xFF	; 255
    18f8:	81 e0       	ldi	r24, 0x01	; 1
    18fa:	80 83       	st	Z, r24
    18fc:	e0 c0       	rjmp	.+448    	; 0x1abe <__stack+0x125f>
	else if (__tmp > 255)
    18fe:	fe 01       	movw	r30, r28
    1900:	e7 51       	subi	r30, 0x17	; 23
    1902:	ff 4f       	sbci	r31, 0xFF	; 255
    1904:	60 81       	ld	r22, Z
    1906:	71 81       	ldd	r23, Z+1	; 0x01
    1908:	82 81       	ldd	r24, Z+2	; 0x02
    190a:	93 81       	ldd	r25, Z+3	; 0x03
    190c:	20 e0       	ldi	r18, 0x00	; 0
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	4f e7       	ldi	r20, 0x7F	; 127
    1912:	53 e4       	ldi	r21, 0x43	; 67
    1914:	0e 94 76 26 	call	0x4cec	; 0x4cec <__gesf2>
    1918:	18 16       	cp	r1, r24
    191a:	0c f0       	brlt	.+2      	; 0x191e <__stack+0x10bf>
    191c:	c0 c0       	rjmp	.+384    	; 0x1a9e <__stack+0x123f>
	{
		_delay_ms(__us / 1000.0);
    191e:	fe 01       	movw	r30, r28
    1920:	e3 51       	subi	r30, 0x13	; 19
    1922:	ff 4f       	sbci	r31, 0xFF	; 255
    1924:	60 81       	ld	r22, Z
    1926:	71 81       	ldd	r23, Z+1	; 0x01
    1928:	82 81       	ldd	r24, Z+2	; 0x02
    192a:	93 81       	ldd	r25, Z+3	; 0x03
    192c:	20 e0       	ldi	r18, 0x00	; 0
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	4a e7       	ldi	r20, 0x7A	; 122
    1932:	54 e4       	ldi	r21, 0x44	; 68
    1934:	0e 94 6d 25 	call	0x4ada	; 0x4ada <__divsf3>
    1938:	dc 01       	movw	r26, r24
    193a:	cb 01       	movw	r24, r22
    193c:	fe 01       	movw	r30, r28
    193e:	ec 51       	subi	r30, 0x1C	; 28
    1940:	ff 4f       	sbci	r31, 0xFF	; 255
    1942:	80 83       	st	Z, r24
    1944:	91 83       	std	Z+1, r25	; 0x01
    1946:	a2 83       	std	Z+2, r26	; 0x02
    1948:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    194a:	8e 01       	movw	r16, r28
    194c:	00 52       	subi	r16, 0x20	; 32
    194e:	1f 4f       	sbci	r17, 0xFF	; 255
    1950:	fe 01       	movw	r30, r28
    1952:	ec 51       	subi	r30, 0x1C	; 28
    1954:	ff 4f       	sbci	r31, 0xFF	; 255
    1956:	60 81       	ld	r22, Z
    1958:	71 81       	ldd	r23, Z+1	; 0x01
    195a:	82 81       	ldd	r24, Z+2	; 0x02
    195c:	93 81       	ldd	r25, Z+3	; 0x03
    195e:	20 e0       	ldi	r18, 0x00	; 0
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	4a e7       	ldi	r20, 0x7A	; 122
    1964:	55 e4       	ldi	r21, 0x45	; 69
    1966:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
    196a:	dc 01       	movw	r26, r24
    196c:	cb 01       	movw	r24, r22
    196e:	f8 01       	movw	r30, r16
    1970:	80 83       	st	Z, r24
    1972:	91 83       	std	Z+1, r25	; 0x01
    1974:	a2 83       	std	Z+2, r26	; 0x02
    1976:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1978:	fe 01       	movw	r30, r28
    197a:	e0 52       	subi	r30, 0x20	; 32
    197c:	ff 4f       	sbci	r31, 0xFF	; 255
    197e:	60 81       	ld	r22, Z
    1980:	71 81       	ldd	r23, Z+1	; 0x01
    1982:	82 81       	ldd	r24, Z+2	; 0x02
    1984:	93 81       	ldd	r25, Z+3	; 0x03
    1986:	20 e0       	ldi	r18, 0x00	; 0
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	40 e8       	ldi	r20, 0x80	; 128
    198c:	5f e3       	ldi	r21, 0x3F	; 63
    198e:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__cmpsf2>
    1992:	88 23       	and	r24, r24
    1994:	44 f4       	brge	.+16     	; 0x19a6 <__stack+0x1147>
		__ticks = 1;
    1996:	fe 01       	movw	r30, r28
    1998:	e2 52       	subi	r30, 0x22	; 34
    199a:	ff 4f       	sbci	r31, 0xFF	; 255
    199c:	81 e0       	ldi	r24, 0x01	; 1
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	91 83       	std	Z+1, r25	; 0x01
    19a2:	80 83       	st	Z, r24
    19a4:	64 c0       	rjmp	.+200    	; 0x1a6e <__stack+0x120f>
	else if (__tmp > 65535)
    19a6:	fe 01       	movw	r30, r28
    19a8:	e0 52       	subi	r30, 0x20	; 32
    19aa:	ff 4f       	sbci	r31, 0xFF	; 255
    19ac:	60 81       	ld	r22, Z
    19ae:	71 81       	ldd	r23, Z+1	; 0x01
    19b0:	82 81       	ldd	r24, Z+2	; 0x02
    19b2:	93 81       	ldd	r25, Z+3	; 0x03
    19b4:	20 e0       	ldi	r18, 0x00	; 0
    19b6:	3f ef       	ldi	r19, 0xFF	; 255
    19b8:	4f e7       	ldi	r20, 0x7F	; 127
    19ba:	57 e4       	ldi	r21, 0x47	; 71
    19bc:	0e 94 76 26 	call	0x4cec	; 0x4cec <__gesf2>
    19c0:	18 16       	cp	r1, r24
    19c2:	0c f0       	brlt	.+2      	; 0x19c6 <__stack+0x1167>
    19c4:	43 c0       	rjmp	.+134    	; 0x1a4c <__stack+0x11ed>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19c6:	fe 01       	movw	r30, r28
    19c8:	ec 51       	subi	r30, 0x1C	; 28
    19ca:	ff 4f       	sbci	r31, 0xFF	; 255
    19cc:	60 81       	ld	r22, Z
    19ce:	71 81       	ldd	r23, Z+1	; 0x01
    19d0:	82 81       	ldd	r24, Z+2	; 0x02
    19d2:	93 81       	ldd	r25, Z+3	; 0x03
    19d4:	20 e0       	ldi	r18, 0x00	; 0
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	40 e2       	ldi	r20, 0x20	; 32
    19da:	51 e4       	ldi	r21, 0x41	; 65
    19dc:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
    19e0:	dc 01       	movw	r26, r24
    19e2:	cb 01       	movw	r24, r22
    19e4:	8e 01       	movw	r16, r28
    19e6:	02 52       	subi	r16, 0x22	; 34
    19e8:	1f 4f       	sbci	r17, 0xFF	; 255
    19ea:	bc 01       	movw	r22, r24
    19ec:	cd 01       	movw	r24, r26
    19ee:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
    19f2:	dc 01       	movw	r26, r24
    19f4:	cb 01       	movw	r24, r22
    19f6:	f8 01       	movw	r30, r16
    19f8:	91 83       	std	Z+1, r25	; 0x01
    19fa:	80 83       	st	Z, r24
    19fc:	1f c0       	rjmp	.+62     	; 0x1a3c <__stack+0x11dd>
    19fe:	fe 01       	movw	r30, r28
    1a00:	e4 52       	subi	r30, 0x24	; 36
    1a02:	ff 4f       	sbci	r31, 0xFF	; 255
    1a04:	80 e9       	ldi	r24, 0x90	; 144
    1a06:	91 e0       	ldi	r25, 0x01	; 1
    1a08:	91 83       	std	Z+1, r25	; 0x01
    1a0a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a0c:	fe 01       	movw	r30, r28
    1a0e:	e4 52       	subi	r30, 0x24	; 36
    1a10:	ff 4f       	sbci	r31, 0xFF	; 255
    1a12:	80 81       	ld	r24, Z
    1a14:	91 81       	ldd	r25, Z+1	; 0x01
    1a16:	01 97       	sbiw	r24, 0x01	; 1
    1a18:	f1 f7       	brne	.-4      	; 0x1a16 <__stack+0x11b7>
    1a1a:	fe 01       	movw	r30, r28
    1a1c:	e4 52       	subi	r30, 0x24	; 36
    1a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a20:	91 83       	std	Z+1, r25	; 0x01
    1a22:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a24:	de 01       	movw	r26, r28
    1a26:	a2 52       	subi	r26, 0x22	; 34
    1a28:	bf 4f       	sbci	r27, 0xFF	; 255
    1a2a:	fe 01       	movw	r30, r28
    1a2c:	e2 52       	subi	r30, 0x22	; 34
    1a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a30:	80 81       	ld	r24, Z
    1a32:	91 81       	ldd	r25, Z+1	; 0x01
    1a34:	01 97       	sbiw	r24, 0x01	; 1
    1a36:	11 96       	adiw	r26, 0x01	; 1
    1a38:	9c 93       	st	X, r25
    1a3a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a3c:	fe 01       	movw	r30, r28
    1a3e:	e2 52       	subi	r30, 0x22	; 34
    1a40:	ff 4f       	sbci	r31, 0xFF	; 255
    1a42:	80 81       	ld	r24, Z
    1a44:	91 81       	ldd	r25, Z+1	; 0x01
    1a46:	00 97       	sbiw	r24, 0x00	; 0
    1a48:	d1 f6       	brne	.-76     	; 0x19fe <__stack+0x119f>
    1a4a:	4b c0       	rjmp	.+150    	; 0x1ae2 <__stack+0x1283>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a4c:	8e 01       	movw	r16, r28
    1a4e:	02 52       	subi	r16, 0x22	; 34
    1a50:	1f 4f       	sbci	r17, 0xFF	; 255
    1a52:	fe 01       	movw	r30, r28
    1a54:	e0 52       	subi	r30, 0x20	; 32
    1a56:	ff 4f       	sbci	r31, 0xFF	; 255
    1a58:	60 81       	ld	r22, Z
    1a5a:	71 81       	ldd	r23, Z+1	; 0x01
    1a5c:	82 81       	ldd	r24, Z+2	; 0x02
    1a5e:	93 81       	ldd	r25, Z+3	; 0x03
    1a60:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
    1a64:	dc 01       	movw	r26, r24
    1a66:	cb 01       	movw	r24, r22
    1a68:	f8 01       	movw	r30, r16
    1a6a:	91 83       	std	Z+1, r25	; 0x01
    1a6c:	80 83       	st	Z, r24
    1a6e:	de 01       	movw	r26, r28
    1a70:	a6 52       	subi	r26, 0x26	; 38
    1a72:	bf 4f       	sbci	r27, 0xFF	; 255
    1a74:	fe 01       	movw	r30, r28
    1a76:	e2 52       	subi	r30, 0x22	; 34
    1a78:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7a:	80 81       	ld	r24, Z
    1a7c:	91 81       	ldd	r25, Z+1	; 0x01
    1a7e:	11 96       	adiw	r26, 0x01	; 1
    1a80:	9c 93       	st	X, r25
    1a82:	8e 93       	st	-X, r24
    1a84:	fe 01       	movw	r30, r28
    1a86:	e6 52       	subi	r30, 0x26	; 38
    1a88:	ff 4f       	sbci	r31, 0xFF	; 255
    1a8a:	80 81       	ld	r24, Z
    1a8c:	91 81       	ldd	r25, Z+1	; 0x01
    1a8e:	01 97       	sbiw	r24, 0x01	; 1
    1a90:	f1 f7       	brne	.-4      	; 0x1a8e <__stack+0x122f>
    1a92:	fe 01       	movw	r30, r28
    1a94:	e6 52       	subi	r30, 0x26	; 38
    1a96:	ff 4f       	sbci	r31, 0xFF	; 255
    1a98:	91 83       	std	Z+1, r25	; 0x01
    1a9a:	80 83       	st	Z, r24
    1a9c:	22 c0       	rjmp	.+68     	; 0x1ae2 <__stack+0x1283>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1a9e:	8e 01       	movw	r16, r28
    1aa0:	08 51       	subi	r16, 0x18	; 24
    1aa2:	1f 4f       	sbci	r17, 0xFF	; 255
    1aa4:	fe 01       	movw	r30, r28
    1aa6:	e7 51       	subi	r30, 0x17	; 23
    1aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aaa:	60 81       	ld	r22, Z
    1aac:	71 81       	ldd	r23, Z+1	; 0x01
    1aae:	82 81       	ldd	r24, Z+2	; 0x02
    1ab0:	93 81       	ldd	r25, Z+3	; 0x03
    1ab2:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
    1ab6:	dc 01       	movw	r26, r24
    1ab8:	cb 01       	movw	r24, r22
    1aba:	f8 01       	movw	r30, r16
    1abc:	80 83       	st	Z, r24
    1abe:	de 01       	movw	r26, r28
    1ac0:	a7 52       	subi	r26, 0x27	; 39
    1ac2:	bf 4f       	sbci	r27, 0xFF	; 255
    1ac4:	fe 01       	movw	r30, r28
    1ac6:	e8 51       	subi	r30, 0x18	; 24
    1ac8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aca:	80 81       	ld	r24, Z
    1acc:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ace:	fe 01       	movw	r30, r28
    1ad0:	e7 52       	subi	r30, 0x27	; 39
    1ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad4:	80 81       	ld	r24, Z
    1ad6:	8a 95       	dec	r24
    1ad8:	f1 f7       	brne	.-4      	; 0x1ad6 <__stack+0x1277>
    1ada:	fe 01       	movw	r30, r28
    1adc:	e7 52       	subi	r30, 0x27	; 39
    1ade:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae0:	80 83       	st	Z, r24
	  if(CHK(PS2IN,PS2dat)) SET(PS2data5,i);
    1ae2:	e3 e3       	ldi	r30, 0x33	; 51
    1ae4:	f0 e0       	ldi	r31, 0x00	; 0
    1ae6:	80 81       	ld	r24, Z
    1ae8:	88 2f       	mov	r24, r24
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	82 70       	andi	r24, 0x02	; 2
    1aee:	90 70       	andi	r25, 0x00	; 0
    1af0:	00 97       	sbiw	r24, 0x00	; 0
    1af2:	91 f0       	breq	.+36     	; 0x1b18 <__stack+0x12b9>
    1af4:	80 91 63 00 	lds	r24, 0x0063
    1af8:	28 2f       	mov	r18, r24
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	81 e0       	ldi	r24, 0x01	; 1
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	02 2e       	mov	r0, r18
    1b02:	02 c0       	rjmp	.+4      	; 0x1b08 <__stack+0x12a9>
    1b04:	88 0f       	add	r24, r24
    1b06:	99 1f       	adc	r25, r25
    1b08:	0a 94       	dec	r0
    1b0a:	e2 f7       	brpl	.-8      	; 0x1b04 <__stack+0x12a5>
    1b0c:	98 2f       	mov	r25, r24
    1b0e:	80 91 66 00 	lds	r24, 0x0066
    1b12:	89 2b       	or	r24, r25
    1b14:	80 93 66 00 	sts	0x0066, r24
      SET(PS2PORT,PS2clk);
    1b18:	a5 e3       	ldi	r26, 0x35	; 53
    1b1a:	b0 e0       	ldi	r27, 0x00	; 0
    1b1c:	e5 e3       	ldi	r30, 0x35	; 53
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	80 81       	ld	r24, Z
    1b22:	81 60       	ori	r24, 0x01	; 1
    1b24:	8c 93       	st	X, r24
   }
   SET(PS2PORT,PS2cmd); 
   _delay_us(1);
   
   PS2data5=0;
   for(i=0;i<8;i++) // 5 byte digital
    1b26:	80 91 63 00 	lds	r24, 0x0063
    1b2a:	8f 5f       	subi	r24, 0xFF	; 255
    1b2c:	80 93 63 00 	sts	0x0063, r24
    1b30:	80 91 63 00 	lds	r24, 0x0063
    1b34:	88 30       	cpi	r24, 0x08	; 8
    1b36:	08 f4       	brcc	.+2      	; 0x1b3a <__stack+0x12db>
    1b38:	9d ce       	rjmp	.-710    	; 0x1874 <__stack+0x1015>
      CLR(PS2PORT,PS2cmd);
      CLR(PS2PORT,PS2clk);_delay_us(1);
	  if(CHK(PS2IN,PS2dat)) SET(PS2data5,i);
      SET(PS2PORT,PS2clk);
   }
   SET(PS2PORT,PS2cmd); 
    1b3a:	a5 e3       	ldi	r26, 0x35	; 53
    1b3c:	b0 e0       	ldi	r27, 0x00	; 0
    1b3e:	e5 e3       	ldi	r30, 0x35	; 53
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	80 81       	ld	r24, Z
    1b44:	84 60       	ori	r24, 0x04	; 4
    1b46:	8c 93       	st	X, r24
    1b48:	fe 01       	movw	r30, r28
    1b4a:	eb 52       	subi	r30, 0x2B	; 43
    1b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4e:	80 e0       	ldi	r24, 0x00	; 0
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	a0 e8       	ldi	r26, 0x80	; 128
    1b54:	bf e3       	ldi	r27, 0x3F	; 63
    1b56:	80 83       	st	Z, r24
    1b58:	91 83       	std	Z+1, r25	; 0x01
    1b5a:	a2 83       	std	Z+2, r26	; 0x02
    1b5c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b5e:	8e 01       	movw	r16, r28
    1b60:	0f 52       	subi	r16, 0x2F	; 47
    1b62:	1f 4f       	sbci	r17, 0xFF	; 255
    1b64:	fe 01       	movw	r30, r28
    1b66:	eb 52       	subi	r30, 0x2B	; 43
    1b68:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6a:	60 81       	ld	r22, Z
    1b6c:	71 81       	ldd	r23, Z+1	; 0x01
    1b6e:	82 81       	ldd	r24, Z+2	; 0x02
    1b70:	93 81       	ldd	r25, Z+3	; 0x03
    1b72:	2b ea       	ldi	r18, 0xAB	; 171
    1b74:	3a ea       	ldi	r19, 0xAA	; 170
    1b76:	4a ea       	ldi	r20, 0xAA	; 170
    1b78:	50 e4       	ldi	r21, 0x40	; 64
    1b7a:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
    1b7e:	dc 01       	movw	r26, r24
    1b80:	cb 01       	movw	r24, r22
    1b82:	f8 01       	movw	r30, r16
    1b84:	80 83       	st	Z, r24
    1b86:	91 83       	std	Z+1, r25	; 0x01
    1b88:	a2 83       	std	Z+2, r26	; 0x02
    1b8a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b8c:	fe 01       	movw	r30, r28
    1b8e:	ef 52       	subi	r30, 0x2F	; 47
    1b90:	ff 4f       	sbci	r31, 0xFF	; 255
    1b92:	60 81       	ld	r22, Z
    1b94:	71 81       	ldd	r23, Z+1	; 0x01
    1b96:	82 81       	ldd	r24, Z+2	; 0x02
    1b98:	93 81       	ldd	r25, Z+3	; 0x03
    1b9a:	20 e0       	ldi	r18, 0x00	; 0
    1b9c:	30 e0       	ldi	r19, 0x00	; 0
    1b9e:	40 e8       	ldi	r20, 0x80	; 128
    1ba0:	5f e3       	ldi	r21, 0x3F	; 63
    1ba2:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__cmpsf2>
    1ba6:	88 23       	and	r24, r24
    1ba8:	34 f4       	brge	.+12     	; 0x1bb6 <__stack+0x1357>
		__ticks = 1;
    1baa:	fe 01       	movw	r30, r28
    1bac:	e0 53       	subi	r30, 0x30	; 48
    1bae:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb0:	81 e0       	ldi	r24, 0x01	; 1
    1bb2:	80 83       	st	Z, r24
    1bb4:	e0 c0       	rjmp	.+448    	; 0x1d76 <__stack+0x1517>
	else if (__tmp > 255)
    1bb6:	fe 01       	movw	r30, r28
    1bb8:	ef 52       	subi	r30, 0x2F	; 47
    1bba:	ff 4f       	sbci	r31, 0xFF	; 255
    1bbc:	60 81       	ld	r22, Z
    1bbe:	71 81       	ldd	r23, Z+1	; 0x01
    1bc0:	82 81       	ldd	r24, Z+2	; 0x02
    1bc2:	93 81       	ldd	r25, Z+3	; 0x03
    1bc4:	20 e0       	ldi	r18, 0x00	; 0
    1bc6:	30 e0       	ldi	r19, 0x00	; 0
    1bc8:	4f e7       	ldi	r20, 0x7F	; 127
    1bca:	53 e4       	ldi	r21, 0x43	; 67
    1bcc:	0e 94 76 26 	call	0x4cec	; 0x4cec <__gesf2>
    1bd0:	18 16       	cp	r1, r24
    1bd2:	0c f0       	brlt	.+2      	; 0x1bd6 <__stack+0x1377>
    1bd4:	c0 c0       	rjmp	.+384    	; 0x1d56 <__stack+0x14f7>
	{
		_delay_ms(__us / 1000.0);
    1bd6:	fe 01       	movw	r30, r28
    1bd8:	eb 52       	subi	r30, 0x2B	; 43
    1bda:	ff 4f       	sbci	r31, 0xFF	; 255
    1bdc:	60 81       	ld	r22, Z
    1bde:	71 81       	ldd	r23, Z+1	; 0x01
    1be0:	82 81       	ldd	r24, Z+2	; 0x02
    1be2:	93 81       	ldd	r25, Z+3	; 0x03
    1be4:	20 e0       	ldi	r18, 0x00	; 0
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	4a e7       	ldi	r20, 0x7A	; 122
    1bea:	54 e4       	ldi	r21, 0x44	; 68
    1bec:	0e 94 6d 25 	call	0x4ada	; 0x4ada <__divsf3>
    1bf0:	dc 01       	movw	r26, r24
    1bf2:	cb 01       	movw	r24, r22
    1bf4:	fe 01       	movw	r30, r28
    1bf6:	e4 53       	subi	r30, 0x34	; 52
    1bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfa:	80 83       	st	Z, r24
    1bfc:	91 83       	std	Z+1, r25	; 0x01
    1bfe:	a2 83       	std	Z+2, r26	; 0x02
    1c00:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c02:	8e 01       	movw	r16, r28
    1c04:	08 53       	subi	r16, 0x38	; 56
    1c06:	1f 4f       	sbci	r17, 0xFF	; 255
    1c08:	fe 01       	movw	r30, r28
    1c0a:	e4 53       	subi	r30, 0x34	; 52
    1c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0e:	60 81       	ld	r22, Z
    1c10:	71 81       	ldd	r23, Z+1	; 0x01
    1c12:	82 81       	ldd	r24, Z+2	; 0x02
    1c14:	93 81       	ldd	r25, Z+3	; 0x03
    1c16:	20 e0       	ldi	r18, 0x00	; 0
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	4a e7       	ldi	r20, 0x7A	; 122
    1c1c:	55 e4       	ldi	r21, 0x45	; 69
    1c1e:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
    1c22:	dc 01       	movw	r26, r24
    1c24:	cb 01       	movw	r24, r22
    1c26:	f8 01       	movw	r30, r16
    1c28:	80 83       	st	Z, r24
    1c2a:	91 83       	std	Z+1, r25	; 0x01
    1c2c:	a2 83       	std	Z+2, r26	; 0x02
    1c2e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c30:	fe 01       	movw	r30, r28
    1c32:	e8 53       	subi	r30, 0x38	; 56
    1c34:	ff 4f       	sbci	r31, 0xFF	; 255
    1c36:	60 81       	ld	r22, Z
    1c38:	71 81       	ldd	r23, Z+1	; 0x01
    1c3a:	82 81       	ldd	r24, Z+2	; 0x02
    1c3c:	93 81       	ldd	r25, Z+3	; 0x03
    1c3e:	20 e0       	ldi	r18, 0x00	; 0
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	40 e8       	ldi	r20, 0x80	; 128
    1c44:	5f e3       	ldi	r21, 0x3F	; 63
    1c46:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__cmpsf2>
    1c4a:	88 23       	and	r24, r24
    1c4c:	44 f4       	brge	.+16     	; 0x1c5e <__stack+0x13ff>
		__ticks = 1;
    1c4e:	fe 01       	movw	r30, r28
    1c50:	ea 53       	subi	r30, 0x3A	; 58
    1c52:	ff 4f       	sbci	r31, 0xFF	; 255
    1c54:	81 e0       	ldi	r24, 0x01	; 1
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	91 83       	std	Z+1, r25	; 0x01
    1c5a:	80 83       	st	Z, r24
    1c5c:	64 c0       	rjmp	.+200    	; 0x1d26 <__stack+0x14c7>
	else if (__tmp > 65535)
    1c5e:	fe 01       	movw	r30, r28
    1c60:	e8 53       	subi	r30, 0x38	; 56
    1c62:	ff 4f       	sbci	r31, 0xFF	; 255
    1c64:	60 81       	ld	r22, Z
    1c66:	71 81       	ldd	r23, Z+1	; 0x01
    1c68:	82 81       	ldd	r24, Z+2	; 0x02
    1c6a:	93 81       	ldd	r25, Z+3	; 0x03
    1c6c:	20 e0       	ldi	r18, 0x00	; 0
    1c6e:	3f ef       	ldi	r19, 0xFF	; 255
    1c70:	4f e7       	ldi	r20, 0x7F	; 127
    1c72:	57 e4       	ldi	r21, 0x47	; 71
    1c74:	0e 94 76 26 	call	0x4cec	; 0x4cec <__gesf2>
    1c78:	18 16       	cp	r1, r24
    1c7a:	0c f0       	brlt	.+2      	; 0x1c7e <__stack+0x141f>
    1c7c:	43 c0       	rjmp	.+134    	; 0x1d04 <__stack+0x14a5>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c7e:	fe 01       	movw	r30, r28
    1c80:	e4 53       	subi	r30, 0x34	; 52
    1c82:	ff 4f       	sbci	r31, 0xFF	; 255
    1c84:	60 81       	ld	r22, Z
    1c86:	71 81       	ldd	r23, Z+1	; 0x01
    1c88:	82 81       	ldd	r24, Z+2	; 0x02
    1c8a:	93 81       	ldd	r25, Z+3	; 0x03
    1c8c:	20 e0       	ldi	r18, 0x00	; 0
    1c8e:	30 e0       	ldi	r19, 0x00	; 0
    1c90:	40 e2       	ldi	r20, 0x20	; 32
    1c92:	51 e4       	ldi	r21, 0x41	; 65
    1c94:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
    1c98:	dc 01       	movw	r26, r24
    1c9a:	cb 01       	movw	r24, r22
    1c9c:	8e 01       	movw	r16, r28
    1c9e:	0a 53       	subi	r16, 0x3A	; 58
    1ca0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ca2:	bc 01       	movw	r22, r24
    1ca4:	cd 01       	movw	r24, r26
    1ca6:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
    1caa:	dc 01       	movw	r26, r24
    1cac:	cb 01       	movw	r24, r22
    1cae:	f8 01       	movw	r30, r16
    1cb0:	91 83       	std	Z+1, r25	; 0x01
    1cb2:	80 83       	st	Z, r24
    1cb4:	1f c0       	rjmp	.+62     	; 0x1cf4 <__stack+0x1495>
    1cb6:	fe 01       	movw	r30, r28
    1cb8:	ec 53       	subi	r30, 0x3C	; 60
    1cba:	ff 4f       	sbci	r31, 0xFF	; 255
    1cbc:	80 e9       	ldi	r24, 0x90	; 144
    1cbe:	91 e0       	ldi	r25, 0x01	; 1
    1cc0:	91 83       	std	Z+1, r25	; 0x01
    1cc2:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1cc4:	fe 01       	movw	r30, r28
    1cc6:	ec 53       	subi	r30, 0x3C	; 60
    1cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cca:	80 81       	ld	r24, Z
    1ccc:	91 81       	ldd	r25, Z+1	; 0x01
    1cce:	01 97       	sbiw	r24, 0x01	; 1
    1cd0:	f1 f7       	brne	.-4      	; 0x1cce <__stack+0x146f>
    1cd2:	fe 01       	movw	r30, r28
    1cd4:	ec 53       	subi	r30, 0x3C	; 60
    1cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd8:	91 83       	std	Z+1, r25	; 0x01
    1cda:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cdc:	de 01       	movw	r26, r28
    1cde:	aa 53       	subi	r26, 0x3A	; 58
    1ce0:	bf 4f       	sbci	r27, 0xFF	; 255
    1ce2:	fe 01       	movw	r30, r28
    1ce4:	ea 53       	subi	r30, 0x3A	; 58
    1ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce8:	80 81       	ld	r24, Z
    1cea:	91 81       	ldd	r25, Z+1	; 0x01
    1cec:	01 97       	sbiw	r24, 0x01	; 1
    1cee:	11 96       	adiw	r26, 0x01	; 1
    1cf0:	9c 93       	st	X, r25
    1cf2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cf4:	fe 01       	movw	r30, r28
    1cf6:	ea 53       	subi	r30, 0x3A	; 58
    1cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfa:	80 81       	ld	r24, Z
    1cfc:	91 81       	ldd	r25, Z+1	; 0x01
    1cfe:	00 97       	sbiw	r24, 0x00	; 0
    1d00:	d1 f6       	brne	.-76     	; 0x1cb6 <__stack+0x1457>
    1d02:	4b c0       	rjmp	.+150    	; 0x1d9a <__stack+0x153b>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d04:	8e 01       	movw	r16, r28
    1d06:	0a 53       	subi	r16, 0x3A	; 58
    1d08:	1f 4f       	sbci	r17, 0xFF	; 255
    1d0a:	fe 01       	movw	r30, r28
    1d0c:	e8 53       	subi	r30, 0x38	; 56
    1d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d10:	60 81       	ld	r22, Z
    1d12:	71 81       	ldd	r23, Z+1	; 0x01
    1d14:	82 81       	ldd	r24, Z+2	; 0x02
    1d16:	93 81       	ldd	r25, Z+3	; 0x03
    1d18:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
    1d1c:	dc 01       	movw	r26, r24
    1d1e:	cb 01       	movw	r24, r22
    1d20:	f8 01       	movw	r30, r16
    1d22:	91 83       	std	Z+1, r25	; 0x01
    1d24:	80 83       	st	Z, r24
    1d26:	de 01       	movw	r26, r28
    1d28:	ae 53       	subi	r26, 0x3E	; 62
    1d2a:	bf 4f       	sbci	r27, 0xFF	; 255
    1d2c:	fe 01       	movw	r30, r28
    1d2e:	ea 53       	subi	r30, 0x3A	; 58
    1d30:	ff 4f       	sbci	r31, 0xFF	; 255
    1d32:	80 81       	ld	r24, Z
    1d34:	91 81       	ldd	r25, Z+1	; 0x01
    1d36:	11 96       	adiw	r26, 0x01	; 1
    1d38:	9c 93       	st	X, r25
    1d3a:	8e 93       	st	-X, r24
    1d3c:	fe 01       	movw	r30, r28
    1d3e:	ee 53       	subi	r30, 0x3E	; 62
    1d40:	ff 4f       	sbci	r31, 0xFF	; 255
    1d42:	80 81       	ld	r24, Z
    1d44:	91 81       	ldd	r25, Z+1	; 0x01
    1d46:	01 97       	sbiw	r24, 0x01	; 1
    1d48:	f1 f7       	brne	.-4      	; 0x1d46 <__stack+0x14e7>
    1d4a:	fe 01       	movw	r30, r28
    1d4c:	ee 53       	subi	r30, 0x3E	; 62
    1d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d50:	91 83       	std	Z+1, r25	; 0x01
    1d52:	80 83       	st	Z, r24
    1d54:	22 c0       	rjmp	.+68     	; 0x1d9a <__stack+0x153b>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1d56:	8e 01       	movw	r16, r28
    1d58:	00 53       	subi	r16, 0x30	; 48
    1d5a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d5c:	fe 01       	movw	r30, r28
    1d5e:	ef 52       	subi	r30, 0x2F	; 47
    1d60:	ff 4f       	sbci	r31, 0xFF	; 255
    1d62:	60 81       	ld	r22, Z
    1d64:	71 81       	ldd	r23, Z+1	; 0x01
    1d66:	82 81       	ldd	r24, Z+2	; 0x02
    1d68:	93 81       	ldd	r25, Z+3	; 0x03
    1d6a:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
    1d6e:	dc 01       	movw	r26, r24
    1d70:	cb 01       	movw	r24, r22
    1d72:	f8 01       	movw	r30, r16
    1d74:	80 83       	st	Z, r24
    1d76:	de 01       	movw	r26, r28
    1d78:	af 53       	subi	r26, 0x3F	; 63
    1d7a:	bf 4f       	sbci	r27, 0xFF	; 255
    1d7c:	fe 01       	movw	r30, r28
    1d7e:	e0 53       	subi	r30, 0x30	; 48
    1d80:	ff 4f       	sbci	r31, 0xFF	; 255
    1d82:	80 81       	ld	r24, Z
    1d84:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d86:	fe 01       	movw	r30, r28
    1d88:	ef 53       	subi	r30, 0x3F	; 63
    1d8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8c:	80 81       	ld	r24, Z
    1d8e:	8a 95       	dec	r24
    1d90:	f1 f7       	brne	.-4      	; 0x1d8e <__stack+0x152f>
    1d92:	fe 01       	movw	r30, r28
    1d94:	ef 53       	subi	r30, 0x3F	; 63
    1d96:	ff 4f       	sbci	r31, 0xFF	; 255
    1d98:	80 83       	st	Z, r24
   _delay_us(1);
   
   PS2data6=0;
    1d9a:	10 92 64 00 	sts	0x0064, r1
   for(i=0;i<8;i++) // 6 byte x axis right joy
    1d9e:	10 92 63 00 	sts	0x0063, r1
    1da2:	5e c1       	rjmp	.+700    	; 0x2060 <__stack+0x1801>
   {
      CLR(PS2PORT,PS2cmd);
    1da4:	a5 e3       	ldi	r26, 0x35	; 53
    1da6:	b0 e0       	ldi	r27, 0x00	; 0
    1da8:	e5 e3       	ldi	r30, 0x35	; 53
    1daa:	f0 e0       	ldi	r31, 0x00	; 0
    1dac:	80 81       	ld	r24, Z
    1dae:	8b 7f       	andi	r24, 0xFB	; 251
    1db0:	8c 93       	st	X, r24
      CLR(PS2PORT,PS2clk);_delay_us(1);
    1db2:	a5 e3       	ldi	r26, 0x35	; 53
    1db4:	b0 e0       	ldi	r27, 0x00	; 0
    1db6:	e5 e3       	ldi	r30, 0x35	; 53
    1db8:	f0 e0       	ldi	r31, 0x00	; 0
    1dba:	80 81       	ld	r24, Z
    1dbc:	8e 7f       	andi	r24, 0xFE	; 254
    1dbe:	8c 93       	st	X, r24
    1dc0:	fe 01       	movw	r30, r28
    1dc2:	e3 54       	subi	r30, 0x43	; 67
    1dc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc6:	80 e0       	ldi	r24, 0x00	; 0
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	a0 e8       	ldi	r26, 0x80	; 128
    1dcc:	bf e3       	ldi	r27, 0x3F	; 63
    1dce:	80 83       	st	Z, r24
    1dd0:	91 83       	std	Z+1, r25	; 0x01
    1dd2:	a2 83       	std	Z+2, r26	; 0x02
    1dd4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1dd6:	8e 01       	movw	r16, r28
    1dd8:	07 54       	subi	r16, 0x47	; 71
    1dda:	1f 4f       	sbci	r17, 0xFF	; 255
    1ddc:	fe 01       	movw	r30, r28
    1dde:	e3 54       	subi	r30, 0x43	; 67
    1de0:	ff 4f       	sbci	r31, 0xFF	; 255
    1de2:	60 81       	ld	r22, Z
    1de4:	71 81       	ldd	r23, Z+1	; 0x01
    1de6:	82 81       	ldd	r24, Z+2	; 0x02
    1de8:	93 81       	ldd	r25, Z+3	; 0x03
    1dea:	2b ea       	ldi	r18, 0xAB	; 171
    1dec:	3a ea       	ldi	r19, 0xAA	; 170
    1dee:	4a ea       	ldi	r20, 0xAA	; 170
    1df0:	50 e4       	ldi	r21, 0x40	; 64
    1df2:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
    1df6:	dc 01       	movw	r26, r24
    1df8:	cb 01       	movw	r24, r22
    1dfa:	f8 01       	movw	r30, r16
    1dfc:	80 83       	st	Z, r24
    1dfe:	91 83       	std	Z+1, r25	; 0x01
    1e00:	a2 83       	std	Z+2, r26	; 0x02
    1e02:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e04:	fe 01       	movw	r30, r28
    1e06:	e7 54       	subi	r30, 0x47	; 71
    1e08:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0a:	60 81       	ld	r22, Z
    1e0c:	71 81       	ldd	r23, Z+1	; 0x01
    1e0e:	82 81       	ldd	r24, Z+2	; 0x02
    1e10:	93 81       	ldd	r25, Z+3	; 0x03
    1e12:	20 e0       	ldi	r18, 0x00	; 0
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	40 e8       	ldi	r20, 0x80	; 128
    1e18:	5f e3       	ldi	r21, 0x3F	; 63
    1e1a:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__cmpsf2>
    1e1e:	88 23       	and	r24, r24
    1e20:	34 f4       	brge	.+12     	; 0x1e2e <__stack+0x15cf>
		__ticks = 1;
    1e22:	fe 01       	movw	r30, r28
    1e24:	e8 54       	subi	r30, 0x48	; 72
    1e26:	ff 4f       	sbci	r31, 0xFF	; 255
    1e28:	81 e0       	ldi	r24, 0x01	; 1
    1e2a:	80 83       	st	Z, r24
    1e2c:	e0 c0       	rjmp	.+448    	; 0x1fee <__stack+0x178f>
	else if (__tmp > 255)
    1e2e:	fe 01       	movw	r30, r28
    1e30:	e7 54       	subi	r30, 0x47	; 71
    1e32:	ff 4f       	sbci	r31, 0xFF	; 255
    1e34:	60 81       	ld	r22, Z
    1e36:	71 81       	ldd	r23, Z+1	; 0x01
    1e38:	82 81       	ldd	r24, Z+2	; 0x02
    1e3a:	93 81       	ldd	r25, Z+3	; 0x03
    1e3c:	20 e0       	ldi	r18, 0x00	; 0
    1e3e:	30 e0       	ldi	r19, 0x00	; 0
    1e40:	4f e7       	ldi	r20, 0x7F	; 127
    1e42:	53 e4       	ldi	r21, 0x43	; 67
    1e44:	0e 94 76 26 	call	0x4cec	; 0x4cec <__gesf2>
    1e48:	18 16       	cp	r1, r24
    1e4a:	0c f0       	brlt	.+2      	; 0x1e4e <__stack+0x15ef>
    1e4c:	c0 c0       	rjmp	.+384    	; 0x1fce <__stack+0x176f>
	{
		_delay_ms(__us / 1000.0);
    1e4e:	fe 01       	movw	r30, r28
    1e50:	e3 54       	subi	r30, 0x43	; 67
    1e52:	ff 4f       	sbci	r31, 0xFF	; 255
    1e54:	60 81       	ld	r22, Z
    1e56:	71 81       	ldd	r23, Z+1	; 0x01
    1e58:	82 81       	ldd	r24, Z+2	; 0x02
    1e5a:	93 81       	ldd	r25, Z+3	; 0x03
    1e5c:	20 e0       	ldi	r18, 0x00	; 0
    1e5e:	30 e0       	ldi	r19, 0x00	; 0
    1e60:	4a e7       	ldi	r20, 0x7A	; 122
    1e62:	54 e4       	ldi	r21, 0x44	; 68
    1e64:	0e 94 6d 25 	call	0x4ada	; 0x4ada <__divsf3>
    1e68:	dc 01       	movw	r26, r24
    1e6a:	cb 01       	movw	r24, r22
    1e6c:	fe 01       	movw	r30, r28
    1e6e:	ec 54       	subi	r30, 0x4C	; 76
    1e70:	ff 4f       	sbci	r31, 0xFF	; 255
    1e72:	80 83       	st	Z, r24
    1e74:	91 83       	std	Z+1, r25	; 0x01
    1e76:	a2 83       	std	Z+2, r26	; 0x02
    1e78:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e7a:	8e 01       	movw	r16, r28
    1e7c:	00 55       	subi	r16, 0x50	; 80
    1e7e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e80:	fe 01       	movw	r30, r28
    1e82:	ec 54       	subi	r30, 0x4C	; 76
    1e84:	ff 4f       	sbci	r31, 0xFF	; 255
    1e86:	60 81       	ld	r22, Z
    1e88:	71 81       	ldd	r23, Z+1	; 0x01
    1e8a:	82 81       	ldd	r24, Z+2	; 0x02
    1e8c:	93 81       	ldd	r25, Z+3	; 0x03
    1e8e:	20 e0       	ldi	r18, 0x00	; 0
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	4a e7       	ldi	r20, 0x7A	; 122
    1e94:	55 e4       	ldi	r21, 0x45	; 69
    1e96:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
    1e9a:	dc 01       	movw	r26, r24
    1e9c:	cb 01       	movw	r24, r22
    1e9e:	f8 01       	movw	r30, r16
    1ea0:	80 83       	st	Z, r24
    1ea2:	91 83       	std	Z+1, r25	; 0x01
    1ea4:	a2 83       	std	Z+2, r26	; 0x02
    1ea6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ea8:	fe 01       	movw	r30, r28
    1eaa:	e0 55       	subi	r30, 0x50	; 80
    1eac:	ff 4f       	sbci	r31, 0xFF	; 255
    1eae:	60 81       	ld	r22, Z
    1eb0:	71 81       	ldd	r23, Z+1	; 0x01
    1eb2:	82 81       	ldd	r24, Z+2	; 0x02
    1eb4:	93 81       	ldd	r25, Z+3	; 0x03
    1eb6:	20 e0       	ldi	r18, 0x00	; 0
    1eb8:	30 e0       	ldi	r19, 0x00	; 0
    1eba:	40 e8       	ldi	r20, 0x80	; 128
    1ebc:	5f e3       	ldi	r21, 0x3F	; 63
    1ebe:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__cmpsf2>
    1ec2:	88 23       	and	r24, r24
    1ec4:	44 f4       	brge	.+16     	; 0x1ed6 <__stack+0x1677>
		__ticks = 1;
    1ec6:	fe 01       	movw	r30, r28
    1ec8:	e2 55       	subi	r30, 0x52	; 82
    1eca:	ff 4f       	sbci	r31, 0xFF	; 255
    1ecc:	81 e0       	ldi	r24, 0x01	; 1
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	91 83       	std	Z+1, r25	; 0x01
    1ed2:	80 83       	st	Z, r24
    1ed4:	64 c0       	rjmp	.+200    	; 0x1f9e <__stack+0x173f>
	else if (__tmp > 65535)
    1ed6:	fe 01       	movw	r30, r28
    1ed8:	e0 55       	subi	r30, 0x50	; 80
    1eda:	ff 4f       	sbci	r31, 0xFF	; 255
    1edc:	60 81       	ld	r22, Z
    1ede:	71 81       	ldd	r23, Z+1	; 0x01
    1ee0:	82 81       	ldd	r24, Z+2	; 0x02
    1ee2:	93 81       	ldd	r25, Z+3	; 0x03
    1ee4:	20 e0       	ldi	r18, 0x00	; 0
    1ee6:	3f ef       	ldi	r19, 0xFF	; 255
    1ee8:	4f e7       	ldi	r20, 0x7F	; 127
    1eea:	57 e4       	ldi	r21, 0x47	; 71
    1eec:	0e 94 76 26 	call	0x4cec	; 0x4cec <__gesf2>
    1ef0:	18 16       	cp	r1, r24
    1ef2:	0c f0       	brlt	.+2      	; 0x1ef6 <__stack+0x1697>
    1ef4:	43 c0       	rjmp	.+134    	; 0x1f7c <__stack+0x171d>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ef6:	fe 01       	movw	r30, r28
    1ef8:	ec 54       	subi	r30, 0x4C	; 76
    1efa:	ff 4f       	sbci	r31, 0xFF	; 255
    1efc:	60 81       	ld	r22, Z
    1efe:	71 81       	ldd	r23, Z+1	; 0x01
    1f00:	82 81       	ldd	r24, Z+2	; 0x02
    1f02:	93 81       	ldd	r25, Z+3	; 0x03
    1f04:	20 e0       	ldi	r18, 0x00	; 0
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	40 e2       	ldi	r20, 0x20	; 32
    1f0a:	51 e4       	ldi	r21, 0x41	; 65
    1f0c:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
    1f10:	dc 01       	movw	r26, r24
    1f12:	cb 01       	movw	r24, r22
    1f14:	8e 01       	movw	r16, r28
    1f16:	02 55       	subi	r16, 0x52	; 82
    1f18:	1f 4f       	sbci	r17, 0xFF	; 255
    1f1a:	bc 01       	movw	r22, r24
    1f1c:	cd 01       	movw	r24, r26
    1f1e:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
    1f22:	dc 01       	movw	r26, r24
    1f24:	cb 01       	movw	r24, r22
    1f26:	f8 01       	movw	r30, r16
    1f28:	91 83       	std	Z+1, r25	; 0x01
    1f2a:	80 83       	st	Z, r24
    1f2c:	1f c0       	rjmp	.+62     	; 0x1f6c <__stack+0x170d>
    1f2e:	fe 01       	movw	r30, r28
    1f30:	e4 55       	subi	r30, 0x54	; 84
    1f32:	ff 4f       	sbci	r31, 0xFF	; 255
    1f34:	80 e9       	ldi	r24, 0x90	; 144
    1f36:	91 e0       	ldi	r25, 0x01	; 1
    1f38:	91 83       	std	Z+1, r25	; 0x01
    1f3a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f3c:	fe 01       	movw	r30, r28
    1f3e:	e4 55       	subi	r30, 0x54	; 84
    1f40:	ff 4f       	sbci	r31, 0xFF	; 255
    1f42:	80 81       	ld	r24, Z
    1f44:	91 81       	ldd	r25, Z+1	; 0x01
    1f46:	01 97       	sbiw	r24, 0x01	; 1
    1f48:	f1 f7       	brne	.-4      	; 0x1f46 <__stack+0x16e7>
    1f4a:	fe 01       	movw	r30, r28
    1f4c:	e4 55       	subi	r30, 0x54	; 84
    1f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f50:	91 83       	std	Z+1, r25	; 0x01
    1f52:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f54:	de 01       	movw	r26, r28
    1f56:	a2 55       	subi	r26, 0x52	; 82
    1f58:	bf 4f       	sbci	r27, 0xFF	; 255
    1f5a:	fe 01       	movw	r30, r28
    1f5c:	e2 55       	subi	r30, 0x52	; 82
    1f5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f60:	80 81       	ld	r24, Z
    1f62:	91 81       	ldd	r25, Z+1	; 0x01
    1f64:	01 97       	sbiw	r24, 0x01	; 1
    1f66:	11 96       	adiw	r26, 0x01	; 1
    1f68:	9c 93       	st	X, r25
    1f6a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f6c:	fe 01       	movw	r30, r28
    1f6e:	e2 55       	subi	r30, 0x52	; 82
    1f70:	ff 4f       	sbci	r31, 0xFF	; 255
    1f72:	80 81       	ld	r24, Z
    1f74:	91 81       	ldd	r25, Z+1	; 0x01
    1f76:	00 97       	sbiw	r24, 0x00	; 0
    1f78:	d1 f6       	brne	.-76     	; 0x1f2e <__stack+0x16cf>
    1f7a:	4b c0       	rjmp	.+150    	; 0x2012 <__stack+0x17b3>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f7c:	8e 01       	movw	r16, r28
    1f7e:	02 55       	subi	r16, 0x52	; 82
    1f80:	1f 4f       	sbci	r17, 0xFF	; 255
    1f82:	fe 01       	movw	r30, r28
    1f84:	e0 55       	subi	r30, 0x50	; 80
    1f86:	ff 4f       	sbci	r31, 0xFF	; 255
    1f88:	60 81       	ld	r22, Z
    1f8a:	71 81       	ldd	r23, Z+1	; 0x01
    1f8c:	82 81       	ldd	r24, Z+2	; 0x02
    1f8e:	93 81       	ldd	r25, Z+3	; 0x03
    1f90:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
    1f94:	dc 01       	movw	r26, r24
    1f96:	cb 01       	movw	r24, r22
    1f98:	f8 01       	movw	r30, r16
    1f9a:	91 83       	std	Z+1, r25	; 0x01
    1f9c:	80 83       	st	Z, r24
    1f9e:	de 01       	movw	r26, r28
    1fa0:	a6 55       	subi	r26, 0x56	; 86
    1fa2:	bf 4f       	sbci	r27, 0xFF	; 255
    1fa4:	fe 01       	movw	r30, r28
    1fa6:	e2 55       	subi	r30, 0x52	; 82
    1fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    1faa:	80 81       	ld	r24, Z
    1fac:	91 81       	ldd	r25, Z+1	; 0x01
    1fae:	11 96       	adiw	r26, 0x01	; 1
    1fb0:	9c 93       	st	X, r25
    1fb2:	8e 93       	st	-X, r24
    1fb4:	fe 01       	movw	r30, r28
    1fb6:	e6 55       	subi	r30, 0x56	; 86
    1fb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fba:	80 81       	ld	r24, Z
    1fbc:	91 81       	ldd	r25, Z+1	; 0x01
    1fbe:	01 97       	sbiw	r24, 0x01	; 1
    1fc0:	f1 f7       	brne	.-4      	; 0x1fbe <__stack+0x175f>
    1fc2:	fe 01       	movw	r30, r28
    1fc4:	e6 55       	subi	r30, 0x56	; 86
    1fc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc8:	91 83       	std	Z+1, r25	; 0x01
    1fca:	80 83       	st	Z, r24
    1fcc:	22 c0       	rjmp	.+68     	; 0x2012 <__stack+0x17b3>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1fce:	8e 01       	movw	r16, r28
    1fd0:	08 54       	subi	r16, 0x48	; 72
    1fd2:	1f 4f       	sbci	r17, 0xFF	; 255
    1fd4:	fe 01       	movw	r30, r28
    1fd6:	e7 54       	subi	r30, 0x47	; 71
    1fd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fda:	60 81       	ld	r22, Z
    1fdc:	71 81       	ldd	r23, Z+1	; 0x01
    1fde:	82 81       	ldd	r24, Z+2	; 0x02
    1fe0:	93 81       	ldd	r25, Z+3	; 0x03
    1fe2:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
    1fe6:	dc 01       	movw	r26, r24
    1fe8:	cb 01       	movw	r24, r22
    1fea:	f8 01       	movw	r30, r16
    1fec:	80 83       	st	Z, r24
    1fee:	de 01       	movw	r26, r28
    1ff0:	a7 55       	subi	r26, 0x57	; 87
    1ff2:	bf 4f       	sbci	r27, 0xFF	; 255
    1ff4:	fe 01       	movw	r30, r28
    1ff6:	e8 54       	subi	r30, 0x48	; 72
    1ff8:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffa:	80 81       	ld	r24, Z
    1ffc:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ffe:	fe 01       	movw	r30, r28
    2000:	e7 55       	subi	r30, 0x57	; 87
    2002:	ff 4f       	sbci	r31, 0xFF	; 255
    2004:	80 81       	ld	r24, Z
    2006:	8a 95       	dec	r24
    2008:	f1 f7       	brne	.-4      	; 0x2006 <__stack+0x17a7>
    200a:	fe 01       	movw	r30, r28
    200c:	e7 55       	subi	r30, 0x57	; 87
    200e:	ff 4f       	sbci	r31, 0xFF	; 255
    2010:	80 83       	st	Z, r24
	  if(CHK(PS2IN,PS2dat)) SET(PS2data6,i);
    2012:	e3 e3       	ldi	r30, 0x33	; 51
    2014:	f0 e0       	ldi	r31, 0x00	; 0
    2016:	80 81       	ld	r24, Z
    2018:	88 2f       	mov	r24, r24
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	82 70       	andi	r24, 0x02	; 2
    201e:	90 70       	andi	r25, 0x00	; 0
    2020:	00 97       	sbiw	r24, 0x00	; 0
    2022:	91 f0       	breq	.+36     	; 0x2048 <__stack+0x17e9>
    2024:	80 91 63 00 	lds	r24, 0x0063
    2028:	28 2f       	mov	r18, r24
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	81 e0       	ldi	r24, 0x01	; 1
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	02 2e       	mov	r0, r18
    2032:	02 c0       	rjmp	.+4      	; 0x2038 <__stack+0x17d9>
    2034:	88 0f       	add	r24, r24
    2036:	99 1f       	adc	r25, r25
    2038:	0a 94       	dec	r0
    203a:	e2 f7       	brpl	.-8      	; 0x2034 <__stack+0x17d5>
    203c:	98 2f       	mov	r25, r24
    203e:	80 91 64 00 	lds	r24, 0x0064
    2042:	89 2b       	or	r24, r25
    2044:	80 93 64 00 	sts	0x0064, r24
      SET(PS2PORT,PS2clk);
    2048:	a5 e3       	ldi	r26, 0x35	; 53
    204a:	b0 e0       	ldi	r27, 0x00	; 0
    204c:	e5 e3       	ldi	r30, 0x35	; 53
    204e:	f0 e0       	ldi	r31, 0x00	; 0
    2050:	80 81       	ld	r24, Z
    2052:	81 60       	ori	r24, 0x01	; 1
    2054:	8c 93       	st	X, r24
   }
   SET(PS2PORT,PS2cmd); 
   _delay_us(1);
   
   PS2data6=0;
   for(i=0;i<8;i++) // 6 byte x axis right joy
    2056:	80 91 63 00 	lds	r24, 0x0063
    205a:	8f 5f       	subi	r24, 0xFF	; 255
    205c:	80 93 63 00 	sts	0x0063, r24
    2060:	80 91 63 00 	lds	r24, 0x0063
    2064:	88 30       	cpi	r24, 0x08	; 8
    2066:	08 f4       	brcc	.+2      	; 0x206a <__stack+0x180b>
    2068:	9d ce       	rjmp	.-710    	; 0x1da4 <__stack+0x1545>
      CLR(PS2PORT,PS2cmd);
      CLR(PS2PORT,PS2clk);_delay_us(1);
	  if(CHK(PS2IN,PS2dat)) SET(PS2data6,i);
      SET(PS2PORT,PS2clk);
   }
   SET(PS2PORT,PS2cmd); 
    206a:	a5 e3       	ldi	r26, 0x35	; 53
    206c:	b0 e0       	ldi	r27, 0x00	; 0
    206e:	e5 e3       	ldi	r30, 0x35	; 53
    2070:	f0 e0       	ldi	r31, 0x00	; 0
    2072:	80 81       	ld	r24, Z
    2074:	84 60       	ori	r24, 0x04	; 4
    2076:	8c 93       	st	X, r24
    2078:	fe 01       	movw	r30, r28
    207a:	eb 55       	subi	r30, 0x5B	; 91
    207c:	ff 4f       	sbci	r31, 0xFF	; 255
    207e:	80 e0       	ldi	r24, 0x00	; 0
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	a0 e8       	ldi	r26, 0x80	; 128
    2084:	bf e3       	ldi	r27, 0x3F	; 63
    2086:	80 83       	st	Z, r24
    2088:	91 83       	std	Z+1, r25	; 0x01
    208a:	a2 83       	std	Z+2, r26	; 0x02
    208c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    208e:	8e 01       	movw	r16, r28
    2090:	0f 55       	subi	r16, 0x5F	; 95
    2092:	1f 4f       	sbci	r17, 0xFF	; 255
    2094:	fe 01       	movw	r30, r28
    2096:	eb 55       	subi	r30, 0x5B	; 91
    2098:	ff 4f       	sbci	r31, 0xFF	; 255
    209a:	60 81       	ld	r22, Z
    209c:	71 81       	ldd	r23, Z+1	; 0x01
    209e:	82 81       	ldd	r24, Z+2	; 0x02
    20a0:	93 81       	ldd	r25, Z+3	; 0x03
    20a2:	2b ea       	ldi	r18, 0xAB	; 171
    20a4:	3a ea       	ldi	r19, 0xAA	; 170
    20a6:	4a ea       	ldi	r20, 0xAA	; 170
    20a8:	50 e4       	ldi	r21, 0x40	; 64
    20aa:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
    20ae:	dc 01       	movw	r26, r24
    20b0:	cb 01       	movw	r24, r22
    20b2:	f8 01       	movw	r30, r16
    20b4:	80 83       	st	Z, r24
    20b6:	91 83       	std	Z+1, r25	; 0x01
    20b8:	a2 83       	std	Z+2, r26	; 0x02
    20ba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20bc:	fe 01       	movw	r30, r28
    20be:	ef 55       	subi	r30, 0x5F	; 95
    20c0:	ff 4f       	sbci	r31, 0xFF	; 255
    20c2:	60 81       	ld	r22, Z
    20c4:	71 81       	ldd	r23, Z+1	; 0x01
    20c6:	82 81       	ldd	r24, Z+2	; 0x02
    20c8:	93 81       	ldd	r25, Z+3	; 0x03
    20ca:	20 e0       	ldi	r18, 0x00	; 0
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	40 e8       	ldi	r20, 0x80	; 128
    20d0:	5f e3       	ldi	r21, 0x3F	; 63
    20d2:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__cmpsf2>
    20d6:	88 23       	and	r24, r24
    20d8:	34 f4       	brge	.+12     	; 0x20e6 <__stack+0x1887>
		__ticks = 1;
    20da:	fe 01       	movw	r30, r28
    20dc:	e0 56       	subi	r30, 0x60	; 96
    20de:	ff 4f       	sbci	r31, 0xFF	; 255
    20e0:	81 e0       	ldi	r24, 0x01	; 1
    20e2:	80 83       	st	Z, r24
    20e4:	e0 c0       	rjmp	.+448    	; 0x22a6 <__stack+0x1a47>
	else if (__tmp > 255)
    20e6:	fe 01       	movw	r30, r28
    20e8:	ef 55       	subi	r30, 0x5F	; 95
    20ea:	ff 4f       	sbci	r31, 0xFF	; 255
    20ec:	60 81       	ld	r22, Z
    20ee:	71 81       	ldd	r23, Z+1	; 0x01
    20f0:	82 81       	ldd	r24, Z+2	; 0x02
    20f2:	93 81       	ldd	r25, Z+3	; 0x03
    20f4:	20 e0       	ldi	r18, 0x00	; 0
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	4f e7       	ldi	r20, 0x7F	; 127
    20fa:	53 e4       	ldi	r21, 0x43	; 67
    20fc:	0e 94 76 26 	call	0x4cec	; 0x4cec <__gesf2>
    2100:	18 16       	cp	r1, r24
    2102:	0c f0       	brlt	.+2      	; 0x2106 <__stack+0x18a7>
    2104:	c0 c0       	rjmp	.+384    	; 0x2286 <__stack+0x1a27>
	{
		_delay_ms(__us / 1000.0);
    2106:	fe 01       	movw	r30, r28
    2108:	eb 55       	subi	r30, 0x5B	; 91
    210a:	ff 4f       	sbci	r31, 0xFF	; 255
    210c:	60 81       	ld	r22, Z
    210e:	71 81       	ldd	r23, Z+1	; 0x01
    2110:	82 81       	ldd	r24, Z+2	; 0x02
    2112:	93 81       	ldd	r25, Z+3	; 0x03
    2114:	20 e0       	ldi	r18, 0x00	; 0
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	4a e7       	ldi	r20, 0x7A	; 122
    211a:	54 e4       	ldi	r21, 0x44	; 68
    211c:	0e 94 6d 25 	call	0x4ada	; 0x4ada <__divsf3>
    2120:	dc 01       	movw	r26, r24
    2122:	cb 01       	movw	r24, r22
    2124:	fe 01       	movw	r30, r28
    2126:	e4 56       	subi	r30, 0x64	; 100
    2128:	ff 4f       	sbci	r31, 0xFF	; 255
    212a:	80 83       	st	Z, r24
    212c:	91 83       	std	Z+1, r25	; 0x01
    212e:	a2 83       	std	Z+2, r26	; 0x02
    2130:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2132:	8e 01       	movw	r16, r28
    2134:	08 56       	subi	r16, 0x68	; 104
    2136:	1f 4f       	sbci	r17, 0xFF	; 255
    2138:	fe 01       	movw	r30, r28
    213a:	e4 56       	subi	r30, 0x64	; 100
    213c:	ff 4f       	sbci	r31, 0xFF	; 255
    213e:	60 81       	ld	r22, Z
    2140:	71 81       	ldd	r23, Z+1	; 0x01
    2142:	82 81       	ldd	r24, Z+2	; 0x02
    2144:	93 81       	ldd	r25, Z+3	; 0x03
    2146:	20 e0       	ldi	r18, 0x00	; 0
    2148:	30 e0       	ldi	r19, 0x00	; 0
    214a:	4a e7       	ldi	r20, 0x7A	; 122
    214c:	55 e4       	ldi	r21, 0x45	; 69
    214e:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
    2152:	dc 01       	movw	r26, r24
    2154:	cb 01       	movw	r24, r22
    2156:	f8 01       	movw	r30, r16
    2158:	80 83       	st	Z, r24
    215a:	91 83       	std	Z+1, r25	; 0x01
    215c:	a2 83       	std	Z+2, r26	; 0x02
    215e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2160:	fe 01       	movw	r30, r28
    2162:	e8 56       	subi	r30, 0x68	; 104
    2164:	ff 4f       	sbci	r31, 0xFF	; 255
    2166:	60 81       	ld	r22, Z
    2168:	71 81       	ldd	r23, Z+1	; 0x01
    216a:	82 81       	ldd	r24, Z+2	; 0x02
    216c:	93 81       	ldd	r25, Z+3	; 0x03
    216e:	20 e0       	ldi	r18, 0x00	; 0
    2170:	30 e0       	ldi	r19, 0x00	; 0
    2172:	40 e8       	ldi	r20, 0x80	; 128
    2174:	5f e3       	ldi	r21, 0x3F	; 63
    2176:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__cmpsf2>
    217a:	88 23       	and	r24, r24
    217c:	44 f4       	brge	.+16     	; 0x218e <__stack+0x192f>
		__ticks = 1;
    217e:	fe 01       	movw	r30, r28
    2180:	ea 56       	subi	r30, 0x6A	; 106
    2182:	ff 4f       	sbci	r31, 0xFF	; 255
    2184:	81 e0       	ldi	r24, 0x01	; 1
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	91 83       	std	Z+1, r25	; 0x01
    218a:	80 83       	st	Z, r24
    218c:	64 c0       	rjmp	.+200    	; 0x2256 <__stack+0x19f7>
	else if (__tmp > 65535)
    218e:	fe 01       	movw	r30, r28
    2190:	e8 56       	subi	r30, 0x68	; 104
    2192:	ff 4f       	sbci	r31, 0xFF	; 255
    2194:	60 81       	ld	r22, Z
    2196:	71 81       	ldd	r23, Z+1	; 0x01
    2198:	82 81       	ldd	r24, Z+2	; 0x02
    219a:	93 81       	ldd	r25, Z+3	; 0x03
    219c:	20 e0       	ldi	r18, 0x00	; 0
    219e:	3f ef       	ldi	r19, 0xFF	; 255
    21a0:	4f e7       	ldi	r20, 0x7F	; 127
    21a2:	57 e4       	ldi	r21, 0x47	; 71
    21a4:	0e 94 76 26 	call	0x4cec	; 0x4cec <__gesf2>
    21a8:	18 16       	cp	r1, r24
    21aa:	0c f0       	brlt	.+2      	; 0x21ae <__stack+0x194f>
    21ac:	43 c0       	rjmp	.+134    	; 0x2234 <__stack+0x19d5>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ae:	fe 01       	movw	r30, r28
    21b0:	e4 56       	subi	r30, 0x64	; 100
    21b2:	ff 4f       	sbci	r31, 0xFF	; 255
    21b4:	60 81       	ld	r22, Z
    21b6:	71 81       	ldd	r23, Z+1	; 0x01
    21b8:	82 81       	ldd	r24, Z+2	; 0x02
    21ba:	93 81       	ldd	r25, Z+3	; 0x03
    21bc:	20 e0       	ldi	r18, 0x00	; 0
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	40 e2       	ldi	r20, 0x20	; 32
    21c2:	51 e4       	ldi	r21, 0x41	; 65
    21c4:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
    21c8:	dc 01       	movw	r26, r24
    21ca:	cb 01       	movw	r24, r22
    21cc:	8e 01       	movw	r16, r28
    21ce:	0a 56       	subi	r16, 0x6A	; 106
    21d0:	1f 4f       	sbci	r17, 0xFF	; 255
    21d2:	bc 01       	movw	r22, r24
    21d4:	cd 01       	movw	r24, r26
    21d6:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
    21da:	dc 01       	movw	r26, r24
    21dc:	cb 01       	movw	r24, r22
    21de:	f8 01       	movw	r30, r16
    21e0:	91 83       	std	Z+1, r25	; 0x01
    21e2:	80 83       	st	Z, r24
    21e4:	1f c0       	rjmp	.+62     	; 0x2224 <__stack+0x19c5>
    21e6:	fe 01       	movw	r30, r28
    21e8:	ec 56       	subi	r30, 0x6C	; 108
    21ea:	ff 4f       	sbci	r31, 0xFF	; 255
    21ec:	80 e9       	ldi	r24, 0x90	; 144
    21ee:	91 e0       	ldi	r25, 0x01	; 1
    21f0:	91 83       	std	Z+1, r25	; 0x01
    21f2:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    21f4:	fe 01       	movw	r30, r28
    21f6:	ec 56       	subi	r30, 0x6C	; 108
    21f8:	ff 4f       	sbci	r31, 0xFF	; 255
    21fa:	80 81       	ld	r24, Z
    21fc:	91 81       	ldd	r25, Z+1	; 0x01
    21fe:	01 97       	sbiw	r24, 0x01	; 1
    2200:	f1 f7       	brne	.-4      	; 0x21fe <__stack+0x199f>
    2202:	fe 01       	movw	r30, r28
    2204:	ec 56       	subi	r30, 0x6C	; 108
    2206:	ff 4f       	sbci	r31, 0xFF	; 255
    2208:	91 83       	std	Z+1, r25	; 0x01
    220a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    220c:	de 01       	movw	r26, r28
    220e:	aa 56       	subi	r26, 0x6A	; 106
    2210:	bf 4f       	sbci	r27, 0xFF	; 255
    2212:	fe 01       	movw	r30, r28
    2214:	ea 56       	subi	r30, 0x6A	; 106
    2216:	ff 4f       	sbci	r31, 0xFF	; 255
    2218:	80 81       	ld	r24, Z
    221a:	91 81       	ldd	r25, Z+1	; 0x01
    221c:	01 97       	sbiw	r24, 0x01	; 1
    221e:	11 96       	adiw	r26, 0x01	; 1
    2220:	9c 93       	st	X, r25
    2222:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2224:	fe 01       	movw	r30, r28
    2226:	ea 56       	subi	r30, 0x6A	; 106
    2228:	ff 4f       	sbci	r31, 0xFF	; 255
    222a:	80 81       	ld	r24, Z
    222c:	91 81       	ldd	r25, Z+1	; 0x01
    222e:	00 97       	sbiw	r24, 0x00	; 0
    2230:	d1 f6       	brne	.-76     	; 0x21e6 <__stack+0x1987>
    2232:	4b c0       	rjmp	.+150    	; 0x22ca <__stack+0x1a6b>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2234:	8e 01       	movw	r16, r28
    2236:	0a 56       	subi	r16, 0x6A	; 106
    2238:	1f 4f       	sbci	r17, 0xFF	; 255
    223a:	fe 01       	movw	r30, r28
    223c:	e8 56       	subi	r30, 0x68	; 104
    223e:	ff 4f       	sbci	r31, 0xFF	; 255
    2240:	60 81       	ld	r22, Z
    2242:	71 81       	ldd	r23, Z+1	; 0x01
    2244:	82 81       	ldd	r24, Z+2	; 0x02
    2246:	93 81       	ldd	r25, Z+3	; 0x03
    2248:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
    224c:	dc 01       	movw	r26, r24
    224e:	cb 01       	movw	r24, r22
    2250:	f8 01       	movw	r30, r16
    2252:	91 83       	std	Z+1, r25	; 0x01
    2254:	80 83       	st	Z, r24
    2256:	de 01       	movw	r26, r28
    2258:	ae 56       	subi	r26, 0x6E	; 110
    225a:	bf 4f       	sbci	r27, 0xFF	; 255
    225c:	fe 01       	movw	r30, r28
    225e:	ea 56       	subi	r30, 0x6A	; 106
    2260:	ff 4f       	sbci	r31, 0xFF	; 255
    2262:	80 81       	ld	r24, Z
    2264:	91 81       	ldd	r25, Z+1	; 0x01
    2266:	11 96       	adiw	r26, 0x01	; 1
    2268:	9c 93       	st	X, r25
    226a:	8e 93       	st	-X, r24
    226c:	fe 01       	movw	r30, r28
    226e:	ee 56       	subi	r30, 0x6E	; 110
    2270:	ff 4f       	sbci	r31, 0xFF	; 255
    2272:	80 81       	ld	r24, Z
    2274:	91 81       	ldd	r25, Z+1	; 0x01
    2276:	01 97       	sbiw	r24, 0x01	; 1
    2278:	f1 f7       	brne	.-4      	; 0x2276 <__stack+0x1a17>
    227a:	fe 01       	movw	r30, r28
    227c:	ee 56       	subi	r30, 0x6E	; 110
    227e:	ff 4f       	sbci	r31, 0xFF	; 255
    2280:	91 83       	std	Z+1, r25	; 0x01
    2282:	80 83       	st	Z, r24
    2284:	22 c0       	rjmp	.+68     	; 0x22ca <__stack+0x1a6b>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2286:	8e 01       	movw	r16, r28
    2288:	00 56       	subi	r16, 0x60	; 96
    228a:	1f 4f       	sbci	r17, 0xFF	; 255
    228c:	fe 01       	movw	r30, r28
    228e:	ef 55       	subi	r30, 0x5F	; 95
    2290:	ff 4f       	sbci	r31, 0xFF	; 255
    2292:	60 81       	ld	r22, Z
    2294:	71 81       	ldd	r23, Z+1	; 0x01
    2296:	82 81       	ldd	r24, Z+2	; 0x02
    2298:	93 81       	ldd	r25, Z+3	; 0x03
    229a:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
    229e:	dc 01       	movw	r26, r24
    22a0:	cb 01       	movw	r24, r22
    22a2:	f8 01       	movw	r30, r16
    22a4:	80 83       	st	Z, r24
    22a6:	de 01       	movw	r26, r28
    22a8:	af 56       	subi	r26, 0x6F	; 111
    22aa:	bf 4f       	sbci	r27, 0xFF	; 255
    22ac:	fe 01       	movw	r30, r28
    22ae:	e0 56       	subi	r30, 0x60	; 96
    22b0:	ff 4f       	sbci	r31, 0xFF	; 255
    22b2:	80 81       	ld	r24, Z
    22b4:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    22b6:	fe 01       	movw	r30, r28
    22b8:	ef 56       	subi	r30, 0x6F	; 111
    22ba:	ff 4f       	sbci	r31, 0xFF	; 255
    22bc:	80 81       	ld	r24, Z
    22be:	8a 95       	dec	r24
    22c0:	f1 f7       	brne	.-4      	; 0x22be <__stack+0x1a5f>
    22c2:	fe 01       	movw	r30, r28
    22c4:	ef 56       	subi	r30, 0x6F	; 111
    22c6:	ff 4f       	sbci	r31, 0xFF	; 255
    22c8:	80 83       	st	Z, r24
   _delay_us(1);
   PS2data7=0;
    22ca:	10 92 60 00 	sts	0x0060, r1
   for(i=0;i<8;i++) // 7 byte y axis of right joy
    22ce:	10 92 63 00 	sts	0x0063, r1
    22d2:	5e c1       	rjmp	.+700    	; 0x2590 <__stack+0x1d31>
   {
      CLR(PS2PORT,PS2cmd);
    22d4:	a5 e3       	ldi	r26, 0x35	; 53
    22d6:	b0 e0       	ldi	r27, 0x00	; 0
    22d8:	e5 e3       	ldi	r30, 0x35	; 53
    22da:	f0 e0       	ldi	r31, 0x00	; 0
    22dc:	80 81       	ld	r24, Z
    22de:	8b 7f       	andi	r24, 0xFB	; 251
    22e0:	8c 93       	st	X, r24
      CLR(PS2PORT,PS2clk);_delay_us(1);
    22e2:	a5 e3       	ldi	r26, 0x35	; 53
    22e4:	b0 e0       	ldi	r27, 0x00	; 0
    22e6:	e5 e3       	ldi	r30, 0x35	; 53
    22e8:	f0 e0       	ldi	r31, 0x00	; 0
    22ea:	80 81       	ld	r24, Z
    22ec:	8e 7f       	andi	r24, 0xFE	; 254
    22ee:	8c 93       	st	X, r24
    22f0:	fe 01       	movw	r30, r28
    22f2:	e3 57       	subi	r30, 0x73	; 115
    22f4:	ff 4f       	sbci	r31, 0xFF	; 255
    22f6:	80 e0       	ldi	r24, 0x00	; 0
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	a0 e8       	ldi	r26, 0x80	; 128
    22fc:	bf e3       	ldi	r27, 0x3F	; 63
    22fe:	80 83       	st	Z, r24
    2300:	91 83       	std	Z+1, r25	; 0x01
    2302:	a2 83       	std	Z+2, r26	; 0x02
    2304:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2306:	8e 01       	movw	r16, r28
    2308:	07 57       	subi	r16, 0x77	; 119
    230a:	1f 4f       	sbci	r17, 0xFF	; 255
    230c:	fe 01       	movw	r30, r28
    230e:	e3 57       	subi	r30, 0x73	; 115
    2310:	ff 4f       	sbci	r31, 0xFF	; 255
    2312:	60 81       	ld	r22, Z
    2314:	71 81       	ldd	r23, Z+1	; 0x01
    2316:	82 81       	ldd	r24, Z+2	; 0x02
    2318:	93 81       	ldd	r25, Z+3	; 0x03
    231a:	2b ea       	ldi	r18, 0xAB	; 171
    231c:	3a ea       	ldi	r19, 0xAA	; 170
    231e:	4a ea       	ldi	r20, 0xAA	; 170
    2320:	50 e4       	ldi	r21, 0x40	; 64
    2322:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
    2326:	dc 01       	movw	r26, r24
    2328:	cb 01       	movw	r24, r22
    232a:	f8 01       	movw	r30, r16
    232c:	80 83       	st	Z, r24
    232e:	91 83       	std	Z+1, r25	; 0x01
    2330:	a2 83       	std	Z+2, r26	; 0x02
    2332:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2334:	fe 01       	movw	r30, r28
    2336:	e7 57       	subi	r30, 0x77	; 119
    2338:	ff 4f       	sbci	r31, 0xFF	; 255
    233a:	60 81       	ld	r22, Z
    233c:	71 81       	ldd	r23, Z+1	; 0x01
    233e:	82 81       	ldd	r24, Z+2	; 0x02
    2340:	93 81       	ldd	r25, Z+3	; 0x03
    2342:	20 e0       	ldi	r18, 0x00	; 0
    2344:	30 e0       	ldi	r19, 0x00	; 0
    2346:	40 e8       	ldi	r20, 0x80	; 128
    2348:	5f e3       	ldi	r21, 0x3F	; 63
    234a:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__cmpsf2>
    234e:	88 23       	and	r24, r24
    2350:	34 f4       	brge	.+12     	; 0x235e <__stack+0x1aff>
		__ticks = 1;
    2352:	fe 01       	movw	r30, r28
    2354:	e8 57       	subi	r30, 0x78	; 120
    2356:	ff 4f       	sbci	r31, 0xFF	; 255
    2358:	81 e0       	ldi	r24, 0x01	; 1
    235a:	80 83       	st	Z, r24
    235c:	e0 c0       	rjmp	.+448    	; 0x251e <__stack+0x1cbf>
	else if (__tmp > 255)
    235e:	fe 01       	movw	r30, r28
    2360:	e7 57       	subi	r30, 0x77	; 119
    2362:	ff 4f       	sbci	r31, 0xFF	; 255
    2364:	60 81       	ld	r22, Z
    2366:	71 81       	ldd	r23, Z+1	; 0x01
    2368:	82 81       	ldd	r24, Z+2	; 0x02
    236a:	93 81       	ldd	r25, Z+3	; 0x03
    236c:	20 e0       	ldi	r18, 0x00	; 0
    236e:	30 e0       	ldi	r19, 0x00	; 0
    2370:	4f e7       	ldi	r20, 0x7F	; 127
    2372:	53 e4       	ldi	r21, 0x43	; 67
    2374:	0e 94 76 26 	call	0x4cec	; 0x4cec <__gesf2>
    2378:	18 16       	cp	r1, r24
    237a:	0c f0       	brlt	.+2      	; 0x237e <__stack+0x1b1f>
    237c:	c0 c0       	rjmp	.+384    	; 0x24fe <__stack+0x1c9f>
	{
		_delay_ms(__us / 1000.0);
    237e:	fe 01       	movw	r30, r28
    2380:	e3 57       	subi	r30, 0x73	; 115
    2382:	ff 4f       	sbci	r31, 0xFF	; 255
    2384:	60 81       	ld	r22, Z
    2386:	71 81       	ldd	r23, Z+1	; 0x01
    2388:	82 81       	ldd	r24, Z+2	; 0x02
    238a:	93 81       	ldd	r25, Z+3	; 0x03
    238c:	20 e0       	ldi	r18, 0x00	; 0
    238e:	30 e0       	ldi	r19, 0x00	; 0
    2390:	4a e7       	ldi	r20, 0x7A	; 122
    2392:	54 e4       	ldi	r21, 0x44	; 68
    2394:	0e 94 6d 25 	call	0x4ada	; 0x4ada <__divsf3>
    2398:	dc 01       	movw	r26, r24
    239a:	cb 01       	movw	r24, r22
    239c:	fe 01       	movw	r30, r28
    239e:	ec 57       	subi	r30, 0x7C	; 124
    23a0:	ff 4f       	sbci	r31, 0xFF	; 255
    23a2:	80 83       	st	Z, r24
    23a4:	91 83       	std	Z+1, r25	; 0x01
    23a6:	a2 83       	std	Z+2, r26	; 0x02
    23a8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23aa:	8e 01       	movw	r16, r28
    23ac:	00 58       	subi	r16, 0x80	; 128
    23ae:	1f 4f       	sbci	r17, 0xFF	; 255
    23b0:	fe 01       	movw	r30, r28
    23b2:	ec 57       	subi	r30, 0x7C	; 124
    23b4:	ff 4f       	sbci	r31, 0xFF	; 255
    23b6:	60 81       	ld	r22, Z
    23b8:	71 81       	ldd	r23, Z+1	; 0x01
    23ba:	82 81       	ldd	r24, Z+2	; 0x02
    23bc:	93 81       	ldd	r25, Z+3	; 0x03
    23be:	20 e0       	ldi	r18, 0x00	; 0
    23c0:	30 e0       	ldi	r19, 0x00	; 0
    23c2:	4a e7       	ldi	r20, 0x7A	; 122
    23c4:	55 e4       	ldi	r21, 0x45	; 69
    23c6:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
    23ca:	dc 01       	movw	r26, r24
    23cc:	cb 01       	movw	r24, r22
    23ce:	f8 01       	movw	r30, r16
    23d0:	80 83       	st	Z, r24
    23d2:	91 83       	std	Z+1, r25	; 0x01
    23d4:	a2 83       	std	Z+2, r26	; 0x02
    23d6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23d8:	fe 01       	movw	r30, r28
    23da:	e0 58       	subi	r30, 0x80	; 128
    23dc:	ff 4f       	sbci	r31, 0xFF	; 255
    23de:	60 81       	ld	r22, Z
    23e0:	71 81       	ldd	r23, Z+1	; 0x01
    23e2:	82 81       	ldd	r24, Z+2	; 0x02
    23e4:	93 81       	ldd	r25, Z+3	; 0x03
    23e6:	20 e0       	ldi	r18, 0x00	; 0
    23e8:	30 e0       	ldi	r19, 0x00	; 0
    23ea:	40 e8       	ldi	r20, 0x80	; 128
    23ec:	5f e3       	ldi	r21, 0x3F	; 63
    23ee:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__cmpsf2>
    23f2:	88 23       	and	r24, r24
    23f4:	44 f4       	brge	.+16     	; 0x2406 <__stack+0x1ba7>
		__ticks = 1;
    23f6:	fe 01       	movw	r30, r28
    23f8:	e2 58       	subi	r30, 0x82	; 130
    23fa:	ff 4f       	sbci	r31, 0xFF	; 255
    23fc:	81 e0       	ldi	r24, 0x01	; 1
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	91 83       	std	Z+1, r25	; 0x01
    2402:	80 83       	st	Z, r24
    2404:	64 c0       	rjmp	.+200    	; 0x24ce <__stack+0x1c6f>
	else if (__tmp > 65535)
    2406:	fe 01       	movw	r30, r28
    2408:	e0 58       	subi	r30, 0x80	; 128
    240a:	ff 4f       	sbci	r31, 0xFF	; 255
    240c:	60 81       	ld	r22, Z
    240e:	71 81       	ldd	r23, Z+1	; 0x01
    2410:	82 81       	ldd	r24, Z+2	; 0x02
    2412:	93 81       	ldd	r25, Z+3	; 0x03
    2414:	20 e0       	ldi	r18, 0x00	; 0
    2416:	3f ef       	ldi	r19, 0xFF	; 255
    2418:	4f e7       	ldi	r20, 0x7F	; 127
    241a:	57 e4       	ldi	r21, 0x47	; 71
    241c:	0e 94 76 26 	call	0x4cec	; 0x4cec <__gesf2>
    2420:	18 16       	cp	r1, r24
    2422:	0c f0       	brlt	.+2      	; 0x2426 <__stack+0x1bc7>
    2424:	43 c0       	rjmp	.+134    	; 0x24ac <__stack+0x1c4d>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2426:	fe 01       	movw	r30, r28
    2428:	ec 57       	subi	r30, 0x7C	; 124
    242a:	ff 4f       	sbci	r31, 0xFF	; 255
    242c:	60 81       	ld	r22, Z
    242e:	71 81       	ldd	r23, Z+1	; 0x01
    2430:	82 81       	ldd	r24, Z+2	; 0x02
    2432:	93 81       	ldd	r25, Z+3	; 0x03
    2434:	20 e0       	ldi	r18, 0x00	; 0
    2436:	30 e0       	ldi	r19, 0x00	; 0
    2438:	40 e2       	ldi	r20, 0x20	; 32
    243a:	51 e4       	ldi	r21, 0x41	; 65
    243c:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
    2440:	dc 01       	movw	r26, r24
    2442:	cb 01       	movw	r24, r22
    2444:	8e 01       	movw	r16, r28
    2446:	02 58       	subi	r16, 0x82	; 130
    2448:	1f 4f       	sbci	r17, 0xFF	; 255
    244a:	bc 01       	movw	r22, r24
    244c:	cd 01       	movw	r24, r26
    244e:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
    2452:	dc 01       	movw	r26, r24
    2454:	cb 01       	movw	r24, r22
    2456:	f8 01       	movw	r30, r16
    2458:	91 83       	std	Z+1, r25	; 0x01
    245a:	80 83       	st	Z, r24
    245c:	1f c0       	rjmp	.+62     	; 0x249c <__stack+0x1c3d>
    245e:	fe 01       	movw	r30, r28
    2460:	e4 58       	subi	r30, 0x84	; 132
    2462:	ff 4f       	sbci	r31, 0xFF	; 255
    2464:	80 e9       	ldi	r24, 0x90	; 144
    2466:	91 e0       	ldi	r25, 0x01	; 1
    2468:	91 83       	std	Z+1, r25	; 0x01
    246a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    246c:	fe 01       	movw	r30, r28
    246e:	e4 58       	subi	r30, 0x84	; 132
    2470:	ff 4f       	sbci	r31, 0xFF	; 255
    2472:	80 81       	ld	r24, Z
    2474:	91 81       	ldd	r25, Z+1	; 0x01
    2476:	01 97       	sbiw	r24, 0x01	; 1
    2478:	f1 f7       	brne	.-4      	; 0x2476 <__stack+0x1c17>
    247a:	fe 01       	movw	r30, r28
    247c:	e4 58       	subi	r30, 0x84	; 132
    247e:	ff 4f       	sbci	r31, 0xFF	; 255
    2480:	91 83       	std	Z+1, r25	; 0x01
    2482:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2484:	de 01       	movw	r26, r28
    2486:	a2 58       	subi	r26, 0x82	; 130
    2488:	bf 4f       	sbci	r27, 0xFF	; 255
    248a:	fe 01       	movw	r30, r28
    248c:	e2 58       	subi	r30, 0x82	; 130
    248e:	ff 4f       	sbci	r31, 0xFF	; 255
    2490:	80 81       	ld	r24, Z
    2492:	91 81       	ldd	r25, Z+1	; 0x01
    2494:	01 97       	sbiw	r24, 0x01	; 1
    2496:	11 96       	adiw	r26, 0x01	; 1
    2498:	9c 93       	st	X, r25
    249a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    249c:	fe 01       	movw	r30, r28
    249e:	e2 58       	subi	r30, 0x82	; 130
    24a0:	ff 4f       	sbci	r31, 0xFF	; 255
    24a2:	80 81       	ld	r24, Z
    24a4:	91 81       	ldd	r25, Z+1	; 0x01
    24a6:	00 97       	sbiw	r24, 0x00	; 0
    24a8:	d1 f6       	brne	.-76     	; 0x245e <__stack+0x1bff>
    24aa:	4b c0       	rjmp	.+150    	; 0x2542 <__stack+0x1ce3>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ac:	8e 01       	movw	r16, r28
    24ae:	02 58       	subi	r16, 0x82	; 130
    24b0:	1f 4f       	sbci	r17, 0xFF	; 255
    24b2:	fe 01       	movw	r30, r28
    24b4:	e0 58       	subi	r30, 0x80	; 128
    24b6:	ff 4f       	sbci	r31, 0xFF	; 255
    24b8:	60 81       	ld	r22, Z
    24ba:	71 81       	ldd	r23, Z+1	; 0x01
    24bc:	82 81       	ldd	r24, Z+2	; 0x02
    24be:	93 81       	ldd	r25, Z+3	; 0x03
    24c0:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
    24c4:	dc 01       	movw	r26, r24
    24c6:	cb 01       	movw	r24, r22
    24c8:	f8 01       	movw	r30, r16
    24ca:	91 83       	std	Z+1, r25	; 0x01
    24cc:	80 83       	st	Z, r24
    24ce:	de 01       	movw	r26, r28
    24d0:	a6 58       	subi	r26, 0x86	; 134
    24d2:	bf 4f       	sbci	r27, 0xFF	; 255
    24d4:	fe 01       	movw	r30, r28
    24d6:	e2 58       	subi	r30, 0x82	; 130
    24d8:	ff 4f       	sbci	r31, 0xFF	; 255
    24da:	80 81       	ld	r24, Z
    24dc:	91 81       	ldd	r25, Z+1	; 0x01
    24de:	11 96       	adiw	r26, 0x01	; 1
    24e0:	9c 93       	st	X, r25
    24e2:	8e 93       	st	-X, r24
    24e4:	fe 01       	movw	r30, r28
    24e6:	e6 58       	subi	r30, 0x86	; 134
    24e8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ea:	80 81       	ld	r24, Z
    24ec:	91 81       	ldd	r25, Z+1	; 0x01
    24ee:	01 97       	sbiw	r24, 0x01	; 1
    24f0:	f1 f7       	brne	.-4      	; 0x24ee <__stack+0x1c8f>
    24f2:	fe 01       	movw	r30, r28
    24f4:	e6 58       	subi	r30, 0x86	; 134
    24f6:	ff 4f       	sbci	r31, 0xFF	; 255
    24f8:	91 83       	std	Z+1, r25	; 0x01
    24fa:	80 83       	st	Z, r24
    24fc:	22 c0       	rjmp	.+68     	; 0x2542 <__stack+0x1ce3>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    24fe:	8e 01       	movw	r16, r28
    2500:	08 57       	subi	r16, 0x78	; 120
    2502:	1f 4f       	sbci	r17, 0xFF	; 255
    2504:	fe 01       	movw	r30, r28
    2506:	e7 57       	subi	r30, 0x77	; 119
    2508:	ff 4f       	sbci	r31, 0xFF	; 255
    250a:	60 81       	ld	r22, Z
    250c:	71 81       	ldd	r23, Z+1	; 0x01
    250e:	82 81       	ldd	r24, Z+2	; 0x02
    2510:	93 81       	ldd	r25, Z+3	; 0x03
    2512:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
    2516:	dc 01       	movw	r26, r24
    2518:	cb 01       	movw	r24, r22
    251a:	f8 01       	movw	r30, r16
    251c:	80 83       	st	Z, r24
    251e:	de 01       	movw	r26, r28
    2520:	a7 58       	subi	r26, 0x87	; 135
    2522:	bf 4f       	sbci	r27, 0xFF	; 255
    2524:	fe 01       	movw	r30, r28
    2526:	e8 57       	subi	r30, 0x78	; 120
    2528:	ff 4f       	sbci	r31, 0xFF	; 255
    252a:	80 81       	ld	r24, Z
    252c:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    252e:	fe 01       	movw	r30, r28
    2530:	e7 58       	subi	r30, 0x87	; 135
    2532:	ff 4f       	sbci	r31, 0xFF	; 255
    2534:	80 81       	ld	r24, Z
    2536:	8a 95       	dec	r24
    2538:	f1 f7       	brne	.-4      	; 0x2536 <__stack+0x1cd7>
    253a:	fe 01       	movw	r30, r28
    253c:	e7 58       	subi	r30, 0x87	; 135
    253e:	ff 4f       	sbci	r31, 0xFF	; 255
    2540:	80 83       	st	Z, r24
	  if(CHK(PS2IN,PS2dat)) SET(PS2data7,i);
    2542:	e3 e3       	ldi	r30, 0x33	; 51
    2544:	f0 e0       	ldi	r31, 0x00	; 0
    2546:	80 81       	ld	r24, Z
    2548:	88 2f       	mov	r24, r24
    254a:	90 e0       	ldi	r25, 0x00	; 0
    254c:	82 70       	andi	r24, 0x02	; 2
    254e:	90 70       	andi	r25, 0x00	; 0
    2550:	00 97       	sbiw	r24, 0x00	; 0
    2552:	91 f0       	breq	.+36     	; 0x2578 <__stack+0x1d19>
    2554:	80 91 63 00 	lds	r24, 0x0063
    2558:	28 2f       	mov	r18, r24
    255a:	30 e0       	ldi	r19, 0x00	; 0
    255c:	81 e0       	ldi	r24, 0x01	; 1
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	02 2e       	mov	r0, r18
    2562:	02 c0       	rjmp	.+4      	; 0x2568 <__stack+0x1d09>
    2564:	88 0f       	add	r24, r24
    2566:	99 1f       	adc	r25, r25
    2568:	0a 94       	dec	r0
    256a:	e2 f7       	brpl	.-8      	; 0x2564 <__stack+0x1d05>
    256c:	98 2f       	mov	r25, r24
    256e:	80 91 60 00 	lds	r24, 0x0060
    2572:	89 2b       	or	r24, r25
    2574:	80 93 60 00 	sts	0x0060, r24
      SET(PS2PORT,PS2clk);
    2578:	a5 e3       	ldi	r26, 0x35	; 53
    257a:	b0 e0       	ldi	r27, 0x00	; 0
    257c:	e5 e3       	ldi	r30, 0x35	; 53
    257e:	f0 e0       	ldi	r31, 0x00	; 0
    2580:	80 81       	ld	r24, Z
    2582:	81 60       	ori	r24, 0x01	; 1
    2584:	8c 93       	st	X, r24
      SET(PS2PORT,PS2clk);
   }
   SET(PS2PORT,PS2cmd); 
   _delay_us(1);
   PS2data7=0;
   for(i=0;i<8;i++) // 7 byte y axis of right joy
    2586:	80 91 63 00 	lds	r24, 0x0063
    258a:	8f 5f       	subi	r24, 0xFF	; 255
    258c:	80 93 63 00 	sts	0x0063, r24
    2590:	80 91 63 00 	lds	r24, 0x0063
    2594:	88 30       	cpi	r24, 0x08	; 8
    2596:	08 f4       	brcc	.+2      	; 0x259a <__stack+0x1d3b>
    2598:	9d ce       	rjmp	.-710    	; 0x22d4 <__stack+0x1a75>
      CLR(PS2PORT,PS2cmd);
      CLR(PS2PORT,PS2clk);_delay_us(1);
	  if(CHK(PS2IN,PS2dat)) SET(PS2data7,i);
      SET(PS2PORT,PS2clk);
   }
   SET(PS2PORT,PS2cmd); 
    259a:	a5 e3       	ldi	r26, 0x35	; 53
    259c:	b0 e0       	ldi	r27, 0x00	; 0
    259e:	e5 e3       	ldi	r30, 0x35	; 53
    25a0:	f0 e0       	ldi	r31, 0x00	; 0
    25a2:	80 81       	ld	r24, Z
    25a4:	84 60       	ori	r24, 0x04	; 4
    25a6:	8c 93       	st	X, r24
    25a8:	fe 01       	movw	r30, r28
    25aa:	eb 58       	subi	r30, 0x8B	; 139
    25ac:	ff 4f       	sbci	r31, 0xFF	; 255
    25ae:	80 e0       	ldi	r24, 0x00	; 0
    25b0:	90 e0       	ldi	r25, 0x00	; 0
    25b2:	a0 e8       	ldi	r26, 0x80	; 128
    25b4:	bf e3       	ldi	r27, 0x3F	; 63
    25b6:	80 83       	st	Z, r24
    25b8:	91 83       	std	Z+1, r25	; 0x01
    25ba:	a2 83       	std	Z+2, r26	; 0x02
    25bc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    25be:	8e 01       	movw	r16, r28
    25c0:	0f 58       	subi	r16, 0x8F	; 143
    25c2:	1f 4f       	sbci	r17, 0xFF	; 255
    25c4:	fe 01       	movw	r30, r28
    25c6:	eb 58       	subi	r30, 0x8B	; 139
    25c8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ca:	60 81       	ld	r22, Z
    25cc:	71 81       	ldd	r23, Z+1	; 0x01
    25ce:	82 81       	ldd	r24, Z+2	; 0x02
    25d0:	93 81       	ldd	r25, Z+3	; 0x03
    25d2:	2b ea       	ldi	r18, 0xAB	; 171
    25d4:	3a ea       	ldi	r19, 0xAA	; 170
    25d6:	4a ea       	ldi	r20, 0xAA	; 170
    25d8:	50 e4       	ldi	r21, 0x40	; 64
    25da:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
    25de:	dc 01       	movw	r26, r24
    25e0:	cb 01       	movw	r24, r22
    25e2:	f8 01       	movw	r30, r16
    25e4:	80 83       	st	Z, r24
    25e6:	91 83       	std	Z+1, r25	; 0x01
    25e8:	a2 83       	std	Z+2, r26	; 0x02
    25ea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25ec:	fe 01       	movw	r30, r28
    25ee:	ef 58       	subi	r30, 0x8F	; 143
    25f0:	ff 4f       	sbci	r31, 0xFF	; 255
    25f2:	60 81       	ld	r22, Z
    25f4:	71 81       	ldd	r23, Z+1	; 0x01
    25f6:	82 81       	ldd	r24, Z+2	; 0x02
    25f8:	93 81       	ldd	r25, Z+3	; 0x03
    25fa:	20 e0       	ldi	r18, 0x00	; 0
    25fc:	30 e0       	ldi	r19, 0x00	; 0
    25fe:	40 e8       	ldi	r20, 0x80	; 128
    2600:	5f e3       	ldi	r21, 0x3F	; 63
    2602:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__cmpsf2>
    2606:	88 23       	and	r24, r24
    2608:	34 f4       	brge	.+12     	; 0x2616 <__stack+0x1db7>
		__ticks = 1;
    260a:	fe 01       	movw	r30, r28
    260c:	e0 59       	subi	r30, 0x90	; 144
    260e:	ff 4f       	sbci	r31, 0xFF	; 255
    2610:	81 e0       	ldi	r24, 0x01	; 1
    2612:	80 83       	st	Z, r24
    2614:	e0 c0       	rjmp	.+448    	; 0x27d6 <__stack+0x1f77>
	else if (__tmp > 255)
    2616:	fe 01       	movw	r30, r28
    2618:	ef 58       	subi	r30, 0x8F	; 143
    261a:	ff 4f       	sbci	r31, 0xFF	; 255
    261c:	60 81       	ld	r22, Z
    261e:	71 81       	ldd	r23, Z+1	; 0x01
    2620:	82 81       	ldd	r24, Z+2	; 0x02
    2622:	93 81       	ldd	r25, Z+3	; 0x03
    2624:	20 e0       	ldi	r18, 0x00	; 0
    2626:	30 e0       	ldi	r19, 0x00	; 0
    2628:	4f e7       	ldi	r20, 0x7F	; 127
    262a:	53 e4       	ldi	r21, 0x43	; 67
    262c:	0e 94 76 26 	call	0x4cec	; 0x4cec <__gesf2>
    2630:	18 16       	cp	r1, r24
    2632:	0c f0       	brlt	.+2      	; 0x2636 <__stack+0x1dd7>
    2634:	c0 c0       	rjmp	.+384    	; 0x27b6 <__stack+0x1f57>
	{
		_delay_ms(__us / 1000.0);
    2636:	fe 01       	movw	r30, r28
    2638:	eb 58       	subi	r30, 0x8B	; 139
    263a:	ff 4f       	sbci	r31, 0xFF	; 255
    263c:	60 81       	ld	r22, Z
    263e:	71 81       	ldd	r23, Z+1	; 0x01
    2640:	82 81       	ldd	r24, Z+2	; 0x02
    2642:	93 81       	ldd	r25, Z+3	; 0x03
    2644:	20 e0       	ldi	r18, 0x00	; 0
    2646:	30 e0       	ldi	r19, 0x00	; 0
    2648:	4a e7       	ldi	r20, 0x7A	; 122
    264a:	54 e4       	ldi	r21, 0x44	; 68
    264c:	0e 94 6d 25 	call	0x4ada	; 0x4ada <__divsf3>
    2650:	dc 01       	movw	r26, r24
    2652:	cb 01       	movw	r24, r22
    2654:	fe 01       	movw	r30, r28
    2656:	e4 59       	subi	r30, 0x94	; 148
    2658:	ff 4f       	sbci	r31, 0xFF	; 255
    265a:	80 83       	st	Z, r24
    265c:	91 83       	std	Z+1, r25	; 0x01
    265e:	a2 83       	std	Z+2, r26	; 0x02
    2660:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2662:	8e 01       	movw	r16, r28
    2664:	08 59       	subi	r16, 0x98	; 152
    2666:	1f 4f       	sbci	r17, 0xFF	; 255
    2668:	fe 01       	movw	r30, r28
    266a:	e4 59       	subi	r30, 0x94	; 148
    266c:	ff 4f       	sbci	r31, 0xFF	; 255
    266e:	60 81       	ld	r22, Z
    2670:	71 81       	ldd	r23, Z+1	; 0x01
    2672:	82 81       	ldd	r24, Z+2	; 0x02
    2674:	93 81       	ldd	r25, Z+3	; 0x03
    2676:	20 e0       	ldi	r18, 0x00	; 0
    2678:	30 e0       	ldi	r19, 0x00	; 0
    267a:	4a e7       	ldi	r20, 0x7A	; 122
    267c:	55 e4       	ldi	r21, 0x45	; 69
    267e:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
    2682:	dc 01       	movw	r26, r24
    2684:	cb 01       	movw	r24, r22
    2686:	f8 01       	movw	r30, r16
    2688:	80 83       	st	Z, r24
    268a:	91 83       	std	Z+1, r25	; 0x01
    268c:	a2 83       	std	Z+2, r26	; 0x02
    268e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2690:	fe 01       	movw	r30, r28
    2692:	e8 59       	subi	r30, 0x98	; 152
    2694:	ff 4f       	sbci	r31, 0xFF	; 255
    2696:	60 81       	ld	r22, Z
    2698:	71 81       	ldd	r23, Z+1	; 0x01
    269a:	82 81       	ldd	r24, Z+2	; 0x02
    269c:	93 81       	ldd	r25, Z+3	; 0x03
    269e:	20 e0       	ldi	r18, 0x00	; 0
    26a0:	30 e0       	ldi	r19, 0x00	; 0
    26a2:	40 e8       	ldi	r20, 0x80	; 128
    26a4:	5f e3       	ldi	r21, 0x3F	; 63
    26a6:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__cmpsf2>
    26aa:	88 23       	and	r24, r24
    26ac:	44 f4       	brge	.+16     	; 0x26be <__stack+0x1e5f>
		__ticks = 1;
    26ae:	fe 01       	movw	r30, r28
    26b0:	ea 59       	subi	r30, 0x9A	; 154
    26b2:	ff 4f       	sbci	r31, 0xFF	; 255
    26b4:	81 e0       	ldi	r24, 0x01	; 1
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	91 83       	std	Z+1, r25	; 0x01
    26ba:	80 83       	st	Z, r24
    26bc:	64 c0       	rjmp	.+200    	; 0x2786 <__stack+0x1f27>
	else if (__tmp > 65535)
    26be:	fe 01       	movw	r30, r28
    26c0:	e8 59       	subi	r30, 0x98	; 152
    26c2:	ff 4f       	sbci	r31, 0xFF	; 255
    26c4:	60 81       	ld	r22, Z
    26c6:	71 81       	ldd	r23, Z+1	; 0x01
    26c8:	82 81       	ldd	r24, Z+2	; 0x02
    26ca:	93 81       	ldd	r25, Z+3	; 0x03
    26cc:	20 e0       	ldi	r18, 0x00	; 0
    26ce:	3f ef       	ldi	r19, 0xFF	; 255
    26d0:	4f e7       	ldi	r20, 0x7F	; 127
    26d2:	57 e4       	ldi	r21, 0x47	; 71
    26d4:	0e 94 76 26 	call	0x4cec	; 0x4cec <__gesf2>
    26d8:	18 16       	cp	r1, r24
    26da:	0c f0       	brlt	.+2      	; 0x26de <__stack+0x1e7f>
    26dc:	43 c0       	rjmp	.+134    	; 0x2764 <__stack+0x1f05>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26de:	fe 01       	movw	r30, r28
    26e0:	e4 59       	subi	r30, 0x94	; 148
    26e2:	ff 4f       	sbci	r31, 0xFF	; 255
    26e4:	60 81       	ld	r22, Z
    26e6:	71 81       	ldd	r23, Z+1	; 0x01
    26e8:	82 81       	ldd	r24, Z+2	; 0x02
    26ea:	93 81       	ldd	r25, Z+3	; 0x03
    26ec:	20 e0       	ldi	r18, 0x00	; 0
    26ee:	30 e0       	ldi	r19, 0x00	; 0
    26f0:	40 e2       	ldi	r20, 0x20	; 32
    26f2:	51 e4       	ldi	r21, 0x41	; 65
    26f4:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
    26f8:	dc 01       	movw	r26, r24
    26fa:	cb 01       	movw	r24, r22
    26fc:	8e 01       	movw	r16, r28
    26fe:	0a 59       	subi	r16, 0x9A	; 154
    2700:	1f 4f       	sbci	r17, 0xFF	; 255
    2702:	bc 01       	movw	r22, r24
    2704:	cd 01       	movw	r24, r26
    2706:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
    270a:	dc 01       	movw	r26, r24
    270c:	cb 01       	movw	r24, r22
    270e:	f8 01       	movw	r30, r16
    2710:	91 83       	std	Z+1, r25	; 0x01
    2712:	80 83       	st	Z, r24
    2714:	1f c0       	rjmp	.+62     	; 0x2754 <__stack+0x1ef5>
    2716:	fe 01       	movw	r30, r28
    2718:	ec 59       	subi	r30, 0x9C	; 156
    271a:	ff 4f       	sbci	r31, 0xFF	; 255
    271c:	80 e9       	ldi	r24, 0x90	; 144
    271e:	91 e0       	ldi	r25, 0x01	; 1
    2720:	91 83       	std	Z+1, r25	; 0x01
    2722:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2724:	fe 01       	movw	r30, r28
    2726:	ec 59       	subi	r30, 0x9C	; 156
    2728:	ff 4f       	sbci	r31, 0xFF	; 255
    272a:	80 81       	ld	r24, Z
    272c:	91 81       	ldd	r25, Z+1	; 0x01
    272e:	01 97       	sbiw	r24, 0x01	; 1
    2730:	f1 f7       	brne	.-4      	; 0x272e <__stack+0x1ecf>
    2732:	fe 01       	movw	r30, r28
    2734:	ec 59       	subi	r30, 0x9C	; 156
    2736:	ff 4f       	sbci	r31, 0xFF	; 255
    2738:	91 83       	std	Z+1, r25	; 0x01
    273a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    273c:	de 01       	movw	r26, r28
    273e:	aa 59       	subi	r26, 0x9A	; 154
    2740:	bf 4f       	sbci	r27, 0xFF	; 255
    2742:	fe 01       	movw	r30, r28
    2744:	ea 59       	subi	r30, 0x9A	; 154
    2746:	ff 4f       	sbci	r31, 0xFF	; 255
    2748:	80 81       	ld	r24, Z
    274a:	91 81       	ldd	r25, Z+1	; 0x01
    274c:	01 97       	sbiw	r24, 0x01	; 1
    274e:	11 96       	adiw	r26, 0x01	; 1
    2750:	9c 93       	st	X, r25
    2752:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2754:	fe 01       	movw	r30, r28
    2756:	ea 59       	subi	r30, 0x9A	; 154
    2758:	ff 4f       	sbci	r31, 0xFF	; 255
    275a:	80 81       	ld	r24, Z
    275c:	91 81       	ldd	r25, Z+1	; 0x01
    275e:	00 97       	sbiw	r24, 0x00	; 0
    2760:	d1 f6       	brne	.-76     	; 0x2716 <__stack+0x1eb7>
    2762:	4b c0       	rjmp	.+150    	; 0x27fa <__stack+0x1f9b>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2764:	8e 01       	movw	r16, r28
    2766:	0a 59       	subi	r16, 0x9A	; 154
    2768:	1f 4f       	sbci	r17, 0xFF	; 255
    276a:	fe 01       	movw	r30, r28
    276c:	e8 59       	subi	r30, 0x98	; 152
    276e:	ff 4f       	sbci	r31, 0xFF	; 255
    2770:	60 81       	ld	r22, Z
    2772:	71 81       	ldd	r23, Z+1	; 0x01
    2774:	82 81       	ldd	r24, Z+2	; 0x02
    2776:	93 81       	ldd	r25, Z+3	; 0x03
    2778:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
    277c:	dc 01       	movw	r26, r24
    277e:	cb 01       	movw	r24, r22
    2780:	f8 01       	movw	r30, r16
    2782:	91 83       	std	Z+1, r25	; 0x01
    2784:	80 83       	st	Z, r24
    2786:	de 01       	movw	r26, r28
    2788:	ae 59       	subi	r26, 0x9E	; 158
    278a:	bf 4f       	sbci	r27, 0xFF	; 255
    278c:	fe 01       	movw	r30, r28
    278e:	ea 59       	subi	r30, 0x9A	; 154
    2790:	ff 4f       	sbci	r31, 0xFF	; 255
    2792:	80 81       	ld	r24, Z
    2794:	91 81       	ldd	r25, Z+1	; 0x01
    2796:	11 96       	adiw	r26, 0x01	; 1
    2798:	9c 93       	st	X, r25
    279a:	8e 93       	st	-X, r24
    279c:	fe 01       	movw	r30, r28
    279e:	ee 59       	subi	r30, 0x9E	; 158
    27a0:	ff 4f       	sbci	r31, 0xFF	; 255
    27a2:	80 81       	ld	r24, Z
    27a4:	91 81       	ldd	r25, Z+1	; 0x01
    27a6:	01 97       	sbiw	r24, 0x01	; 1
    27a8:	f1 f7       	brne	.-4      	; 0x27a6 <__stack+0x1f47>
    27aa:	fe 01       	movw	r30, r28
    27ac:	ee 59       	subi	r30, 0x9E	; 158
    27ae:	ff 4f       	sbci	r31, 0xFF	; 255
    27b0:	91 83       	std	Z+1, r25	; 0x01
    27b2:	80 83       	st	Z, r24
    27b4:	22 c0       	rjmp	.+68     	; 0x27fa <__stack+0x1f9b>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    27b6:	8e 01       	movw	r16, r28
    27b8:	00 59       	subi	r16, 0x90	; 144
    27ba:	1f 4f       	sbci	r17, 0xFF	; 255
    27bc:	fe 01       	movw	r30, r28
    27be:	ef 58       	subi	r30, 0x8F	; 143
    27c0:	ff 4f       	sbci	r31, 0xFF	; 255
    27c2:	60 81       	ld	r22, Z
    27c4:	71 81       	ldd	r23, Z+1	; 0x01
    27c6:	82 81       	ldd	r24, Z+2	; 0x02
    27c8:	93 81       	ldd	r25, Z+3	; 0x03
    27ca:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
    27ce:	dc 01       	movw	r26, r24
    27d0:	cb 01       	movw	r24, r22
    27d2:	f8 01       	movw	r30, r16
    27d4:	80 83       	st	Z, r24
    27d6:	de 01       	movw	r26, r28
    27d8:	af 59       	subi	r26, 0x9F	; 159
    27da:	bf 4f       	sbci	r27, 0xFF	; 255
    27dc:	fe 01       	movw	r30, r28
    27de:	e0 59       	subi	r30, 0x90	; 144
    27e0:	ff 4f       	sbci	r31, 0xFF	; 255
    27e2:	80 81       	ld	r24, Z
    27e4:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    27e6:	fe 01       	movw	r30, r28
    27e8:	ef 59       	subi	r30, 0x9F	; 159
    27ea:	ff 4f       	sbci	r31, 0xFF	; 255
    27ec:	80 81       	ld	r24, Z
    27ee:	8a 95       	dec	r24
    27f0:	f1 f7       	brne	.-4      	; 0x27ee <__stack+0x1f8f>
    27f2:	fe 01       	movw	r30, r28
    27f4:	ef 59       	subi	r30, 0x9F	; 159
    27f6:	ff 4f       	sbci	r31, 0xFF	; 255
    27f8:	80 83       	st	Z, r24
   _delay_us(1);
   PS2data8=0;
    27fa:	10 92 65 00 	sts	0x0065, r1
   for(i=0;i<8;i++) // 8 byte x axis of left joy
    27fe:	10 92 63 00 	sts	0x0063, r1
    2802:	5e c1       	rjmp	.+700    	; 0x2ac0 <__stack+0x2261>
   {
      CLR(PS2PORT,PS2cmd);
    2804:	a5 e3       	ldi	r26, 0x35	; 53
    2806:	b0 e0       	ldi	r27, 0x00	; 0
    2808:	e5 e3       	ldi	r30, 0x35	; 53
    280a:	f0 e0       	ldi	r31, 0x00	; 0
    280c:	80 81       	ld	r24, Z
    280e:	8b 7f       	andi	r24, 0xFB	; 251
    2810:	8c 93       	st	X, r24
      CLR(PS2PORT,PS2clk);_delay_us(1);
    2812:	a5 e3       	ldi	r26, 0x35	; 53
    2814:	b0 e0       	ldi	r27, 0x00	; 0
    2816:	e5 e3       	ldi	r30, 0x35	; 53
    2818:	f0 e0       	ldi	r31, 0x00	; 0
    281a:	80 81       	ld	r24, Z
    281c:	8e 7f       	andi	r24, 0xFE	; 254
    281e:	8c 93       	st	X, r24
    2820:	fe 01       	movw	r30, r28
    2822:	e3 5a       	subi	r30, 0xA3	; 163
    2824:	ff 4f       	sbci	r31, 0xFF	; 255
    2826:	80 e0       	ldi	r24, 0x00	; 0
    2828:	90 e0       	ldi	r25, 0x00	; 0
    282a:	a0 e8       	ldi	r26, 0x80	; 128
    282c:	bf e3       	ldi	r27, 0x3F	; 63
    282e:	80 83       	st	Z, r24
    2830:	91 83       	std	Z+1, r25	; 0x01
    2832:	a2 83       	std	Z+2, r26	; 0x02
    2834:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2836:	8e 01       	movw	r16, r28
    2838:	07 5a       	subi	r16, 0xA7	; 167
    283a:	1f 4f       	sbci	r17, 0xFF	; 255
    283c:	fe 01       	movw	r30, r28
    283e:	e3 5a       	subi	r30, 0xA3	; 163
    2840:	ff 4f       	sbci	r31, 0xFF	; 255
    2842:	60 81       	ld	r22, Z
    2844:	71 81       	ldd	r23, Z+1	; 0x01
    2846:	82 81       	ldd	r24, Z+2	; 0x02
    2848:	93 81       	ldd	r25, Z+3	; 0x03
    284a:	2b ea       	ldi	r18, 0xAB	; 171
    284c:	3a ea       	ldi	r19, 0xAA	; 170
    284e:	4a ea       	ldi	r20, 0xAA	; 170
    2850:	50 e4       	ldi	r21, 0x40	; 64
    2852:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
    2856:	dc 01       	movw	r26, r24
    2858:	cb 01       	movw	r24, r22
    285a:	f8 01       	movw	r30, r16
    285c:	80 83       	st	Z, r24
    285e:	91 83       	std	Z+1, r25	; 0x01
    2860:	a2 83       	std	Z+2, r26	; 0x02
    2862:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2864:	fe 01       	movw	r30, r28
    2866:	e7 5a       	subi	r30, 0xA7	; 167
    2868:	ff 4f       	sbci	r31, 0xFF	; 255
    286a:	60 81       	ld	r22, Z
    286c:	71 81       	ldd	r23, Z+1	; 0x01
    286e:	82 81       	ldd	r24, Z+2	; 0x02
    2870:	93 81       	ldd	r25, Z+3	; 0x03
    2872:	20 e0       	ldi	r18, 0x00	; 0
    2874:	30 e0       	ldi	r19, 0x00	; 0
    2876:	40 e8       	ldi	r20, 0x80	; 128
    2878:	5f e3       	ldi	r21, 0x3F	; 63
    287a:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__cmpsf2>
    287e:	88 23       	and	r24, r24
    2880:	34 f4       	brge	.+12     	; 0x288e <__stack+0x202f>
		__ticks = 1;
    2882:	fe 01       	movw	r30, r28
    2884:	e8 5a       	subi	r30, 0xA8	; 168
    2886:	ff 4f       	sbci	r31, 0xFF	; 255
    2888:	81 e0       	ldi	r24, 0x01	; 1
    288a:	80 83       	st	Z, r24
    288c:	e0 c0       	rjmp	.+448    	; 0x2a4e <__stack+0x21ef>
	else if (__tmp > 255)
    288e:	fe 01       	movw	r30, r28
    2890:	e7 5a       	subi	r30, 0xA7	; 167
    2892:	ff 4f       	sbci	r31, 0xFF	; 255
    2894:	60 81       	ld	r22, Z
    2896:	71 81       	ldd	r23, Z+1	; 0x01
    2898:	82 81       	ldd	r24, Z+2	; 0x02
    289a:	93 81       	ldd	r25, Z+3	; 0x03
    289c:	20 e0       	ldi	r18, 0x00	; 0
    289e:	30 e0       	ldi	r19, 0x00	; 0
    28a0:	4f e7       	ldi	r20, 0x7F	; 127
    28a2:	53 e4       	ldi	r21, 0x43	; 67
    28a4:	0e 94 76 26 	call	0x4cec	; 0x4cec <__gesf2>
    28a8:	18 16       	cp	r1, r24
    28aa:	0c f0       	brlt	.+2      	; 0x28ae <__stack+0x204f>
    28ac:	c0 c0       	rjmp	.+384    	; 0x2a2e <__stack+0x21cf>
	{
		_delay_ms(__us / 1000.0);
    28ae:	fe 01       	movw	r30, r28
    28b0:	e3 5a       	subi	r30, 0xA3	; 163
    28b2:	ff 4f       	sbci	r31, 0xFF	; 255
    28b4:	60 81       	ld	r22, Z
    28b6:	71 81       	ldd	r23, Z+1	; 0x01
    28b8:	82 81       	ldd	r24, Z+2	; 0x02
    28ba:	93 81       	ldd	r25, Z+3	; 0x03
    28bc:	20 e0       	ldi	r18, 0x00	; 0
    28be:	30 e0       	ldi	r19, 0x00	; 0
    28c0:	4a e7       	ldi	r20, 0x7A	; 122
    28c2:	54 e4       	ldi	r21, 0x44	; 68
    28c4:	0e 94 6d 25 	call	0x4ada	; 0x4ada <__divsf3>
    28c8:	dc 01       	movw	r26, r24
    28ca:	cb 01       	movw	r24, r22
    28cc:	fe 01       	movw	r30, r28
    28ce:	ec 5a       	subi	r30, 0xAC	; 172
    28d0:	ff 4f       	sbci	r31, 0xFF	; 255
    28d2:	80 83       	st	Z, r24
    28d4:	91 83       	std	Z+1, r25	; 0x01
    28d6:	a2 83       	std	Z+2, r26	; 0x02
    28d8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28da:	8e 01       	movw	r16, r28
    28dc:	00 5b       	subi	r16, 0xB0	; 176
    28de:	1f 4f       	sbci	r17, 0xFF	; 255
    28e0:	fe 01       	movw	r30, r28
    28e2:	ec 5a       	subi	r30, 0xAC	; 172
    28e4:	ff 4f       	sbci	r31, 0xFF	; 255
    28e6:	60 81       	ld	r22, Z
    28e8:	71 81       	ldd	r23, Z+1	; 0x01
    28ea:	82 81       	ldd	r24, Z+2	; 0x02
    28ec:	93 81       	ldd	r25, Z+3	; 0x03
    28ee:	20 e0       	ldi	r18, 0x00	; 0
    28f0:	30 e0       	ldi	r19, 0x00	; 0
    28f2:	4a e7       	ldi	r20, 0x7A	; 122
    28f4:	55 e4       	ldi	r21, 0x45	; 69
    28f6:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
    28fa:	dc 01       	movw	r26, r24
    28fc:	cb 01       	movw	r24, r22
    28fe:	f8 01       	movw	r30, r16
    2900:	80 83       	st	Z, r24
    2902:	91 83       	std	Z+1, r25	; 0x01
    2904:	a2 83       	std	Z+2, r26	; 0x02
    2906:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2908:	fe 01       	movw	r30, r28
    290a:	e0 5b       	subi	r30, 0xB0	; 176
    290c:	ff 4f       	sbci	r31, 0xFF	; 255
    290e:	60 81       	ld	r22, Z
    2910:	71 81       	ldd	r23, Z+1	; 0x01
    2912:	82 81       	ldd	r24, Z+2	; 0x02
    2914:	93 81       	ldd	r25, Z+3	; 0x03
    2916:	20 e0       	ldi	r18, 0x00	; 0
    2918:	30 e0       	ldi	r19, 0x00	; 0
    291a:	40 e8       	ldi	r20, 0x80	; 128
    291c:	5f e3       	ldi	r21, 0x3F	; 63
    291e:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__cmpsf2>
    2922:	88 23       	and	r24, r24
    2924:	44 f4       	brge	.+16     	; 0x2936 <__stack+0x20d7>
		__ticks = 1;
    2926:	fe 01       	movw	r30, r28
    2928:	e2 5b       	subi	r30, 0xB2	; 178
    292a:	ff 4f       	sbci	r31, 0xFF	; 255
    292c:	81 e0       	ldi	r24, 0x01	; 1
    292e:	90 e0       	ldi	r25, 0x00	; 0
    2930:	91 83       	std	Z+1, r25	; 0x01
    2932:	80 83       	st	Z, r24
    2934:	64 c0       	rjmp	.+200    	; 0x29fe <__stack+0x219f>
	else if (__tmp > 65535)
    2936:	fe 01       	movw	r30, r28
    2938:	e0 5b       	subi	r30, 0xB0	; 176
    293a:	ff 4f       	sbci	r31, 0xFF	; 255
    293c:	60 81       	ld	r22, Z
    293e:	71 81       	ldd	r23, Z+1	; 0x01
    2940:	82 81       	ldd	r24, Z+2	; 0x02
    2942:	93 81       	ldd	r25, Z+3	; 0x03
    2944:	20 e0       	ldi	r18, 0x00	; 0
    2946:	3f ef       	ldi	r19, 0xFF	; 255
    2948:	4f e7       	ldi	r20, 0x7F	; 127
    294a:	57 e4       	ldi	r21, 0x47	; 71
    294c:	0e 94 76 26 	call	0x4cec	; 0x4cec <__gesf2>
    2950:	18 16       	cp	r1, r24
    2952:	0c f0       	brlt	.+2      	; 0x2956 <__stack+0x20f7>
    2954:	43 c0       	rjmp	.+134    	; 0x29dc <__stack+0x217d>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2956:	fe 01       	movw	r30, r28
    2958:	ec 5a       	subi	r30, 0xAC	; 172
    295a:	ff 4f       	sbci	r31, 0xFF	; 255
    295c:	60 81       	ld	r22, Z
    295e:	71 81       	ldd	r23, Z+1	; 0x01
    2960:	82 81       	ldd	r24, Z+2	; 0x02
    2962:	93 81       	ldd	r25, Z+3	; 0x03
    2964:	20 e0       	ldi	r18, 0x00	; 0
    2966:	30 e0       	ldi	r19, 0x00	; 0
    2968:	40 e2       	ldi	r20, 0x20	; 32
    296a:	51 e4       	ldi	r21, 0x41	; 65
    296c:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
    2970:	dc 01       	movw	r26, r24
    2972:	cb 01       	movw	r24, r22
    2974:	8e 01       	movw	r16, r28
    2976:	02 5b       	subi	r16, 0xB2	; 178
    2978:	1f 4f       	sbci	r17, 0xFF	; 255
    297a:	bc 01       	movw	r22, r24
    297c:	cd 01       	movw	r24, r26
    297e:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
    2982:	dc 01       	movw	r26, r24
    2984:	cb 01       	movw	r24, r22
    2986:	f8 01       	movw	r30, r16
    2988:	91 83       	std	Z+1, r25	; 0x01
    298a:	80 83       	st	Z, r24
    298c:	1f c0       	rjmp	.+62     	; 0x29cc <__stack+0x216d>
    298e:	fe 01       	movw	r30, r28
    2990:	e4 5b       	subi	r30, 0xB4	; 180
    2992:	ff 4f       	sbci	r31, 0xFF	; 255
    2994:	80 e9       	ldi	r24, 0x90	; 144
    2996:	91 e0       	ldi	r25, 0x01	; 1
    2998:	91 83       	std	Z+1, r25	; 0x01
    299a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    299c:	fe 01       	movw	r30, r28
    299e:	e4 5b       	subi	r30, 0xB4	; 180
    29a0:	ff 4f       	sbci	r31, 0xFF	; 255
    29a2:	80 81       	ld	r24, Z
    29a4:	91 81       	ldd	r25, Z+1	; 0x01
    29a6:	01 97       	sbiw	r24, 0x01	; 1
    29a8:	f1 f7       	brne	.-4      	; 0x29a6 <__stack+0x2147>
    29aa:	fe 01       	movw	r30, r28
    29ac:	e4 5b       	subi	r30, 0xB4	; 180
    29ae:	ff 4f       	sbci	r31, 0xFF	; 255
    29b0:	91 83       	std	Z+1, r25	; 0x01
    29b2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29b4:	de 01       	movw	r26, r28
    29b6:	a2 5b       	subi	r26, 0xB2	; 178
    29b8:	bf 4f       	sbci	r27, 0xFF	; 255
    29ba:	fe 01       	movw	r30, r28
    29bc:	e2 5b       	subi	r30, 0xB2	; 178
    29be:	ff 4f       	sbci	r31, 0xFF	; 255
    29c0:	80 81       	ld	r24, Z
    29c2:	91 81       	ldd	r25, Z+1	; 0x01
    29c4:	01 97       	sbiw	r24, 0x01	; 1
    29c6:	11 96       	adiw	r26, 0x01	; 1
    29c8:	9c 93       	st	X, r25
    29ca:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29cc:	fe 01       	movw	r30, r28
    29ce:	e2 5b       	subi	r30, 0xB2	; 178
    29d0:	ff 4f       	sbci	r31, 0xFF	; 255
    29d2:	80 81       	ld	r24, Z
    29d4:	91 81       	ldd	r25, Z+1	; 0x01
    29d6:	00 97       	sbiw	r24, 0x00	; 0
    29d8:	d1 f6       	brne	.-76     	; 0x298e <__stack+0x212f>
    29da:	4b c0       	rjmp	.+150    	; 0x2a72 <__stack+0x2213>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29dc:	8e 01       	movw	r16, r28
    29de:	02 5b       	subi	r16, 0xB2	; 178
    29e0:	1f 4f       	sbci	r17, 0xFF	; 255
    29e2:	fe 01       	movw	r30, r28
    29e4:	e0 5b       	subi	r30, 0xB0	; 176
    29e6:	ff 4f       	sbci	r31, 0xFF	; 255
    29e8:	60 81       	ld	r22, Z
    29ea:	71 81       	ldd	r23, Z+1	; 0x01
    29ec:	82 81       	ldd	r24, Z+2	; 0x02
    29ee:	93 81       	ldd	r25, Z+3	; 0x03
    29f0:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
    29f4:	dc 01       	movw	r26, r24
    29f6:	cb 01       	movw	r24, r22
    29f8:	f8 01       	movw	r30, r16
    29fa:	91 83       	std	Z+1, r25	; 0x01
    29fc:	80 83       	st	Z, r24
    29fe:	de 01       	movw	r26, r28
    2a00:	a6 5b       	subi	r26, 0xB6	; 182
    2a02:	bf 4f       	sbci	r27, 0xFF	; 255
    2a04:	fe 01       	movw	r30, r28
    2a06:	e2 5b       	subi	r30, 0xB2	; 178
    2a08:	ff 4f       	sbci	r31, 0xFF	; 255
    2a0a:	80 81       	ld	r24, Z
    2a0c:	91 81       	ldd	r25, Z+1	; 0x01
    2a0e:	11 96       	adiw	r26, 0x01	; 1
    2a10:	9c 93       	st	X, r25
    2a12:	8e 93       	st	-X, r24
    2a14:	fe 01       	movw	r30, r28
    2a16:	e6 5b       	subi	r30, 0xB6	; 182
    2a18:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1a:	80 81       	ld	r24, Z
    2a1c:	91 81       	ldd	r25, Z+1	; 0x01
    2a1e:	01 97       	sbiw	r24, 0x01	; 1
    2a20:	f1 f7       	brne	.-4      	; 0x2a1e <__stack+0x21bf>
    2a22:	fe 01       	movw	r30, r28
    2a24:	e6 5b       	subi	r30, 0xB6	; 182
    2a26:	ff 4f       	sbci	r31, 0xFF	; 255
    2a28:	91 83       	std	Z+1, r25	; 0x01
    2a2a:	80 83       	st	Z, r24
    2a2c:	22 c0       	rjmp	.+68     	; 0x2a72 <__stack+0x2213>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2a2e:	8e 01       	movw	r16, r28
    2a30:	08 5a       	subi	r16, 0xA8	; 168
    2a32:	1f 4f       	sbci	r17, 0xFF	; 255
    2a34:	fe 01       	movw	r30, r28
    2a36:	e7 5a       	subi	r30, 0xA7	; 167
    2a38:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3a:	60 81       	ld	r22, Z
    2a3c:	71 81       	ldd	r23, Z+1	; 0x01
    2a3e:	82 81       	ldd	r24, Z+2	; 0x02
    2a40:	93 81       	ldd	r25, Z+3	; 0x03
    2a42:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
    2a46:	dc 01       	movw	r26, r24
    2a48:	cb 01       	movw	r24, r22
    2a4a:	f8 01       	movw	r30, r16
    2a4c:	80 83       	st	Z, r24
    2a4e:	de 01       	movw	r26, r28
    2a50:	a7 5b       	subi	r26, 0xB7	; 183
    2a52:	bf 4f       	sbci	r27, 0xFF	; 255
    2a54:	fe 01       	movw	r30, r28
    2a56:	e8 5a       	subi	r30, 0xA8	; 168
    2a58:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5a:	80 81       	ld	r24, Z
    2a5c:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2a5e:	fe 01       	movw	r30, r28
    2a60:	e7 5b       	subi	r30, 0xB7	; 183
    2a62:	ff 4f       	sbci	r31, 0xFF	; 255
    2a64:	80 81       	ld	r24, Z
    2a66:	8a 95       	dec	r24
    2a68:	f1 f7       	brne	.-4      	; 0x2a66 <__stack+0x2207>
    2a6a:	fe 01       	movw	r30, r28
    2a6c:	e7 5b       	subi	r30, 0xB7	; 183
    2a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a70:	80 83       	st	Z, r24
	  if(CHK(PS2IN,PS2dat)) SET(PS2data8,i);
    2a72:	e3 e3       	ldi	r30, 0x33	; 51
    2a74:	f0 e0       	ldi	r31, 0x00	; 0
    2a76:	80 81       	ld	r24, Z
    2a78:	88 2f       	mov	r24, r24
    2a7a:	90 e0       	ldi	r25, 0x00	; 0
    2a7c:	82 70       	andi	r24, 0x02	; 2
    2a7e:	90 70       	andi	r25, 0x00	; 0
    2a80:	00 97       	sbiw	r24, 0x00	; 0
    2a82:	91 f0       	breq	.+36     	; 0x2aa8 <__stack+0x2249>
    2a84:	80 91 63 00 	lds	r24, 0x0063
    2a88:	28 2f       	mov	r18, r24
    2a8a:	30 e0       	ldi	r19, 0x00	; 0
    2a8c:	81 e0       	ldi	r24, 0x01	; 1
    2a8e:	90 e0       	ldi	r25, 0x00	; 0
    2a90:	02 2e       	mov	r0, r18
    2a92:	02 c0       	rjmp	.+4      	; 0x2a98 <__stack+0x2239>
    2a94:	88 0f       	add	r24, r24
    2a96:	99 1f       	adc	r25, r25
    2a98:	0a 94       	dec	r0
    2a9a:	e2 f7       	brpl	.-8      	; 0x2a94 <__stack+0x2235>
    2a9c:	98 2f       	mov	r25, r24
    2a9e:	80 91 65 00 	lds	r24, 0x0065
    2aa2:	89 2b       	or	r24, r25
    2aa4:	80 93 65 00 	sts	0x0065, r24
      SET(PS2PORT,PS2clk);
    2aa8:	a5 e3       	ldi	r26, 0x35	; 53
    2aaa:	b0 e0       	ldi	r27, 0x00	; 0
    2aac:	e5 e3       	ldi	r30, 0x35	; 53
    2aae:	f0 e0       	ldi	r31, 0x00	; 0
    2ab0:	80 81       	ld	r24, Z
    2ab2:	81 60       	ori	r24, 0x01	; 1
    2ab4:	8c 93       	st	X, r24
      SET(PS2PORT,PS2clk);
   }
   SET(PS2PORT,PS2cmd); 
   _delay_us(1);
   PS2data8=0;
   for(i=0;i<8;i++) // 8 byte x axis of left joy
    2ab6:	80 91 63 00 	lds	r24, 0x0063
    2aba:	8f 5f       	subi	r24, 0xFF	; 255
    2abc:	80 93 63 00 	sts	0x0063, r24
    2ac0:	80 91 63 00 	lds	r24, 0x0063
    2ac4:	88 30       	cpi	r24, 0x08	; 8
    2ac6:	08 f4       	brcc	.+2      	; 0x2aca <__stack+0x226b>
    2ac8:	9d ce       	rjmp	.-710    	; 0x2804 <__stack+0x1fa5>
      CLR(PS2PORT,PS2cmd);
      CLR(PS2PORT,PS2clk);_delay_us(1);
	  if(CHK(PS2IN,PS2dat)) SET(PS2data8,i);
      SET(PS2PORT,PS2clk);
   }
   SET(PS2PORT,PS2cmd); 
    2aca:	a5 e3       	ldi	r26, 0x35	; 53
    2acc:	b0 e0       	ldi	r27, 0x00	; 0
    2ace:	e5 e3       	ldi	r30, 0x35	; 53
    2ad0:	f0 e0       	ldi	r31, 0x00	; 0
    2ad2:	80 81       	ld	r24, Z
    2ad4:	84 60       	ori	r24, 0x04	; 4
    2ad6:	8c 93       	st	X, r24
    2ad8:	fe 01       	movw	r30, r28
    2ada:	eb 5b       	subi	r30, 0xBB	; 187
    2adc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ade:	80 e0       	ldi	r24, 0x00	; 0
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
    2ae2:	a0 e8       	ldi	r26, 0x80	; 128
    2ae4:	bf e3       	ldi	r27, 0x3F	; 63
    2ae6:	80 83       	st	Z, r24
    2ae8:	91 83       	std	Z+1, r25	; 0x01
    2aea:	a2 83       	std	Z+2, r26	; 0x02
    2aec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2aee:	8e 01       	movw	r16, r28
    2af0:	0f 5b       	subi	r16, 0xBF	; 191
    2af2:	1f 4f       	sbci	r17, 0xFF	; 255
    2af4:	fe 01       	movw	r30, r28
    2af6:	eb 5b       	subi	r30, 0xBB	; 187
    2af8:	ff 4f       	sbci	r31, 0xFF	; 255
    2afa:	60 81       	ld	r22, Z
    2afc:	71 81       	ldd	r23, Z+1	; 0x01
    2afe:	82 81       	ldd	r24, Z+2	; 0x02
    2b00:	93 81       	ldd	r25, Z+3	; 0x03
    2b02:	2b ea       	ldi	r18, 0xAB	; 171
    2b04:	3a ea       	ldi	r19, 0xAA	; 170
    2b06:	4a ea       	ldi	r20, 0xAA	; 170
    2b08:	50 e4       	ldi	r21, 0x40	; 64
    2b0a:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
    2b0e:	dc 01       	movw	r26, r24
    2b10:	cb 01       	movw	r24, r22
    2b12:	f8 01       	movw	r30, r16
    2b14:	80 83       	st	Z, r24
    2b16:	91 83       	std	Z+1, r25	; 0x01
    2b18:	a2 83       	std	Z+2, r26	; 0x02
    2b1a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b1c:	fe 01       	movw	r30, r28
    2b1e:	ef 5b       	subi	r30, 0xBF	; 191
    2b20:	ff 4f       	sbci	r31, 0xFF	; 255
    2b22:	60 81       	ld	r22, Z
    2b24:	71 81       	ldd	r23, Z+1	; 0x01
    2b26:	82 81       	ldd	r24, Z+2	; 0x02
    2b28:	93 81       	ldd	r25, Z+3	; 0x03
    2b2a:	20 e0       	ldi	r18, 0x00	; 0
    2b2c:	30 e0       	ldi	r19, 0x00	; 0
    2b2e:	40 e8       	ldi	r20, 0x80	; 128
    2b30:	5f e3       	ldi	r21, 0x3F	; 63
    2b32:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__cmpsf2>
    2b36:	88 23       	and	r24, r24
    2b38:	34 f4       	brge	.+12     	; 0x2b46 <__stack+0x22e7>
		__ticks = 1;
    2b3a:	81 e0       	ldi	r24, 0x01	; 1
    2b3c:	fe 01       	movw	r30, r28
    2b3e:	e0 5c       	subi	r30, 0xC0	; 192
    2b40:	ff 4f       	sbci	r31, 0xFF	; 255
    2b42:	80 83       	st	Z, r24
    2b44:	9d c0       	rjmp	.+314    	; 0x2c80 <__stack+0x2421>
	else if (__tmp > 255)
    2b46:	fe 01       	movw	r30, r28
    2b48:	ef 5b       	subi	r30, 0xBF	; 191
    2b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b4c:	60 81       	ld	r22, Z
    2b4e:	71 81       	ldd	r23, Z+1	; 0x01
    2b50:	82 81       	ldd	r24, Z+2	; 0x02
    2b52:	93 81       	ldd	r25, Z+3	; 0x03
    2b54:	20 e0       	ldi	r18, 0x00	; 0
    2b56:	30 e0       	ldi	r19, 0x00	; 0
    2b58:	4f e7       	ldi	r20, 0x7F	; 127
    2b5a:	53 e4       	ldi	r21, 0x43	; 67
    2b5c:	0e 94 76 26 	call	0x4cec	; 0x4cec <__gesf2>
    2b60:	18 16       	cp	r1, r24
    2b62:	0c f0       	brlt	.+2      	; 0x2b66 <__stack+0x2307>
    2b64:	7e c0       	rjmp	.+252    	; 0x2c62 <__stack+0x2403>
	{
		_delay_ms(__us / 1000.0);
    2b66:	fe 01       	movw	r30, r28
    2b68:	eb 5b       	subi	r30, 0xBB	; 187
    2b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b6c:	60 81       	ld	r22, Z
    2b6e:	71 81       	ldd	r23, Z+1	; 0x01
    2b70:	82 81       	ldd	r24, Z+2	; 0x02
    2b72:	93 81       	ldd	r25, Z+3	; 0x03
    2b74:	20 e0       	ldi	r18, 0x00	; 0
    2b76:	30 e0       	ldi	r19, 0x00	; 0
    2b78:	4a e7       	ldi	r20, 0x7A	; 122
    2b7a:	54 e4       	ldi	r21, 0x44	; 68
    2b7c:	0e 94 6d 25 	call	0x4ada	; 0x4ada <__divsf3>
    2b80:	dc 01       	movw	r26, r24
    2b82:	cb 01       	movw	r24, r22
    2b84:	8c af       	std	Y+60, r24	; 0x3c
    2b86:	9d af       	std	Y+61, r25	; 0x3d
    2b88:	ae af       	std	Y+62, r26	; 0x3e
    2b8a:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b8c:	6c ad       	ldd	r22, Y+60	; 0x3c
    2b8e:	7d ad       	ldd	r23, Y+61	; 0x3d
    2b90:	8e ad       	ldd	r24, Y+62	; 0x3e
    2b92:	9f ad       	ldd	r25, Y+63	; 0x3f
    2b94:	20 e0       	ldi	r18, 0x00	; 0
    2b96:	30 e0       	ldi	r19, 0x00	; 0
    2b98:	4a e7       	ldi	r20, 0x7A	; 122
    2b9a:	55 e4       	ldi	r21, 0x45	; 69
    2b9c:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
    2ba0:	dc 01       	movw	r26, r24
    2ba2:	cb 01       	movw	r24, r22
    2ba4:	88 af       	std	Y+56, r24	; 0x38
    2ba6:	99 af       	std	Y+57, r25	; 0x39
    2ba8:	aa af       	std	Y+58, r26	; 0x3a
    2baa:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    2bac:	68 ad       	ldd	r22, Y+56	; 0x38
    2bae:	79 ad       	ldd	r23, Y+57	; 0x39
    2bb0:	8a ad       	ldd	r24, Y+58	; 0x3a
    2bb2:	9b ad       	ldd	r25, Y+59	; 0x3b
    2bb4:	20 e0       	ldi	r18, 0x00	; 0
    2bb6:	30 e0       	ldi	r19, 0x00	; 0
    2bb8:	40 e8       	ldi	r20, 0x80	; 128
    2bba:	5f e3       	ldi	r21, 0x3F	; 63
    2bbc:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__cmpsf2>
    2bc0:	88 23       	and	r24, r24
    2bc2:	2c f4       	brge	.+10     	; 0x2bce <__stack+0x236f>
		__ticks = 1;
    2bc4:	81 e0       	ldi	r24, 0x01	; 1
    2bc6:	90 e0       	ldi	r25, 0x00	; 0
    2bc8:	9f ab       	std	Y+55, r25	; 0x37
    2bca:	8e ab       	std	Y+54, r24	; 0x36
    2bcc:	3f c0       	rjmp	.+126    	; 0x2c4c <__stack+0x23ed>
	else if (__tmp > 65535)
    2bce:	68 ad       	ldd	r22, Y+56	; 0x38
    2bd0:	79 ad       	ldd	r23, Y+57	; 0x39
    2bd2:	8a ad       	ldd	r24, Y+58	; 0x3a
    2bd4:	9b ad       	ldd	r25, Y+59	; 0x3b
    2bd6:	20 e0       	ldi	r18, 0x00	; 0
    2bd8:	3f ef       	ldi	r19, 0xFF	; 255
    2bda:	4f e7       	ldi	r20, 0x7F	; 127
    2bdc:	57 e4       	ldi	r21, 0x47	; 71
    2bde:	0e 94 76 26 	call	0x4cec	; 0x4cec <__gesf2>
    2be2:	18 16       	cp	r1, r24
    2be4:	4c f5       	brge	.+82     	; 0x2c38 <__stack+0x23d9>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2be6:	6c ad       	ldd	r22, Y+60	; 0x3c
    2be8:	7d ad       	ldd	r23, Y+61	; 0x3d
    2bea:	8e ad       	ldd	r24, Y+62	; 0x3e
    2bec:	9f ad       	ldd	r25, Y+63	; 0x3f
    2bee:	20 e0       	ldi	r18, 0x00	; 0
    2bf0:	30 e0       	ldi	r19, 0x00	; 0
    2bf2:	40 e2       	ldi	r20, 0x20	; 32
    2bf4:	51 e4       	ldi	r21, 0x41	; 65
    2bf6:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
    2bfa:	dc 01       	movw	r26, r24
    2bfc:	cb 01       	movw	r24, r22
    2bfe:	bc 01       	movw	r22, r24
    2c00:	cd 01       	movw	r24, r26
    2c02:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
    2c06:	dc 01       	movw	r26, r24
    2c08:	cb 01       	movw	r24, r22
    2c0a:	9f ab       	std	Y+55, r25	; 0x37
    2c0c:	8e ab       	std	Y+54, r24	; 0x36
    2c0e:	0f c0       	rjmp	.+30     	; 0x2c2e <__stack+0x23cf>
    2c10:	80 e9       	ldi	r24, 0x90	; 144
    2c12:	91 e0       	ldi	r25, 0x01	; 1
    2c14:	9d ab       	std	Y+53, r25	; 0x35
    2c16:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2c18:	8c a9       	ldd	r24, Y+52	; 0x34
    2c1a:	9d a9       	ldd	r25, Y+53	; 0x35
    2c1c:	01 97       	sbiw	r24, 0x01	; 1
    2c1e:	f1 f7       	brne	.-4      	; 0x2c1c <__stack+0x23bd>
    2c20:	9d ab       	std	Y+53, r25	; 0x35
    2c22:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c24:	8e a9       	ldd	r24, Y+54	; 0x36
    2c26:	9f a9       	ldd	r25, Y+55	; 0x37
    2c28:	01 97       	sbiw	r24, 0x01	; 1
    2c2a:	9f ab       	std	Y+55, r25	; 0x37
    2c2c:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c2e:	8e a9       	ldd	r24, Y+54	; 0x36
    2c30:	9f a9       	ldd	r25, Y+55	; 0x37
    2c32:	00 97       	sbiw	r24, 0x00	; 0
    2c34:	69 f7       	brne	.-38     	; 0x2c10 <__stack+0x23b1>
    2c36:	2d c0       	rjmp	.+90     	; 0x2c92 <__stack+0x2433>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c38:	68 ad       	ldd	r22, Y+56	; 0x38
    2c3a:	79 ad       	ldd	r23, Y+57	; 0x39
    2c3c:	8a ad       	ldd	r24, Y+58	; 0x3a
    2c3e:	9b ad       	ldd	r25, Y+59	; 0x3b
    2c40:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
    2c44:	dc 01       	movw	r26, r24
    2c46:	cb 01       	movw	r24, r22
    2c48:	9f ab       	std	Y+55, r25	; 0x37
    2c4a:	8e ab       	std	Y+54, r24	; 0x36
    2c4c:	8e a9       	ldd	r24, Y+54	; 0x36
    2c4e:	9f a9       	ldd	r25, Y+55	; 0x37
    2c50:	9b ab       	std	Y+51, r25	; 0x33
    2c52:	8a ab       	std	Y+50, r24	; 0x32
    2c54:	8a a9       	ldd	r24, Y+50	; 0x32
    2c56:	9b a9       	ldd	r25, Y+51	; 0x33
    2c58:	01 97       	sbiw	r24, 0x01	; 1
    2c5a:	f1 f7       	brne	.-4      	; 0x2c58 <__stack+0x23f9>
    2c5c:	9b ab       	std	Y+51, r25	; 0x33
    2c5e:	8a ab       	std	Y+50, r24	; 0x32
    2c60:	18 c0       	rjmp	.+48     	; 0x2c92 <__stack+0x2433>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2c62:	fe 01       	movw	r30, r28
    2c64:	ef 5b       	subi	r30, 0xBF	; 191
    2c66:	ff 4f       	sbci	r31, 0xFF	; 255
    2c68:	60 81       	ld	r22, Z
    2c6a:	71 81       	ldd	r23, Z+1	; 0x01
    2c6c:	82 81       	ldd	r24, Z+2	; 0x02
    2c6e:	93 81       	ldd	r25, Z+3	; 0x03
    2c70:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
    2c74:	dc 01       	movw	r26, r24
    2c76:	cb 01       	movw	r24, r22
    2c78:	fe 01       	movw	r30, r28
    2c7a:	e0 5c       	subi	r30, 0xC0	; 192
    2c7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c7e:	80 83       	st	Z, r24
    2c80:	fe 01       	movw	r30, r28
    2c82:	e0 5c       	subi	r30, 0xC0	; 192
    2c84:	ff 4f       	sbci	r31, 0xFF	; 255
    2c86:	80 81       	ld	r24, Z
    2c88:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2c8a:	89 a9       	ldd	r24, Y+49	; 0x31
    2c8c:	8a 95       	dec	r24
    2c8e:	f1 f7       	brne	.-4      	; 0x2c8c <__stack+0x242d>
    2c90:	89 ab       	std	Y+49, r24	; 0x31
   _delay_us(1);
   PS2data9=0;
    2c92:	10 92 62 00 	sts	0x0062, r1
   for(i=0;i<8;i++) // 9 byte y axis of left joy
    2c96:	10 92 63 00 	sts	0x0063, r1
    2c9a:	f3 c0       	rjmp	.+486    	; 0x2e82 <__stack+0x2623>
   {
      CLR(PS2PORT,PS2cmd);
    2c9c:	a5 e3       	ldi	r26, 0x35	; 53
    2c9e:	b0 e0       	ldi	r27, 0x00	; 0
    2ca0:	e5 e3       	ldi	r30, 0x35	; 53
    2ca2:	f0 e0       	ldi	r31, 0x00	; 0
    2ca4:	80 81       	ld	r24, Z
    2ca6:	8b 7f       	andi	r24, 0xFB	; 251
    2ca8:	8c 93       	st	X, r24
      CLR(PS2PORT,PS2clk);_delay_us(1);
    2caa:	a5 e3       	ldi	r26, 0x35	; 53
    2cac:	b0 e0       	ldi	r27, 0x00	; 0
    2cae:	e5 e3       	ldi	r30, 0x35	; 53
    2cb0:	f0 e0       	ldi	r31, 0x00	; 0
    2cb2:	80 81       	ld	r24, Z
    2cb4:	8e 7f       	andi	r24, 0xFE	; 254
    2cb6:	8c 93       	st	X, r24
    2cb8:	80 e0       	ldi	r24, 0x00	; 0
    2cba:	90 e0       	ldi	r25, 0x00	; 0
    2cbc:	a0 e8       	ldi	r26, 0x80	; 128
    2cbe:	bf e3       	ldi	r27, 0x3F	; 63
    2cc0:	8d a7       	std	Y+45, r24	; 0x2d
    2cc2:	9e a7       	std	Y+46, r25	; 0x2e
    2cc4:	af a7       	std	Y+47, r26	; 0x2f
    2cc6:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2cc8:	6d a5       	ldd	r22, Y+45	; 0x2d
    2cca:	7e a5       	ldd	r23, Y+46	; 0x2e
    2ccc:	8f a5       	ldd	r24, Y+47	; 0x2f
    2cce:	98 a9       	ldd	r25, Y+48	; 0x30
    2cd0:	2b ea       	ldi	r18, 0xAB	; 171
    2cd2:	3a ea       	ldi	r19, 0xAA	; 170
    2cd4:	4a ea       	ldi	r20, 0xAA	; 170
    2cd6:	50 e4       	ldi	r21, 0x40	; 64
    2cd8:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
    2cdc:	dc 01       	movw	r26, r24
    2cde:	cb 01       	movw	r24, r22
    2ce0:	89 a7       	std	Y+41, r24	; 0x29
    2ce2:	9a a7       	std	Y+42, r25	; 0x2a
    2ce4:	ab a7       	std	Y+43, r26	; 0x2b
    2ce6:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2ce8:	69 a5       	ldd	r22, Y+41	; 0x29
    2cea:	7a a5       	ldd	r23, Y+42	; 0x2a
    2cec:	8b a5       	ldd	r24, Y+43	; 0x2b
    2cee:	9c a5       	ldd	r25, Y+44	; 0x2c
    2cf0:	20 e0       	ldi	r18, 0x00	; 0
    2cf2:	30 e0       	ldi	r19, 0x00	; 0
    2cf4:	40 e8       	ldi	r20, 0x80	; 128
    2cf6:	5f e3       	ldi	r21, 0x3F	; 63
    2cf8:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__cmpsf2>
    2cfc:	88 23       	and	r24, r24
    2cfe:	1c f4       	brge	.+6      	; 0x2d06 <__stack+0x24a7>
		__ticks = 1;
    2d00:	81 e0       	ldi	r24, 0x01	; 1
    2d02:	88 a7       	std	Y+40, r24	; 0x28
    2d04:	91 c0       	rjmp	.+290    	; 0x2e28 <__stack+0x25c9>
	else if (__tmp > 255)
    2d06:	69 a5       	ldd	r22, Y+41	; 0x29
    2d08:	7a a5       	ldd	r23, Y+42	; 0x2a
    2d0a:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d0c:	9c a5       	ldd	r25, Y+44	; 0x2c
    2d0e:	20 e0       	ldi	r18, 0x00	; 0
    2d10:	30 e0       	ldi	r19, 0x00	; 0
    2d12:	4f e7       	ldi	r20, 0x7F	; 127
    2d14:	53 e4       	ldi	r21, 0x43	; 67
    2d16:	0e 94 76 26 	call	0x4cec	; 0x4cec <__gesf2>
    2d1a:	18 16       	cp	r1, r24
    2d1c:	0c f0       	brlt	.+2      	; 0x2d20 <__stack+0x24c1>
    2d1e:	7b c0       	rjmp	.+246    	; 0x2e16 <__stack+0x25b7>
	{
		_delay_ms(__us / 1000.0);
    2d20:	6d a5       	ldd	r22, Y+45	; 0x2d
    2d22:	7e a5       	ldd	r23, Y+46	; 0x2e
    2d24:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d26:	98 a9       	ldd	r25, Y+48	; 0x30
    2d28:	20 e0       	ldi	r18, 0x00	; 0
    2d2a:	30 e0       	ldi	r19, 0x00	; 0
    2d2c:	4a e7       	ldi	r20, 0x7A	; 122
    2d2e:	54 e4       	ldi	r21, 0x44	; 68
    2d30:	0e 94 6d 25 	call	0x4ada	; 0x4ada <__divsf3>
    2d34:	dc 01       	movw	r26, r24
    2d36:	cb 01       	movw	r24, r22
    2d38:	8c a3       	std	Y+36, r24	; 0x24
    2d3a:	9d a3       	std	Y+37, r25	; 0x25
    2d3c:	ae a3       	std	Y+38, r26	; 0x26
    2d3e:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d40:	6c a1       	ldd	r22, Y+36	; 0x24
    2d42:	7d a1       	ldd	r23, Y+37	; 0x25
    2d44:	8e a1       	ldd	r24, Y+38	; 0x26
    2d46:	9f a1       	ldd	r25, Y+39	; 0x27
    2d48:	20 e0       	ldi	r18, 0x00	; 0
    2d4a:	30 e0       	ldi	r19, 0x00	; 0
    2d4c:	4a e7       	ldi	r20, 0x7A	; 122
    2d4e:	55 e4       	ldi	r21, 0x45	; 69
    2d50:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
    2d54:	dc 01       	movw	r26, r24
    2d56:	cb 01       	movw	r24, r22
    2d58:	88 a3       	std	Y+32, r24	; 0x20
    2d5a:	99 a3       	std	Y+33, r25	; 0x21
    2d5c:	aa a3       	std	Y+34, r26	; 0x22
    2d5e:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2d60:	68 a1       	ldd	r22, Y+32	; 0x20
    2d62:	79 a1       	ldd	r23, Y+33	; 0x21
    2d64:	8a a1       	ldd	r24, Y+34	; 0x22
    2d66:	9b a1       	ldd	r25, Y+35	; 0x23
    2d68:	20 e0       	ldi	r18, 0x00	; 0
    2d6a:	30 e0       	ldi	r19, 0x00	; 0
    2d6c:	40 e8       	ldi	r20, 0x80	; 128
    2d6e:	5f e3       	ldi	r21, 0x3F	; 63
    2d70:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__cmpsf2>
    2d74:	88 23       	and	r24, r24
    2d76:	2c f4       	brge	.+10     	; 0x2d82 <__stack+0x2523>
		__ticks = 1;
    2d78:	81 e0       	ldi	r24, 0x01	; 1
    2d7a:	90 e0       	ldi	r25, 0x00	; 0
    2d7c:	9f 8f       	std	Y+31, r25	; 0x1f
    2d7e:	8e 8f       	std	Y+30, r24	; 0x1e
    2d80:	3f c0       	rjmp	.+126    	; 0x2e00 <__stack+0x25a1>
	else if (__tmp > 65535)
    2d82:	68 a1       	ldd	r22, Y+32	; 0x20
    2d84:	79 a1       	ldd	r23, Y+33	; 0x21
    2d86:	8a a1       	ldd	r24, Y+34	; 0x22
    2d88:	9b a1       	ldd	r25, Y+35	; 0x23
    2d8a:	20 e0       	ldi	r18, 0x00	; 0
    2d8c:	3f ef       	ldi	r19, 0xFF	; 255
    2d8e:	4f e7       	ldi	r20, 0x7F	; 127
    2d90:	57 e4       	ldi	r21, 0x47	; 71
    2d92:	0e 94 76 26 	call	0x4cec	; 0x4cec <__gesf2>
    2d96:	18 16       	cp	r1, r24
    2d98:	4c f5       	brge	.+82     	; 0x2dec <__stack+0x258d>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d9a:	6c a1       	ldd	r22, Y+36	; 0x24
    2d9c:	7d a1       	ldd	r23, Y+37	; 0x25
    2d9e:	8e a1       	ldd	r24, Y+38	; 0x26
    2da0:	9f a1       	ldd	r25, Y+39	; 0x27
    2da2:	20 e0       	ldi	r18, 0x00	; 0
    2da4:	30 e0       	ldi	r19, 0x00	; 0
    2da6:	40 e2       	ldi	r20, 0x20	; 32
    2da8:	51 e4       	ldi	r21, 0x41	; 65
    2daa:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
    2dae:	dc 01       	movw	r26, r24
    2db0:	cb 01       	movw	r24, r22
    2db2:	bc 01       	movw	r22, r24
    2db4:	cd 01       	movw	r24, r26
    2db6:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
    2dba:	dc 01       	movw	r26, r24
    2dbc:	cb 01       	movw	r24, r22
    2dbe:	9f 8f       	std	Y+31, r25	; 0x1f
    2dc0:	8e 8f       	std	Y+30, r24	; 0x1e
    2dc2:	0f c0       	rjmp	.+30     	; 0x2de2 <__stack+0x2583>
    2dc4:	80 e9       	ldi	r24, 0x90	; 144
    2dc6:	91 e0       	ldi	r25, 0x01	; 1
    2dc8:	9d 8f       	std	Y+29, r25	; 0x1d
    2dca:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2dcc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2dce:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2dd0:	01 97       	sbiw	r24, 0x01	; 1
    2dd2:	f1 f7       	brne	.-4      	; 0x2dd0 <__stack+0x2571>
    2dd4:	9d 8f       	std	Y+29, r25	; 0x1d
    2dd6:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dd8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2dda:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2ddc:	01 97       	sbiw	r24, 0x01	; 1
    2dde:	9f 8f       	std	Y+31, r25	; 0x1f
    2de0:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2de2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2de4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2de6:	00 97       	sbiw	r24, 0x00	; 0
    2de8:	69 f7       	brne	.-38     	; 0x2dc4 <__stack+0x2565>
    2dea:	24 c0       	rjmp	.+72     	; 0x2e34 <__stack+0x25d5>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dec:	68 a1       	ldd	r22, Y+32	; 0x20
    2dee:	79 a1       	ldd	r23, Y+33	; 0x21
    2df0:	8a a1       	ldd	r24, Y+34	; 0x22
    2df2:	9b a1       	ldd	r25, Y+35	; 0x23
    2df4:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
    2df8:	dc 01       	movw	r26, r24
    2dfa:	cb 01       	movw	r24, r22
    2dfc:	9f 8f       	std	Y+31, r25	; 0x1f
    2dfe:	8e 8f       	std	Y+30, r24	; 0x1e
    2e00:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2e02:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2e04:	9b 8f       	std	Y+27, r25	; 0x1b
    2e06:	8a 8f       	std	Y+26, r24	; 0x1a
    2e08:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2e0a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2e0c:	01 97       	sbiw	r24, 0x01	; 1
    2e0e:	f1 f7       	brne	.-4      	; 0x2e0c <__stack+0x25ad>
    2e10:	9b 8f       	std	Y+27, r25	; 0x1b
    2e12:	8a 8f       	std	Y+26, r24	; 0x1a
    2e14:	0f c0       	rjmp	.+30     	; 0x2e34 <__stack+0x25d5>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2e16:	69 a5       	ldd	r22, Y+41	; 0x29
    2e18:	7a a5       	ldd	r23, Y+42	; 0x2a
    2e1a:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e1c:	9c a5       	ldd	r25, Y+44	; 0x2c
    2e1e:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
    2e22:	dc 01       	movw	r26, r24
    2e24:	cb 01       	movw	r24, r22
    2e26:	88 a7       	std	Y+40, r24	; 0x28
    2e28:	88 a5       	ldd	r24, Y+40	; 0x28
    2e2a:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2e2c:	89 8d       	ldd	r24, Y+25	; 0x19
    2e2e:	8a 95       	dec	r24
    2e30:	f1 f7       	brne	.-4      	; 0x2e2e <__stack+0x25cf>
    2e32:	89 8f       	std	Y+25, r24	; 0x19
	  if(CHK(PS2IN,PS2dat)) SET(PS2data9,i);
    2e34:	e3 e3       	ldi	r30, 0x33	; 51
    2e36:	f0 e0       	ldi	r31, 0x00	; 0
    2e38:	80 81       	ld	r24, Z
    2e3a:	88 2f       	mov	r24, r24
    2e3c:	90 e0       	ldi	r25, 0x00	; 0
    2e3e:	82 70       	andi	r24, 0x02	; 2
    2e40:	90 70       	andi	r25, 0x00	; 0
    2e42:	00 97       	sbiw	r24, 0x00	; 0
    2e44:	91 f0       	breq	.+36     	; 0x2e6a <__stack+0x260b>
    2e46:	80 91 63 00 	lds	r24, 0x0063
    2e4a:	28 2f       	mov	r18, r24
    2e4c:	30 e0       	ldi	r19, 0x00	; 0
    2e4e:	81 e0       	ldi	r24, 0x01	; 1
    2e50:	90 e0       	ldi	r25, 0x00	; 0
    2e52:	02 2e       	mov	r0, r18
    2e54:	02 c0       	rjmp	.+4      	; 0x2e5a <__stack+0x25fb>
    2e56:	88 0f       	add	r24, r24
    2e58:	99 1f       	adc	r25, r25
    2e5a:	0a 94       	dec	r0
    2e5c:	e2 f7       	brpl	.-8      	; 0x2e56 <__stack+0x25f7>
    2e5e:	98 2f       	mov	r25, r24
    2e60:	80 91 62 00 	lds	r24, 0x0062
    2e64:	89 2b       	or	r24, r25
    2e66:	80 93 62 00 	sts	0x0062, r24
      SET(PS2PORT,PS2clk);
    2e6a:	a5 e3       	ldi	r26, 0x35	; 53
    2e6c:	b0 e0       	ldi	r27, 0x00	; 0
    2e6e:	e5 e3       	ldi	r30, 0x35	; 53
    2e70:	f0 e0       	ldi	r31, 0x00	; 0
    2e72:	80 81       	ld	r24, Z
    2e74:	81 60       	ori	r24, 0x01	; 1
    2e76:	8c 93       	st	X, r24
      SET(PS2PORT,PS2clk);
   }
   SET(PS2PORT,PS2cmd); 
   _delay_us(1);
   PS2data9=0;
   for(i=0;i<8;i++) // 9 byte y axis of left joy
    2e78:	80 91 63 00 	lds	r24, 0x0063
    2e7c:	8f 5f       	subi	r24, 0xFF	; 255
    2e7e:	80 93 63 00 	sts	0x0063, r24
    2e82:	80 91 63 00 	lds	r24, 0x0063
    2e86:	88 30       	cpi	r24, 0x08	; 8
    2e88:	08 f4       	brcc	.+2      	; 0x2e8c <__stack+0x262d>
    2e8a:	08 cf       	rjmp	.-496    	; 0x2c9c <__stack+0x243d>
      CLR(PS2PORT,PS2cmd);
      CLR(PS2PORT,PS2clk);_delay_us(1);
	  if(CHK(PS2IN,PS2dat)) SET(PS2data9,i);
      SET(PS2PORT,PS2clk);
   }
   SET(PS2PORT,PS2cmd); 
    2e8c:	a5 e3       	ldi	r26, 0x35	; 53
    2e8e:	b0 e0       	ldi	r27, 0x00	; 0
    2e90:	e5 e3       	ldi	r30, 0x35	; 53
    2e92:	f0 e0       	ldi	r31, 0x00	; 0
    2e94:	80 81       	ld	r24, Z
    2e96:	84 60       	ori	r24, 0x04	; 4
    2e98:	8c 93       	st	X, r24
    2e9a:	80 e0       	ldi	r24, 0x00	; 0
    2e9c:	90 e0       	ldi	r25, 0x00	; 0
    2e9e:	a0 e8       	ldi	r26, 0x80	; 128
    2ea0:	bf e3       	ldi	r27, 0x3F	; 63
    2ea2:	8d 8b       	std	Y+21, r24	; 0x15
    2ea4:	9e 8b       	std	Y+22, r25	; 0x16
    2ea6:	af 8b       	std	Y+23, r26	; 0x17
    2ea8:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2eaa:	6d 89       	ldd	r22, Y+21	; 0x15
    2eac:	7e 89       	ldd	r23, Y+22	; 0x16
    2eae:	8f 89       	ldd	r24, Y+23	; 0x17
    2eb0:	98 8d       	ldd	r25, Y+24	; 0x18
    2eb2:	2b ea       	ldi	r18, 0xAB	; 171
    2eb4:	3a ea       	ldi	r19, 0xAA	; 170
    2eb6:	4a ea       	ldi	r20, 0xAA	; 170
    2eb8:	50 e4       	ldi	r21, 0x40	; 64
    2eba:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
    2ebe:	dc 01       	movw	r26, r24
    2ec0:	cb 01       	movw	r24, r22
    2ec2:	89 8b       	std	Y+17, r24	; 0x11
    2ec4:	9a 8b       	std	Y+18, r25	; 0x12
    2ec6:	ab 8b       	std	Y+19, r26	; 0x13
    2ec8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2eca:	69 89       	ldd	r22, Y+17	; 0x11
    2ecc:	7a 89       	ldd	r23, Y+18	; 0x12
    2ece:	8b 89       	ldd	r24, Y+19	; 0x13
    2ed0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ed2:	20 e0       	ldi	r18, 0x00	; 0
    2ed4:	30 e0       	ldi	r19, 0x00	; 0
    2ed6:	40 e8       	ldi	r20, 0x80	; 128
    2ed8:	5f e3       	ldi	r21, 0x3F	; 63
    2eda:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__cmpsf2>
    2ede:	88 23       	and	r24, r24
    2ee0:	1c f4       	brge	.+6      	; 0x2ee8 <__stack+0x2689>
		__ticks = 1;
    2ee2:	81 e0       	ldi	r24, 0x01	; 1
    2ee4:	88 8b       	std	Y+16, r24	; 0x10
    2ee6:	91 c0       	rjmp	.+290    	; 0x300a <__stack+0x27ab>
	else if (__tmp > 255)
    2ee8:	69 89       	ldd	r22, Y+17	; 0x11
    2eea:	7a 89       	ldd	r23, Y+18	; 0x12
    2eec:	8b 89       	ldd	r24, Y+19	; 0x13
    2eee:	9c 89       	ldd	r25, Y+20	; 0x14
    2ef0:	20 e0       	ldi	r18, 0x00	; 0
    2ef2:	30 e0       	ldi	r19, 0x00	; 0
    2ef4:	4f e7       	ldi	r20, 0x7F	; 127
    2ef6:	53 e4       	ldi	r21, 0x43	; 67
    2ef8:	0e 94 76 26 	call	0x4cec	; 0x4cec <__gesf2>
    2efc:	18 16       	cp	r1, r24
    2efe:	0c f0       	brlt	.+2      	; 0x2f02 <__stack+0x26a3>
    2f00:	7b c0       	rjmp	.+246    	; 0x2ff8 <__stack+0x2799>
	{
		_delay_ms(__us / 1000.0);
    2f02:	6d 89       	ldd	r22, Y+21	; 0x15
    2f04:	7e 89       	ldd	r23, Y+22	; 0x16
    2f06:	8f 89       	ldd	r24, Y+23	; 0x17
    2f08:	98 8d       	ldd	r25, Y+24	; 0x18
    2f0a:	20 e0       	ldi	r18, 0x00	; 0
    2f0c:	30 e0       	ldi	r19, 0x00	; 0
    2f0e:	4a e7       	ldi	r20, 0x7A	; 122
    2f10:	54 e4       	ldi	r21, 0x44	; 68
    2f12:	0e 94 6d 25 	call	0x4ada	; 0x4ada <__divsf3>
    2f16:	dc 01       	movw	r26, r24
    2f18:	cb 01       	movw	r24, r22
    2f1a:	8c 87       	std	Y+12, r24	; 0x0c
    2f1c:	9d 87       	std	Y+13, r25	; 0x0d
    2f1e:	ae 87       	std	Y+14, r26	; 0x0e
    2f20:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f22:	6c 85       	ldd	r22, Y+12	; 0x0c
    2f24:	7d 85       	ldd	r23, Y+13	; 0x0d
    2f26:	8e 85       	ldd	r24, Y+14	; 0x0e
    2f28:	9f 85       	ldd	r25, Y+15	; 0x0f
    2f2a:	20 e0       	ldi	r18, 0x00	; 0
    2f2c:	30 e0       	ldi	r19, 0x00	; 0
    2f2e:	4a e7       	ldi	r20, 0x7A	; 122
    2f30:	55 e4       	ldi	r21, 0x45	; 69
    2f32:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
    2f36:	dc 01       	movw	r26, r24
    2f38:	cb 01       	movw	r24, r22
    2f3a:	88 87       	std	Y+8, r24	; 0x08
    2f3c:	99 87       	std	Y+9, r25	; 0x09
    2f3e:	aa 87       	std	Y+10, r26	; 0x0a
    2f40:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2f42:	68 85       	ldd	r22, Y+8	; 0x08
    2f44:	79 85       	ldd	r23, Y+9	; 0x09
    2f46:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f48:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f4a:	20 e0       	ldi	r18, 0x00	; 0
    2f4c:	30 e0       	ldi	r19, 0x00	; 0
    2f4e:	40 e8       	ldi	r20, 0x80	; 128
    2f50:	5f e3       	ldi	r21, 0x3F	; 63
    2f52:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__cmpsf2>
    2f56:	88 23       	and	r24, r24
    2f58:	2c f4       	brge	.+10     	; 0x2f64 <__stack+0x2705>
		__ticks = 1;
    2f5a:	81 e0       	ldi	r24, 0x01	; 1
    2f5c:	90 e0       	ldi	r25, 0x00	; 0
    2f5e:	9f 83       	std	Y+7, r25	; 0x07
    2f60:	8e 83       	std	Y+6, r24	; 0x06
    2f62:	3f c0       	rjmp	.+126    	; 0x2fe2 <__stack+0x2783>
	else if (__tmp > 65535)
    2f64:	68 85       	ldd	r22, Y+8	; 0x08
    2f66:	79 85       	ldd	r23, Y+9	; 0x09
    2f68:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f6a:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f6c:	20 e0       	ldi	r18, 0x00	; 0
    2f6e:	3f ef       	ldi	r19, 0xFF	; 255
    2f70:	4f e7       	ldi	r20, 0x7F	; 127
    2f72:	57 e4       	ldi	r21, 0x47	; 71
    2f74:	0e 94 76 26 	call	0x4cec	; 0x4cec <__gesf2>
    2f78:	18 16       	cp	r1, r24
    2f7a:	4c f5       	brge	.+82     	; 0x2fce <__stack+0x276f>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f7c:	6c 85       	ldd	r22, Y+12	; 0x0c
    2f7e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2f80:	8e 85       	ldd	r24, Y+14	; 0x0e
    2f82:	9f 85       	ldd	r25, Y+15	; 0x0f
    2f84:	20 e0       	ldi	r18, 0x00	; 0
    2f86:	30 e0       	ldi	r19, 0x00	; 0
    2f88:	40 e2       	ldi	r20, 0x20	; 32
    2f8a:	51 e4       	ldi	r21, 0x41	; 65
    2f8c:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
    2f90:	dc 01       	movw	r26, r24
    2f92:	cb 01       	movw	r24, r22
    2f94:	bc 01       	movw	r22, r24
    2f96:	cd 01       	movw	r24, r26
    2f98:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
    2f9c:	dc 01       	movw	r26, r24
    2f9e:	cb 01       	movw	r24, r22
    2fa0:	9f 83       	std	Y+7, r25	; 0x07
    2fa2:	8e 83       	std	Y+6, r24	; 0x06
    2fa4:	0f c0       	rjmp	.+30     	; 0x2fc4 <__stack+0x2765>
    2fa6:	80 e9       	ldi	r24, 0x90	; 144
    2fa8:	91 e0       	ldi	r25, 0x01	; 1
    2faa:	9d 83       	std	Y+5, r25	; 0x05
    2fac:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2fae:	8c 81       	ldd	r24, Y+4	; 0x04
    2fb0:	9d 81       	ldd	r25, Y+5	; 0x05
    2fb2:	01 97       	sbiw	r24, 0x01	; 1
    2fb4:	f1 f7       	brne	.-4      	; 0x2fb2 <__stack+0x2753>
    2fb6:	9d 83       	std	Y+5, r25	; 0x05
    2fb8:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fba:	8e 81       	ldd	r24, Y+6	; 0x06
    2fbc:	9f 81       	ldd	r25, Y+7	; 0x07
    2fbe:	01 97       	sbiw	r24, 0x01	; 1
    2fc0:	9f 83       	std	Y+7, r25	; 0x07
    2fc2:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fc4:	8e 81       	ldd	r24, Y+6	; 0x06
    2fc6:	9f 81       	ldd	r25, Y+7	; 0x07
    2fc8:	00 97       	sbiw	r24, 0x00	; 0
    2fca:	69 f7       	brne	.-38     	; 0x2fa6 <__stack+0x2747>
    2fcc:	24 c0       	rjmp	.+72     	; 0x3016 <__stack+0x27b7>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fce:	68 85       	ldd	r22, Y+8	; 0x08
    2fd0:	79 85       	ldd	r23, Y+9	; 0x09
    2fd2:	8a 85       	ldd	r24, Y+10	; 0x0a
    2fd4:	9b 85       	ldd	r25, Y+11	; 0x0b
    2fd6:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
    2fda:	dc 01       	movw	r26, r24
    2fdc:	cb 01       	movw	r24, r22
    2fde:	9f 83       	std	Y+7, r25	; 0x07
    2fe0:	8e 83       	std	Y+6, r24	; 0x06
    2fe2:	8e 81       	ldd	r24, Y+6	; 0x06
    2fe4:	9f 81       	ldd	r25, Y+7	; 0x07
    2fe6:	9b 83       	std	Y+3, r25	; 0x03
    2fe8:	8a 83       	std	Y+2, r24	; 0x02
    2fea:	8a 81       	ldd	r24, Y+2	; 0x02
    2fec:	9b 81       	ldd	r25, Y+3	; 0x03
    2fee:	01 97       	sbiw	r24, 0x01	; 1
    2ff0:	f1 f7       	brne	.-4      	; 0x2fee <__stack+0x278f>
    2ff2:	9b 83       	std	Y+3, r25	; 0x03
    2ff4:	8a 83       	std	Y+2, r24	; 0x02
    2ff6:	0f c0       	rjmp	.+30     	; 0x3016 <__stack+0x27b7>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2ff8:	69 89       	ldd	r22, Y+17	; 0x11
    2ffa:	7a 89       	ldd	r23, Y+18	; 0x12
    2ffc:	8b 89       	ldd	r24, Y+19	; 0x13
    2ffe:	9c 89       	ldd	r25, Y+20	; 0x14
    3000:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
    3004:	dc 01       	movw	r26, r24
    3006:	cb 01       	movw	r24, r22
    3008:	88 8b       	std	Y+16, r24	; 0x10
    300a:	88 89       	ldd	r24, Y+16	; 0x10
    300c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    300e:	89 81       	ldd	r24, Y+1	; 0x01
    3010:	8a 95       	dec	r24
    3012:	f1 f7       	brne	.-4      	; 0x3010 <__stack+0x27b1>
    3014:	89 83       	std	Y+1, r24	; 0x01
   _delay_us(1);
   SET(PS2PORT,PS2att); // HI disable joystick
    3016:	a5 e3       	ldi	r26, 0x35	; 53
    3018:	b0 e0       	ldi	r27, 0x00	; 0
    301a:	e5 e3       	ldi	r30, 0x35	; 53
    301c:	f0 e0       	ldi	r31, 0x00	; 0
    301e:	80 81       	ld	r24, Z
    3020:	80 61       	ori	r24, 0x10	; 16
    3022:	8c 93       	st	X, r24
}
    3024:	c0 58       	subi	r28, 0x80	; 128
    3026:	de 4f       	sbci	r29, 0xFE	; 254
    3028:	0f b6       	in	r0, 0x3f	; 63
    302a:	f8 94       	cli
    302c:	de bf       	out	0x3e, r29	; 62
    302e:	0f be       	out	0x3f, r0	; 63
    3030:	cd bf       	out	0x3d, r28	; 61
    3032:	cf 91       	pop	r28
    3034:	df 91       	pop	r29
    3036:	1f 91       	pop	r17
    3038:	0f 91       	pop	r16
    303a:	08 95       	ret

0000303c <config>:

void config()	//enter config mode
{
    303c:	0f 93       	push	r16
    303e:	1f 93       	push	r17
    3040:	df 93       	push	r29
    3042:	cf 93       	push	r28
    3044:	cd b7       	in	r28, 0x3d	; 61
    3046:	de b7       	in	r29, 0x3e	; 62
    3048:	c8 57       	subi	r28, 0x78	; 120
    304a:	d0 40       	sbci	r29, 0x00	; 0
    304c:	0f b6       	in	r0, 0x3f	; 63
    304e:	f8 94       	cli
    3050:	de bf       	out	0x3e, r29	; 62
    3052:	0f be       	out	0x3f, r0	; 63
    3054:	cd bf       	out	0x3d, r28	; 61
	SET(PS2PORT,PS2cmd); 
    3056:	a5 e3       	ldi	r26, 0x35	; 53
    3058:	b0 e0       	ldi	r27, 0x00	; 0
    305a:	e5 e3       	ldi	r30, 0x35	; 53
    305c:	f0 e0       	ldi	r31, 0x00	; 0
    305e:	80 81       	ld	r24, Z
    3060:	84 60       	ori	r24, 0x04	; 4
    3062:	8c 93       	st	X, r24
   SET(PS2PORT,PS2clk); 
    3064:	a5 e3       	ldi	r26, 0x35	; 53
    3066:	b0 e0       	ldi	r27, 0x00	; 0
    3068:	e5 e3       	ldi	r30, 0x35	; 53
    306a:	f0 e0       	ldi	r31, 0x00	; 0
    306c:	80 81       	ld	r24, Z
    306e:	81 60       	ori	r24, 0x01	; 1
    3070:	8c 93       	st	X, r24
   CLR(PS2PORT,PS2att); // low enable joystick
    3072:	a5 e3       	ldi	r26, 0x35	; 53
    3074:	b0 e0       	ldi	r27, 0x00	; 0
    3076:	e5 e3       	ldi	r30, 0x35	; 53
    3078:	f0 e0       	ldi	r31, 0x00	; 0
    307a:	80 81       	ld	r24, Z
    307c:	8f 7e       	andi	r24, 0xEF	; 239
    307e:	8c 93       	st	X, r24
    3080:	fe 01       	movw	r30, r28
    3082:	eb 58       	subi	r30, 0x8B	; 139
    3084:	ff 4f       	sbci	r31, 0xFF	; 255
    3086:	80 e0       	ldi	r24, 0x00	; 0
    3088:	90 e0       	ldi	r25, 0x00	; 0
    308a:	a0 e8       	ldi	r26, 0x80	; 128
    308c:	bf e3       	ldi	r27, 0x3F	; 63
    308e:	80 83       	st	Z, r24
    3090:	91 83       	std	Z+1, r25	; 0x01
    3092:	a2 83       	std	Z+2, r26	; 0x02
    3094:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3096:	8e 01       	movw	r16, r28
    3098:	0f 58       	subi	r16, 0x8F	; 143
    309a:	1f 4f       	sbci	r17, 0xFF	; 255
    309c:	fe 01       	movw	r30, r28
    309e:	eb 58       	subi	r30, 0x8B	; 139
    30a0:	ff 4f       	sbci	r31, 0xFF	; 255
    30a2:	60 81       	ld	r22, Z
    30a4:	71 81       	ldd	r23, Z+1	; 0x01
    30a6:	82 81       	ldd	r24, Z+2	; 0x02
    30a8:	93 81       	ldd	r25, Z+3	; 0x03
    30aa:	2b ea       	ldi	r18, 0xAB	; 171
    30ac:	3a ea       	ldi	r19, 0xAA	; 170
    30ae:	4a ea       	ldi	r20, 0xAA	; 170
    30b0:	50 e4       	ldi	r21, 0x40	; 64
    30b2:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
    30b6:	dc 01       	movw	r26, r24
    30b8:	cb 01       	movw	r24, r22
    30ba:	f8 01       	movw	r30, r16
    30bc:	80 83       	st	Z, r24
    30be:	91 83       	std	Z+1, r25	; 0x01
    30c0:	a2 83       	std	Z+2, r26	; 0x02
    30c2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    30c4:	fe 01       	movw	r30, r28
    30c6:	ef 58       	subi	r30, 0x8F	; 143
    30c8:	ff 4f       	sbci	r31, 0xFF	; 255
    30ca:	60 81       	ld	r22, Z
    30cc:	71 81       	ldd	r23, Z+1	; 0x01
    30ce:	82 81       	ldd	r24, Z+2	; 0x02
    30d0:	93 81       	ldd	r25, Z+3	; 0x03
    30d2:	20 e0       	ldi	r18, 0x00	; 0
    30d4:	30 e0       	ldi	r19, 0x00	; 0
    30d6:	40 e8       	ldi	r20, 0x80	; 128
    30d8:	5f e3       	ldi	r21, 0x3F	; 63
    30da:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__cmpsf2>
    30de:	88 23       	and	r24, r24
    30e0:	34 f4       	brge	.+12     	; 0x30ee <config+0xb2>
		__ticks = 1;
    30e2:	fe 01       	movw	r30, r28
    30e4:	e0 59       	subi	r30, 0x90	; 144
    30e6:	ff 4f       	sbci	r31, 0xFF	; 255
    30e8:	81 e0       	ldi	r24, 0x01	; 1
    30ea:	80 83       	st	Z, r24
    30ec:	e0 c0       	rjmp	.+448    	; 0x32ae <config+0x272>
	else if (__tmp > 255)
    30ee:	fe 01       	movw	r30, r28
    30f0:	ef 58       	subi	r30, 0x8F	; 143
    30f2:	ff 4f       	sbci	r31, 0xFF	; 255
    30f4:	60 81       	ld	r22, Z
    30f6:	71 81       	ldd	r23, Z+1	; 0x01
    30f8:	82 81       	ldd	r24, Z+2	; 0x02
    30fa:	93 81       	ldd	r25, Z+3	; 0x03
    30fc:	20 e0       	ldi	r18, 0x00	; 0
    30fe:	30 e0       	ldi	r19, 0x00	; 0
    3100:	4f e7       	ldi	r20, 0x7F	; 127
    3102:	53 e4       	ldi	r21, 0x43	; 67
    3104:	0e 94 76 26 	call	0x4cec	; 0x4cec <__gesf2>
    3108:	18 16       	cp	r1, r24
    310a:	0c f0       	brlt	.+2      	; 0x310e <config+0xd2>
    310c:	c0 c0       	rjmp	.+384    	; 0x328e <config+0x252>
	{
		_delay_ms(__us / 1000.0);
    310e:	fe 01       	movw	r30, r28
    3110:	eb 58       	subi	r30, 0x8B	; 139
    3112:	ff 4f       	sbci	r31, 0xFF	; 255
    3114:	60 81       	ld	r22, Z
    3116:	71 81       	ldd	r23, Z+1	; 0x01
    3118:	82 81       	ldd	r24, Z+2	; 0x02
    311a:	93 81       	ldd	r25, Z+3	; 0x03
    311c:	20 e0       	ldi	r18, 0x00	; 0
    311e:	30 e0       	ldi	r19, 0x00	; 0
    3120:	4a e7       	ldi	r20, 0x7A	; 122
    3122:	54 e4       	ldi	r21, 0x44	; 68
    3124:	0e 94 6d 25 	call	0x4ada	; 0x4ada <__divsf3>
    3128:	dc 01       	movw	r26, r24
    312a:	cb 01       	movw	r24, r22
    312c:	fe 01       	movw	r30, r28
    312e:	e4 59       	subi	r30, 0x94	; 148
    3130:	ff 4f       	sbci	r31, 0xFF	; 255
    3132:	80 83       	st	Z, r24
    3134:	91 83       	std	Z+1, r25	; 0x01
    3136:	a2 83       	std	Z+2, r26	; 0x02
    3138:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    313a:	8e 01       	movw	r16, r28
    313c:	08 59       	subi	r16, 0x98	; 152
    313e:	1f 4f       	sbci	r17, 0xFF	; 255
    3140:	fe 01       	movw	r30, r28
    3142:	e4 59       	subi	r30, 0x94	; 148
    3144:	ff 4f       	sbci	r31, 0xFF	; 255
    3146:	60 81       	ld	r22, Z
    3148:	71 81       	ldd	r23, Z+1	; 0x01
    314a:	82 81       	ldd	r24, Z+2	; 0x02
    314c:	93 81       	ldd	r25, Z+3	; 0x03
    314e:	20 e0       	ldi	r18, 0x00	; 0
    3150:	30 e0       	ldi	r19, 0x00	; 0
    3152:	4a e7       	ldi	r20, 0x7A	; 122
    3154:	55 e4       	ldi	r21, 0x45	; 69
    3156:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
    315a:	dc 01       	movw	r26, r24
    315c:	cb 01       	movw	r24, r22
    315e:	f8 01       	movw	r30, r16
    3160:	80 83       	st	Z, r24
    3162:	91 83       	std	Z+1, r25	; 0x01
    3164:	a2 83       	std	Z+2, r26	; 0x02
    3166:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3168:	fe 01       	movw	r30, r28
    316a:	e8 59       	subi	r30, 0x98	; 152
    316c:	ff 4f       	sbci	r31, 0xFF	; 255
    316e:	60 81       	ld	r22, Z
    3170:	71 81       	ldd	r23, Z+1	; 0x01
    3172:	82 81       	ldd	r24, Z+2	; 0x02
    3174:	93 81       	ldd	r25, Z+3	; 0x03
    3176:	20 e0       	ldi	r18, 0x00	; 0
    3178:	30 e0       	ldi	r19, 0x00	; 0
    317a:	40 e8       	ldi	r20, 0x80	; 128
    317c:	5f e3       	ldi	r21, 0x3F	; 63
    317e:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__cmpsf2>
    3182:	88 23       	and	r24, r24
    3184:	44 f4       	brge	.+16     	; 0x3196 <config+0x15a>
		__ticks = 1;
    3186:	fe 01       	movw	r30, r28
    3188:	ea 59       	subi	r30, 0x9A	; 154
    318a:	ff 4f       	sbci	r31, 0xFF	; 255
    318c:	81 e0       	ldi	r24, 0x01	; 1
    318e:	90 e0       	ldi	r25, 0x00	; 0
    3190:	91 83       	std	Z+1, r25	; 0x01
    3192:	80 83       	st	Z, r24
    3194:	64 c0       	rjmp	.+200    	; 0x325e <config+0x222>
	else if (__tmp > 65535)
    3196:	fe 01       	movw	r30, r28
    3198:	e8 59       	subi	r30, 0x98	; 152
    319a:	ff 4f       	sbci	r31, 0xFF	; 255
    319c:	60 81       	ld	r22, Z
    319e:	71 81       	ldd	r23, Z+1	; 0x01
    31a0:	82 81       	ldd	r24, Z+2	; 0x02
    31a2:	93 81       	ldd	r25, Z+3	; 0x03
    31a4:	20 e0       	ldi	r18, 0x00	; 0
    31a6:	3f ef       	ldi	r19, 0xFF	; 255
    31a8:	4f e7       	ldi	r20, 0x7F	; 127
    31aa:	57 e4       	ldi	r21, 0x47	; 71
    31ac:	0e 94 76 26 	call	0x4cec	; 0x4cec <__gesf2>
    31b0:	18 16       	cp	r1, r24
    31b2:	0c f0       	brlt	.+2      	; 0x31b6 <config+0x17a>
    31b4:	43 c0       	rjmp	.+134    	; 0x323c <config+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31b6:	fe 01       	movw	r30, r28
    31b8:	e4 59       	subi	r30, 0x94	; 148
    31ba:	ff 4f       	sbci	r31, 0xFF	; 255
    31bc:	60 81       	ld	r22, Z
    31be:	71 81       	ldd	r23, Z+1	; 0x01
    31c0:	82 81       	ldd	r24, Z+2	; 0x02
    31c2:	93 81       	ldd	r25, Z+3	; 0x03
    31c4:	20 e0       	ldi	r18, 0x00	; 0
    31c6:	30 e0       	ldi	r19, 0x00	; 0
    31c8:	40 e2       	ldi	r20, 0x20	; 32
    31ca:	51 e4       	ldi	r21, 0x41	; 65
    31cc:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
    31d0:	dc 01       	movw	r26, r24
    31d2:	cb 01       	movw	r24, r22
    31d4:	8e 01       	movw	r16, r28
    31d6:	0a 59       	subi	r16, 0x9A	; 154
    31d8:	1f 4f       	sbci	r17, 0xFF	; 255
    31da:	bc 01       	movw	r22, r24
    31dc:	cd 01       	movw	r24, r26
    31de:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
    31e2:	dc 01       	movw	r26, r24
    31e4:	cb 01       	movw	r24, r22
    31e6:	f8 01       	movw	r30, r16
    31e8:	91 83       	std	Z+1, r25	; 0x01
    31ea:	80 83       	st	Z, r24
    31ec:	1f c0       	rjmp	.+62     	; 0x322c <config+0x1f0>
    31ee:	fe 01       	movw	r30, r28
    31f0:	ec 59       	subi	r30, 0x9C	; 156
    31f2:	ff 4f       	sbci	r31, 0xFF	; 255
    31f4:	80 e9       	ldi	r24, 0x90	; 144
    31f6:	91 e0       	ldi	r25, 0x01	; 1
    31f8:	91 83       	std	Z+1, r25	; 0x01
    31fa:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    31fc:	fe 01       	movw	r30, r28
    31fe:	ec 59       	subi	r30, 0x9C	; 156
    3200:	ff 4f       	sbci	r31, 0xFF	; 255
    3202:	80 81       	ld	r24, Z
    3204:	91 81       	ldd	r25, Z+1	; 0x01
    3206:	01 97       	sbiw	r24, 0x01	; 1
    3208:	f1 f7       	brne	.-4      	; 0x3206 <config+0x1ca>
    320a:	fe 01       	movw	r30, r28
    320c:	ec 59       	subi	r30, 0x9C	; 156
    320e:	ff 4f       	sbci	r31, 0xFF	; 255
    3210:	91 83       	std	Z+1, r25	; 0x01
    3212:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3214:	de 01       	movw	r26, r28
    3216:	aa 59       	subi	r26, 0x9A	; 154
    3218:	bf 4f       	sbci	r27, 0xFF	; 255
    321a:	fe 01       	movw	r30, r28
    321c:	ea 59       	subi	r30, 0x9A	; 154
    321e:	ff 4f       	sbci	r31, 0xFF	; 255
    3220:	80 81       	ld	r24, Z
    3222:	91 81       	ldd	r25, Z+1	; 0x01
    3224:	01 97       	sbiw	r24, 0x01	; 1
    3226:	11 96       	adiw	r26, 0x01	; 1
    3228:	9c 93       	st	X, r25
    322a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    322c:	fe 01       	movw	r30, r28
    322e:	ea 59       	subi	r30, 0x9A	; 154
    3230:	ff 4f       	sbci	r31, 0xFF	; 255
    3232:	80 81       	ld	r24, Z
    3234:	91 81       	ldd	r25, Z+1	; 0x01
    3236:	00 97       	sbiw	r24, 0x00	; 0
    3238:	d1 f6       	brne	.-76     	; 0x31ee <config+0x1b2>
    323a:	4b c0       	rjmp	.+150    	; 0x32d2 <config+0x296>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    323c:	8e 01       	movw	r16, r28
    323e:	0a 59       	subi	r16, 0x9A	; 154
    3240:	1f 4f       	sbci	r17, 0xFF	; 255
    3242:	fe 01       	movw	r30, r28
    3244:	e8 59       	subi	r30, 0x98	; 152
    3246:	ff 4f       	sbci	r31, 0xFF	; 255
    3248:	60 81       	ld	r22, Z
    324a:	71 81       	ldd	r23, Z+1	; 0x01
    324c:	82 81       	ldd	r24, Z+2	; 0x02
    324e:	93 81       	ldd	r25, Z+3	; 0x03
    3250:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
    3254:	dc 01       	movw	r26, r24
    3256:	cb 01       	movw	r24, r22
    3258:	f8 01       	movw	r30, r16
    325a:	91 83       	std	Z+1, r25	; 0x01
    325c:	80 83       	st	Z, r24
    325e:	de 01       	movw	r26, r28
    3260:	ae 59       	subi	r26, 0x9E	; 158
    3262:	bf 4f       	sbci	r27, 0xFF	; 255
    3264:	fe 01       	movw	r30, r28
    3266:	ea 59       	subi	r30, 0x9A	; 154
    3268:	ff 4f       	sbci	r31, 0xFF	; 255
    326a:	80 81       	ld	r24, Z
    326c:	91 81       	ldd	r25, Z+1	; 0x01
    326e:	11 96       	adiw	r26, 0x01	; 1
    3270:	9c 93       	st	X, r25
    3272:	8e 93       	st	-X, r24
    3274:	fe 01       	movw	r30, r28
    3276:	ee 59       	subi	r30, 0x9E	; 158
    3278:	ff 4f       	sbci	r31, 0xFF	; 255
    327a:	80 81       	ld	r24, Z
    327c:	91 81       	ldd	r25, Z+1	; 0x01
    327e:	01 97       	sbiw	r24, 0x01	; 1
    3280:	f1 f7       	brne	.-4      	; 0x327e <config+0x242>
    3282:	fe 01       	movw	r30, r28
    3284:	ee 59       	subi	r30, 0x9E	; 158
    3286:	ff 4f       	sbci	r31, 0xFF	; 255
    3288:	91 83       	std	Z+1, r25	; 0x01
    328a:	80 83       	st	Z, r24
    328c:	22 c0       	rjmp	.+68     	; 0x32d2 <config+0x296>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    328e:	8e 01       	movw	r16, r28
    3290:	00 59       	subi	r16, 0x90	; 144
    3292:	1f 4f       	sbci	r17, 0xFF	; 255
    3294:	fe 01       	movw	r30, r28
    3296:	ef 58       	subi	r30, 0x8F	; 143
    3298:	ff 4f       	sbci	r31, 0xFF	; 255
    329a:	60 81       	ld	r22, Z
    329c:	71 81       	ldd	r23, Z+1	; 0x01
    329e:	82 81       	ldd	r24, Z+2	; 0x02
    32a0:	93 81       	ldd	r25, Z+3	; 0x03
    32a2:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
    32a6:	dc 01       	movw	r26, r24
    32a8:	cb 01       	movw	r24, r22
    32aa:	f8 01       	movw	r30, r16
    32ac:	80 83       	st	Z, r24
    32ae:	de 01       	movw	r26, r28
    32b0:	af 59       	subi	r26, 0x9F	; 159
    32b2:	bf 4f       	sbci	r27, 0xFF	; 255
    32b4:	fe 01       	movw	r30, r28
    32b6:	e0 59       	subi	r30, 0x90	; 144
    32b8:	ff 4f       	sbci	r31, 0xFF	; 255
    32ba:	80 81       	ld	r24, Z
    32bc:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    32be:	fe 01       	movw	r30, r28
    32c0:	ef 59       	subi	r30, 0x9F	; 159
    32c2:	ff 4f       	sbci	r31, 0xFF	; 255
    32c4:	80 81       	ld	r24, Z
    32c6:	8a 95       	dec	r24
    32c8:	f1 f7       	brne	.-4      	; 0x32c6 <config+0x28a>
    32ca:	fe 01       	movw	r30, r28
    32cc:	ef 59       	subi	r30, 0x9F	; 159
    32ce:	ff 4f       	sbci	r31, 0xFF	; 255
    32d0:	80 83       	st	Z, r24
  _delay_us(1);
  PS2byte=0x01;		//byte1
    32d2:	81 e0       	ldi	r24, 0x01	; 1
    32d4:	80 93 67 00 	sts	0x0067, r24
	
	for(i=0;i<8;i++)
    32d8:	10 92 63 00 	sts	0x0063, r1
    32dc:	35 c0       	rjmp	.+106    	; 0x3348 <config+0x30c>
   {
      if(CHK(PS2byte,i)) SET(PS2PORT,PS2cmd);
    32de:	80 91 67 00 	lds	r24, 0x0067
    32e2:	28 2f       	mov	r18, r24
    32e4:	30 e0       	ldi	r19, 0x00	; 0
    32e6:	80 91 63 00 	lds	r24, 0x0063
    32ea:	88 2f       	mov	r24, r24
    32ec:	90 e0       	ldi	r25, 0x00	; 0
    32ee:	a9 01       	movw	r20, r18
    32f0:	02 c0       	rjmp	.+4      	; 0x32f6 <config+0x2ba>
    32f2:	55 95       	asr	r21
    32f4:	47 95       	ror	r20
    32f6:	8a 95       	dec	r24
    32f8:	e2 f7       	brpl	.-8      	; 0x32f2 <config+0x2b6>
    32fa:	ca 01       	movw	r24, r20
    32fc:	81 70       	andi	r24, 0x01	; 1
    32fe:	90 70       	andi	r25, 0x00	; 0
    3300:	88 23       	and	r24, r24
    3302:	41 f0       	breq	.+16     	; 0x3314 <config+0x2d8>
    3304:	a5 e3       	ldi	r26, 0x35	; 53
    3306:	b0 e0       	ldi	r27, 0x00	; 0
    3308:	e5 e3       	ldi	r30, 0x35	; 53
    330a:	f0 e0       	ldi	r31, 0x00	; 0
    330c:	80 81       	ld	r24, Z
    330e:	84 60       	ori	r24, 0x04	; 4
    3310:	8c 93       	st	X, r24
    3312:	07 c0       	rjmp	.+14     	; 0x3322 <config+0x2e6>
	  else  CLR(PS2PORT,PS2cmd);
    3314:	a5 e3       	ldi	r26, 0x35	; 53
    3316:	b0 e0       	ldi	r27, 0x00	; 0
    3318:	e5 e3       	ldi	r30, 0x35	; 53
    331a:	f0 e0       	ldi	r31, 0x00	; 0
    331c:	80 81       	ld	r24, Z
    331e:	8b 7f       	andi	r24, 0xFB	; 251
    3320:	8c 93       	st	X, r24
      CLR(PS2PORT,PS2clk); 
    3322:	a5 e3       	ldi	r26, 0x35	; 53
    3324:	b0 e0       	ldi	r27, 0x00	; 0
    3326:	e5 e3       	ldi	r30, 0x35	; 53
    3328:	f0 e0       	ldi	r31, 0x00	; 0
    332a:	80 81       	ld	r24, Z
    332c:	8e 7f       	andi	r24, 0xFE	; 254
    332e:	8c 93       	st	X, r24
      SET(PS2PORT,PS2clk); 
    3330:	a5 e3       	ldi	r26, 0x35	; 53
    3332:	b0 e0       	ldi	r27, 0x00	; 0
    3334:	e5 e3       	ldi	r30, 0x35	; 53
    3336:	f0 e0       	ldi	r31, 0x00	; 0
    3338:	80 81       	ld	r24, Z
    333a:	81 60       	ori	r24, 0x01	; 1
    333c:	8c 93       	st	X, r24
   SET(PS2PORT,PS2clk); 
   CLR(PS2PORT,PS2att); // low enable joystick
  _delay_us(1);
  PS2byte=0x01;		//byte1
	
	for(i=0;i<8;i++)
    333e:	80 91 63 00 	lds	r24, 0x0063
    3342:	8f 5f       	subi	r24, 0xFF	; 255
    3344:	80 93 63 00 	sts	0x0063, r24
    3348:	80 91 63 00 	lds	r24, 0x0063
    334c:	88 30       	cpi	r24, 0x08	; 8
    334e:	38 f2       	brcs	.-114    	; 0x32de <config+0x2a2>
      if(CHK(PS2byte,i)) SET(PS2PORT,PS2cmd);
	  else  CLR(PS2PORT,PS2cmd);
      CLR(PS2PORT,PS2clk); 
      SET(PS2PORT,PS2clk); 
   }
   SET(PS2PORT,PS2cmd); 
    3350:	a5 e3       	ldi	r26, 0x35	; 53
    3352:	b0 e0       	ldi	r27, 0x00	; 0
    3354:	e5 e3       	ldi	r30, 0x35	; 53
    3356:	f0 e0       	ldi	r31, 0x00	; 0
    3358:	80 81       	ld	r24, Z
    335a:	84 60       	ori	r24, 0x04	; 4
    335c:	8c 93       	st	X, r24
    335e:	fe 01       	movw	r30, r28
    3360:	e3 5a       	subi	r30, 0xA3	; 163
    3362:	ff 4f       	sbci	r31, 0xFF	; 255
    3364:	80 e0       	ldi	r24, 0x00	; 0
    3366:	90 e0       	ldi	r25, 0x00	; 0
    3368:	a0 e8       	ldi	r26, 0x80	; 128
    336a:	bf e3       	ldi	r27, 0x3F	; 63
    336c:	80 83       	st	Z, r24
    336e:	91 83       	std	Z+1, r25	; 0x01
    3370:	a2 83       	std	Z+2, r26	; 0x02
    3372:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3374:	8e 01       	movw	r16, r28
    3376:	07 5a       	subi	r16, 0xA7	; 167
    3378:	1f 4f       	sbci	r17, 0xFF	; 255
    337a:	fe 01       	movw	r30, r28
    337c:	e3 5a       	subi	r30, 0xA3	; 163
    337e:	ff 4f       	sbci	r31, 0xFF	; 255
    3380:	60 81       	ld	r22, Z
    3382:	71 81       	ldd	r23, Z+1	; 0x01
    3384:	82 81       	ldd	r24, Z+2	; 0x02
    3386:	93 81       	ldd	r25, Z+3	; 0x03
    3388:	2b ea       	ldi	r18, 0xAB	; 171
    338a:	3a ea       	ldi	r19, 0xAA	; 170
    338c:	4a ea       	ldi	r20, 0xAA	; 170
    338e:	50 e4       	ldi	r21, 0x40	; 64
    3390:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
    3394:	dc 01       	movw	r26, r24
    3396:	cb 01       	movw	r24, r22
    3398:	f8 01       	movw	r30, r16
    339a:	80 83       	st	Z, r24
    339c:	91 83       	std	Z+1, r25	; 0x01
    339e:	a2 83       	std	Z+2, r26	; 0x02
    33a0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    33a2:	fe 01       	movw	r30, r28
    33a4:	e7 5a       	subi	r30, 0xA7	; 167
    33a6:	ff 4f       	sbci	r31, 0xFF	; 255
    33a8:	60 81       	ld	r22, Z
    33aa:	71 81       	ldd	r23, Z+1	; 0x01
    33ac:	82 81       	ldd	r24, Z+2	; 0x02
    33ae:	93 81       	ldd	r25, Z+3	; 0x03
    33b0:	20 e0       	ldi	r18, 0x00	; 0
    33b2:	30 e0       	ldi	r19, 0x00	; 0
    33b4:	40 e8       	ldi	r20, 0x80	; 128
    33b6:	5f e3       	ldi	r21, 0x3F	; 63
    33b8:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__cmpsf2>
    33bc:	88 23       	and	r24, r24
    33be:	34 f4       	brge	.+12     	; 0x33cc <config+0x390>
		__ticks = 1;
    33c0:	fe 01       	movw	r30, r28
    33c2:	e8 5a       	subi	r30, 0xA8	; 168
    33c4:	ff 4f       	sbci	r31, 0xFF	; 255
    33c6:	81 e0       	ldi	r24, 0x01	; 1
    33c8:	80 83       	st	Z, r24
    33ca:	e0 c0       	rjmp	.+448    	; 0x358c <config+0x550>
	else if (__tmp > 255)
    33cc:	fe 01       	movw	r30, r28
    33ce:	e7 5a       	subi	r30, 0xA7	; 167
    33d0:	ff 4f       	sbci	r31, 0xFF	; 255
    33d2:	60 81       	ld	r22, Z
    33d4:	71 81       	ldd	r23, Z+1	; 0x01
    33d6:	82 81       	ldd	r24, Z+2	; 0x02
    33d8:	93 81       	ldd	r25, Z+3	; 0x03
    33da:	20 e0       	ldi	r18, 0x00	; 0
    33dc:	30 e0       	ldi	r19, 0x00	; 0
    33de:	4f e7       	ldi	r20, 0x7F	; 127
    33e0:	53 e4       	ldi	r21, 0x43	; 67
    33e2:	0e 94 76 26 	call	0x4cec	; 0x4cec <__gesf2>
    33e6:	18 16       	cp	r1, r24
    33e8:	0c f0       	brlt	.+2      	; 0x33ec <config+0x3b0>
    33ea:	c0 c0       	rjmp	.+384    	; 0x356c <config+0x530>
	{
		_delay_ms(__us / 1000.0);
    33ec:	fe 01       	movw	r30, r28
    33ee:	e3 5a       	subi	r30, 0xA3	; 163
    33f0:	ff 4f       	sbci	r31, 0xFF	; 255
    33f2:	60 81       	ld	r22, Z
    33f4:	71 81       	ldd	r23, Z+1	; 0x01
    33f6:	82 81       	ldd	r24, Z+2	; 0x02
    33f8:	93 81       	ldd	r25, Z+3	; 0x03
    33fa:	20 e0       	ldi	r18, 0x00	; 0
    33fc:	30 e0       	ldi	r19, 0x00	; 0
    33fe:	4a e7       	ldi	r20, 0x7A	; 122
    3400:	54 e4       	ldi	r21, 0x44	; 68
    3402:	0e 94 6d 25 	call	0x4ada	; 0x4ada <__divsf3>
    3406:	dc 01       	movw	r26, r24
    3408:	cb 01       	movw	r24, r22
    340a:	fe 01       	movw	r30, r28
    340c:	ec 5a       	subi	r30, 0xAC	; 172
    340e:	ff 4f       	sbci	r31, 0xFF	; 255
    3410:	80 83       	st	Z, r24
    3412:	91 83       	std	Z+1, r25	; 0x01
    3414:	a2 83       	std	Z+2, r26	; 0x02
    3416:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3418:	8e 01       	movw	r16, r28
    341a:	00 5b       	subi	r16, 0xB0	; 176
    341c:	1f 4f       	sbci	r17, 0xFF	; 255
    341e:	fe 01       	movw	r30, r28
    3420:	ec 5a       	subi	r30, 0xAC	; 172
    3422:	ff 4f       	sbci	r31, 0xFF	; 255
    3424:	60 81       	ld	r22, Z
    3426:	71 81       	ldd	r23, Z+1	; 0x01
    3428:	82 81       	ldd	r24, Z+2	; 0x02
    342a:	93 81       	ldd	r25, Z+3	; 0x03
    342c:	20 e0       	ldi	r18, 0x00	; 0
    342e:	30 e0       	ldi	r19, 0x00	; 0
    3430:	4a e7       	ldi	r20, 0x7A	; 122
    3432:	55 e4       	ldi	r21, 0x45	; 69
    3434:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
    3438:	dc 01       	movw	r26, r24
    343a:	cb 01       	movw	r24, r22
    343c:	f8 01       	movw	r30, r16
    343e:	80 83       	st	Z, r24
    3440:	91 83       	std	Z+1, r25	; 0x01
    3442:	a2 83       	std	Z+2, r26	; 0x02
    3444:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3446:	fe 01       	movw	r30, r28
    3448:	e0 5b       	subi	r30, 0xB0	; 176
    344a:	ff 4f       	sbci	r31, 0xFF	; 255
    344c:	60 81       	ld	r22, Z
    344e:	71 81       	ldd	r23, Z+1	; 0x01
    3450:	82 81       	ldd	r24, Z+2	; 0x02
    3452:	93 81       	ldd	r25, Z+3	; 0x03
    3454:	20 e0       	ldi	r18, 0x00	; 0
    3456:	30 e0       	ldi	r19, 0x00	; 0
    3458:	40 e8       	ldi	r20, 0x80	; 128
    345a:	5f e3       	ldi	r21, 0x3F	; 63
    345c:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__cmpsf2>
    3460:	88 23       	and	r24, r24
    3462:	44 f4       	brge	.+16     	; 0x3474 <config+0x438>
		__ticks = 1;
    3464:	fe 01       	movw	r30, r28
    3466:	e2 5b       	subi	r30, 0xB2	; 178
    3468:	ff 4f       	sbci	r31, 0xFF	; 255
    346a:	81 e0       	ldi	r24, 0x01	; 1
    346c:	90 e0       	ldi	r25, 0x00	; 0
    346e:	91 83       	std	Z+1, r25	; 0x01
    3470:	80 83       	st	Z, r24
    3472:	64 c0       	rjmp	.+200    	; 0x353c <config+0x500>
	else if (__tmp > 65535)
    3474:	fe 01       	movw	r30, r28
    3476:	e0 5b       	subi	r30, 0xB0	; 176
    3478:	ff 4f       	sbci	r31, 0xFF	; 255
    347a:	60 81       	ld	r22, Z
    347c:	71 81       	ldd	r23, Z+1	; 0x01
    347e:	82 81       	ldd	r24, Z+2	; 0x02
    3480:	93 81       	ldd	r25, Z+3	; 0x03
    3482:	20 e0       	ldi	r18, 0x00	; 0
    3484:	3f ef       	ldi	r19, 0xFF	; 255
    3486:	4f e7       	ldi	r20, 0x7F	; 127
    3488:	57 e4       	ldi	r21, 0x47	; 71
    348a:	0e 94 76 26 	call	0x4cec	; 0x4cec <__gesf2>
    348e:	18 16       	cp	r1, r24
    3490:	0c f0       	brlt	.+2      	; 0x3494 <config+0x458>
    3492:	43 c0       	rjmp	.+134    	; 0x351a <config+0x4de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3494:	fe 01       	movw	r30, r28
    3496:	ec 5a       	subi	r30, 0xAC	; 172
    3498:	ff 4f       	sbci	r31, 0xFF	; 255
    349a:	60 81       	ld	r22, Z
    349c:	71 81       	ldd	r23, Z+1	; 0x01
    349e:	82 81       	ldd	r24, Z+2	; 0x02
    34a0:	93 81       	ldd	r25, Z+3	; 0x03
    34a2:	20 e0       	ldi	r18, 0x00	; 0
    34a4:	30 e0       	ldi	r19, 0x00	; 0
    34a6:	40 e2       	ldi	r20, 0x20	; 32
    34a8:	51 e4       	ldi	r21, 0x41	; 65
    34aa:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
    34ae:	dc 01       	movw	r26, r24
    34b0:	cb 01       	movw	r24, r22
    34b2:	8e 01       	movw	r16, r28
    34b4:	02 5b       	subi	r16, 0xB2	; 178
    34b6:	1f 4f       	sbci	r17, 0xFF	; 255
    34b8:	bc 01       	movw	r22, r24
    34ba:	cd 01       	movw	r24, r26
    34bc:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
    34c0:	dc 01       	movw	r26, r24
    34c2:	cb 01       	movw	r24, r22
    34c4:	f8 01       	movw	r30, r16
    34c6:	91 83       	std	Z+1, r25	; 0x01
    34c8:	80 83       	st	Z, r24
    34ca:	1f c0       	rjmp	.+62     	; 0x350a <config+0x4ce>
    34cc:	fe 01       	movw	r30, r28
    34ce:	e4 5b       	subi	r30, 0xB4	; 180
    34d0:	ff 4f       	sbci	r31, 0xFF	; 255
    34d2:	80 e9       	ldi	r24, 0x90	; 144
    34d4:	91 e0       	ldi	r25, 0x01	; 1
    34d6:	91 83       	std	Z+1, r25	; 0x01
    34d8:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    34da:	fe 01       	movw	r30, r28
    34dc:	e4 5b       	subi	r30, 0xB4	; 180
    34de:	ff 4f       	sbci	r31, 0xFF	; 255
    34e0:	80 81       	ld	r24, Z
    34e2:	91 81       	ldd	r25, Z+1	; 0x01
    34e4:	01 97       	sbiw	r24, 0x01	; 1
    34e6:	f1 f7       	brne	.-4      	; 0x34e4 <config+0x4a8>
    34e8:	fe 01       	movw	r30, r28
    34ea:	e4 5b       	subi	r30, 0xB4	; 180
    34ec:	ff 4f       	sbci	r31, 0xFF	; 255
    34ee:	91 83       	std	Z+1, r25	; 0x01
    34f0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34f2:	de 01       	movw	r26, r28
    34f4:	a2 5b       	subi	r26, 0xB2	; 178
    34f6:	bf 4f       	sbci	r27, 0xFF	; 255
    34f8:	fe 01       	movw	r30, r28
    34fa:	e2 5b       	subi	r30, 0xB2	; 178
    34fc:	ff 4f       	sbci	r31, 0xFF	; 255
    34fe:	80 81       	ld	r24, Z
    3500:	91 81       	ldd	r25, Z+1	; 0x01
    3502:	01 97       	sbiw	r24, 0x01	; 1
    3504:	11 96       	adiw	r26, 0x01	; 1
    3506:	9c 93       	st	X, r25
    3508:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    350a:	fe 01       	movw	r30, r28
    350c:	e2 5b       	subi	r30, 0xB2	; 178
    350e:	ff 4f       	sbci	r31, 0xFF	; 255
    3510:	80 81       	ld	r24, Z
    3512:	91 81       	ldd	r25, Z+1	; 0x01
    3514:	00 97       	sbiw	r24, 0x00	; 0
    3516:	d1 f6       	brne	.-76     	; 0x34cc <config+0x490>
    3518:	4b c0       	rjmp	.+150    	; 0x35b0 <config+0x574>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    351a:	8e 01       	movw	r16, r28
    351c:	02 5b       	subi	r16, 0xB2	; 178
    351e:	1f 4f       	sbci	r17, 0xFF	; 255
    3520:	fe 01       	movw	r30, r28
    3522:	e0 5b       	subi	r30, 0xB0	; 176
    3524:	ff 4f       	sbci	r31, 0xFF	; 255
    3526:	60 81       	ld	r22, Z
    3528:	71 81       	ldd	r23, Z+1	; 0x01
    352a:	82 81       	ldd	r24, Z+2	; 0x02
    352c:	93 81       	ldd	r25, Z+3	; 0x03
    352e:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
    3532:	dc 01       	movw	r26, r24
    3534:	cb 01       	movw	r24, r22
    3536:	f8 01       	movw	r30, r16
    3538:	91 83       	std	Z+1, r25	; 0x01
    353a:	80 83       	st	Z, r24
    353c:	de 01       	movw	r26, r28
    353e:	a6 5b       	subi	r26, 0xB6	; 182
    3540:	bf 4f       	sbci	r27, 0xFF	; 255
    3542:	fe 01       	movw	r30, r28
    3544:	e2 5b       	subi	r30, 0xB2	; 178
    3546:	ff 4f       	sbci	r31, 0xFF	; 255
    3548:	80 81       	ld	r24, Z
    354a:	91 81       	ldd	r25, Z+1	; 0x01
    354c:	11 96       	adiw	r26, 0x01	; 1
    354e:	9c 93       	st	X, r25
    3550:	8e 93       	st	-X, r24
    3552:	fe 01       	movw	r30, r28
    3554:	e6 5b       	subi	r30, 0xB6	; 182
    3556:	ff 4f       	sbci	r31, 0xFF	; 255
    3558:	80 81       	ld	r24, Z
    355a:	91 81       	ldd	r25, Z+1	; 0x01
    355c:	01 97       	sbiw	r24, 0x01	; 1
    355e:	f1 f7       	brne	.-4      	; 0x355c <config+0x520>
    3560:	fe 01       	movw	r30, r28
    3562:	e6 5b       	subi	r30, 0xB6	; 182
    3564:	ff 4f       	sbci	r31, 0xFF	; 255
    3566:	91 83       	std	Z+1, r25	; 0x01
    3568:	80 83       	st	Z, r24
    356a:	22 c0       	rjmp	.+68     	; 0x35b0 <config+0x574>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    356c:	8e 01       	movw	r16, r28
    356e:	08 5a       	subi	r16, 0xA8	; 168
    3570:	1f 4f       	sbci	r17, 0xFF	; 255
    3572:	fe 01       	movw	r30, r28
    3574:	e7 5a       	subi	r30, 0xA7	; 167
    3576:	ff 4f       	sbci	r31, 0xFF	; 255
    3578:	60 81       	ld	r22, Z
    357a:	71 81       	ldd	r23, Z+1	; 0x01
    357c:	82 81       	ldd	r24, Z+2	; 0x02
    357e:	93 81       	ldd	r25, Z+3	; 0x03
    3580:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
    3584:	dc 01       	movw	r26, r24
    3586:	cb 01       	movw	r24, r22
    3588:	f8 01       	movw	r30, r16
    358a:	80 83       	st	Z, r24
    358c:	de 01       	movw	r26, r28
    358e:	a7 5b       	subi	r26, 0xB7	; 183
    3590:	bf 4f       	sbci	r27, 0xFF	; 255
    3592:	fe 01       	movw	r30, r28
    3594:	e8 5a       	subi	r30, 0xA8	; 168
    3596:	ff 4f       	sbci	r31, 0xFF	; 255
    3598:	80 81       	ld	r24, Z
    359a:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    359c:	fe 01       	movw	r30, r28
    359e:	e7 5b       	subi	r30, 0xB7	; 183
    35a0:	ff 4f       	sbci	r31, 0xFF	; 255
    35a2:	80 81       	ld	r24, Z
    35a4:	8a 95       	dec	r24
    35a6:	f1 f7       	brne	.-4      	; 0x35a4 <config+0x568>
    35a8:	fe 01       	movw	r30, r28
    35aa:	e7 5b       	subi	r30, 0xB7	; 183
    35ac:	ff 4f       	sbci	r31, 0xFF	; 255
    35ae:	80 83       	st	Z, r24
   _delay_us(1);
	
	
	PS2byte=0x43; // sec command
    35b0:	83 e4       	ldi	r24, 0x43	; 67
    35b2:	80 93 67 00 	sts	0x0067, r24
   for(i=0;i<8;i++)
    35b6:	10 92 63 00 	sts	0x0063, r1
    35ba:	35 c0       	rjmp	.+106    	; 0x3626 <config+0x5ea>
   {
      if(CHK(PS2byte,i)) SET(PS2PORT,PS2cmd);
    35bc:	80 91 67 00 	lds	r24, 0x0067
    35c0:	28 2f       	mov	r18, r24
    35c2:	30 e0       	ldi	r19, 0x00	; 0
    35c4:	80 91 63 00 	lds	r24, 0x0063
    35c8:	88 2f       	mov	r24, r24
    35ca:	90 e0       	ldi	r25, 0x00	; 0
    35cc:	a9 01       	movw	r20, r18
    35ce:	02 c0       	rjmp	.+4      	; 0x35d4 <config+0x598>
    35d0:	55 95       	asr	r21
    35d2:	47 95       	ror	r20
    35d4:	8a 95       	dec	r24
    35d6:	e2 f7       	brpl	.-8      	; 0x35d0 <config+0x594>
    35d8:	ca 01       	movw	r24, r20
    35da:	81 70       	andi	r24, 0x01	; 1
    35dc:	90 70       	andi	r25, 0x00	; 0
    35de:	88 23       	and	r24, r24
    35e0:	41 f0       	breq	.+16     	; 0x35f2 <config+0x5b6>
    35e2:	a5 e3       	ldi	r26, 0x35	; 53
    35e4:	b0 e0       	ldi	r27, 0x00	; 0
    35e6:	e5 e3       	ldi	r30, 0x35	; 53
    35e8:	f0 e0       	ldi	r31, 0x00	; 0
    35ea:	80 81       	ld	r24, Z
    35ec:	84 60       	ori	r24, 0x04	; 4
    35ee:	8c 93       	st	X, r24
    35f0:	07 c0       	rjmp	.+14     	; 0x3600 <config+0x5c4>
	  else  CLR(PS2PORT,PS2cmd);
    35f2:	a5 e3       	ldi	r26, 0x35	; 53
    35f4:	b0 e0       	ldi	r27, 0x00	; 0
    35f6:	e5 e3       	ldi	r30, 0x35	; 53
    35f8:	f0 e0       	ldi	r31, 0x00	; 0
    35fa:	80 81       	ld	r24, Z
    35fc:	8b 7f       	andi	r24, 0xFB	; 251
    35fe:	8c 93       	st	X, r24
      CLR(PS2PORT,PS2clk); 
    3600:	a5 e3       	ldi	r26, 0x35	; 53
    3602:	b0 e0       	ldi	r27, 0x00	; 0
    3604:	e5 e3       	ldi	r30, 0x35	; 53
    3606:	f0 e0       	ldi	r31, 0x00	; 0
    3608:	80 81       	ld	r24, Z
    360a:	8e 7f       	andi	r24, 0xFE	; 254
    360c:	8c 93       	st	X, r24
      SET(PS2PORT,PS2clk); 
    360e:	a5 e3       	ldi	r26, 0x35	; 53
    3610:	b0 e0       	ldi	r27, 0x00	; 0
    3612:	e5 e3       	ldi	r30, 0x35	; 53
    3614:	f0 e0       	ldi	r31, 0x00	; 0
    3616:	80 81       	ld	r24, Z
    3618:	81 60       	ori	r24, 0x01	; 1
    361a:	8c 93       	st	X, r24
   SET(PS2PORT,PS2cmd); 
   _delay_us(1);
	
	
	PS2byte=0x43; // sec command
   for(i=0;i<8;i++)
    361c:	80 91 63 00 	lds	r24, 0x0063
    3620:	8f 5f       	subi	r24, 0xFF	; 255
    3622:	80 93 63 00 	sts	0x0063, r24
    3626:	80 91 63 00 	lds	r24, 0x0063
    362a:	88 30       	cpi	r24, 0x08	; 8
    362c:	38 f2       	brcs	.-114    	; 0x35bc <config+0x580>
      if(CHK(PS2byte,i)) SET(PS2PORT,PS2cmd);
	  else  CLR(PS2PORT,PS2cmd);
      CLR(PS2PORT,PS2clk); 
      SET(PS2PORT,PS2clk); 
   }
   SET(PS2PORT,PS2cmd); 
    362e:	a5 e3       	ldi	r26, 0x35	; 53
    3630:	b0 e0       	ldi	r27, 0x00	; 0
    3632:	e5 e3       	ldi	r30, 0x35	; 53
    3634:	f0 e0       	ldi	r31, 0x00	; 0
    3636:	80 81       	ld	r24, Z
    3638:	84 60       	ori	r24, 0x04	; 4
    363a:	8c 93       	st	X, r24
    363c:	fe 01       	movw	r30, r28
    363e:	eb 5b       	subi	r30, 0xBB	; 187
    3640:	ff 4f       	sbci	r31, 0xFF	; 255
    3642:	80 e0       	ldi	r24, 0x00	; 0
    3644:	90 e0       	ldi	r25, 0x00	; 0
    3646:	a0 e8       	ldi	r26, 0x80	; 128
    3648:	bf e3       	ldi	r27, 0x3F	; 63
    364a:	80 83       	st	Z, r24
    364c:	91 83       	std	Z+1, r25	; 0x01
    364e:	a2 83       	std	Z+2, r26	; 0x02
    3650:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3652:	8e 01       	movw	r16, r28
    3654:	0f 5b       	subi	r16, 0xBF	; 191
    3656:	1f 4f       	sbci	r17, 0xFF	; 255
    3658:	fe 01       	movw	r30, r28
    365a:	eb 5b       	subi	r30, 0xBB	; 187
    365c:	ff 4f       	sbci	r31, 0xFF	; 255
    365e:	60 81       	ld	r22, Z
    3660:	71 81       	ldd	r23, Z+1	; 0x01
    3662:	82 81       	ldd	r24, Z+2	; 0x02
    3664:	93 81       	ldd	r25, Z+3	; 0x03
    3666:	2b ea       	ldi	r18, 0xAB	; 171
    3668:	3a ea       	ldi	r19, 0xAA	; 170
    366a:	4a ea       	ldi	r20, 0xAA	; 170
    366c:	50 e4       	ldi	r21, 0x40	; 64
    366e:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
    3672:	dc 01       	movw	r26, r24
    3674:	cb 01       	movw	r24, r22
    3676:	f8 01       	movw	r30, r16
    3678:	80 83       	st	Z, r24
    367a:	91 83       	std	Z+1, r25	; 0x01
    367c:	a2 83       	std	Z+2, r26	; 0x02
    367e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3680:	fe 01       	movw	r30, r28
    3682:	ef 5b       	subi	r30, 0xBF	; 191
    3684:	ff 4f       	sbci	r31, 0xFF	; 255
    3686:	60 81       	ld	r22, Z
    3688:	71 81       	ldd	r23, Z+1	; 0x01
    368a:	82 81       	ldd	r24, Z+2	; 0x02
    368c:	93 81       	ldd	r25, Z+3	; 0x03
    368e:	20 e0       	ldi	r18, 0x00	; 0
    3690:	30 e0       	ldi	r19, 0x00	; 0
    3692:	40 e8       	ldi	r20, 0x80	; 128
    3694:	5f e3       	ldi	r21, 0x3F	; 63
    3696:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__cmpsf2>
    369a:	88 23       	and	r24, r24
    369c:	34 f4       	brge	.+12     	; 0x36aa <config+0x66e>
		__ticks = 1;
    369e:	81 e0       	ldi	r24, 0x01	; 1
    36a0:	fe 01       	movw	r30, r28
    36a2:	e0 5c       	subi	r30, 0xC0	; 192
    36a4:	ff 4f       	sbci	r31, 0xFF	; 255
    36a6:	80 83       	st	Z, r24
    36a8:	9d c0       	rjmp	.+314    	; 0x37e4 <config+0x7a8>
	else if (__tmp > 255)
    36aa:	fe 01       	movw	r30, r28
    36ac:	ef 5b       	subi	r30, 0xBF	; 191
    36ae:	ff 4f       	sbci	r31, 0xFF	; 255
    36b0:	60 81       	ld	r22, Z
    36b2:	71 81       	ldd	r23, Z+1	; 0x01
    36b4:	82 81       	ldd	r24, Z+2	; 0x02
    36b6:	93 81       	ldd	r25, Z+3	; 0x03
    36b8:	20 e0       	ldi	r18, 0x00	; 0
    36ba:	30 e0       	ldi	r19, 0x00	; 0
    36bc:	4f e7       	ldi	r20, 0x7F	; 127
    36be:	53 e4       	ldi	r21, 0x43	; 67
    36c0:	0e 94 76 26 	call	0x4cec	; 0x4cec <__gesf2>
    36c4:	18 16       	cp	r1, r24
    36c6:	0c f0       	brlt	.+2      	; 0x36ca <config+0x68e>
    36c8:	7e c0       	rjmp	.+252    	; 0x37c6 <config+0x78a>
	{
		_delay_ms(__us / 1000.0);
    36ca:	fe 01       	movw	r30, r28
    36cc:	eb 5b       	subi	r30, 0xBB	; 187
    36ce:	ff 4f       	sbci	r31, 0xFF	; 255
    36d0:	60 81       	ld	r22, Z
    36d2:	71 81       	ldd	r23, Z+1	; 0x01
    36d4:	82 81       	ldd	r24, Z+2	; 0x02
    36d6:	93 81       	ldd	r25, Z+3	; 0x03
    36d8:	20 e0       	ldi	r18, 0x00	; 0
    36da:	30 e0       	ldi	r19, 0x00	; 0
    36dc:	4a e7       	ldi	r20, 0x7A	; 122
    36de:	54 e4       	ldi	r21, 0x44	; 68
    36e0:	0e 94 6d 25 	call	0x4ada	; 0x4ada <__divsf3>
    36e4:	dc 01       	movw	r26, r24
    36e6:	cb 01       	movw	r24, r22
    36e8:	8c af       	std	Y+60, r24	; 0x3c
    36ea:	9d af       	std	Y+61, r25	; 0x3d
    36ec:	ae af       	std	Y+62, r26	; 0x3e
    36ee:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36f0:	6c ad       	ldd	r22, Y+60	; 0x3c
    36f2:	7d ad       	ldd	r23, Y+61	; 0x3d
    36f4:	8e ad       	ldd	r24, Y+62	; 0x3e
    36f6:	9f ad       	ldd	r25, Y+63	; 0x3f
    36f8:	20 e0       	ldi	r18, 0x00	; 0
    36fa:	30 e0       	ldi	r19, 0x00	; 0
    36fc:	4a e7       	ldi	r20, 0x7A	; 122
    36fe:	55 e4       	ldi	r21, 0x45	; 69
    3700:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
    3704:	dc 01       	movw	r26, r24
    3706:	cb 01       	movw	r24, r22
    3708:	88 af       	std	Y+56, r24	; 0x38
    370a:	99 af       	std	Y+57, r25	; 0x39
    370c:	aa af       	std	Y+58, r26	; 0x3a
    370e:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    3710:	68 ad       	ldd	r22, Y+56	; 0x38
    3712:	79 ad       	ldd	r23, Y+57	; 0x39
    3714:	8a ad       	ldd	r24, Y+58	; 0x3a
    3716:	9b ad       	ldd	r25, Y+59	; 0x3b
    3718:	20 e0       	ldi	r18, 0x00	; 0
    371a:	30 e0       	ldi	r19, 0x00	; 0
    371c:	40 e8       	ldi	r20, 0x80	; 128
    371e:	5f e3       	ldi	r21, 0x3F	; 63
    3720:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__cmpsf2>
    3724:	88 23       	and	r24, r24
    3726:	2c f4       	brge	.+10     	; 0x3732 <config+0x6f6>
		__ticks = 1;
    3728:	81 e0       	ldi	r24, 0x01	; 1
    372a:	90 e0       	ldi	r25, 0x00	; 0
    372c:	9f ab       	std	Y+55, r25	; 0x37
    372e:	8e ab       	std	Y+54, r24	; 0x36
    3730:	3f c0       	rjmp	.+126    	; 0x37b0 <config+0x774>
	else if (__tmp > 65535)
    3732:	68 ad       	ldd	r22, Y+56	; 0x38
    3734:	79 ad       	ldd	r23, Y+57	; 0x39
    3736:	8a ad       	ldd	r24, Y+58	; 0x3a
    3738:	9b ad       	ldd	r25, Y+59	; 0x3b
    373a:	20 e0       	ldi	r18, 0x00	; 0
    373c:	3f ef       	ldi	r19, 0xFF	; 255
    373e:	4f e7       	ldi	r20, 0x7F	; 127
    3740:	57 e4       	ldi	r21, 0x47	; 71
    3742:	0e 94 76 26 	call	0x4cec	; 0x4cec <__gesf2>
    3746:	18 16       	cp	r1, r24
    3748:	4c f5       	brge	.+82     	; 0x379c <config+0x760>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    374a:	6c ad       	ldd	r22, Y+60	; 0x3c
    374c:	7d ad       	ldd	r23, Y+61	; 0x3d
    374e:	8e ad       	ldd	r24, Y+62	; 0x3e
    3750:	9f ad       	ldd	r25, Y+63	; 0x3f
    3752:	20 e0       	ldi	r18, 0x00	; 0
    3754:	30 e0       	ldi	r19, 0x00	; 0
    3756:	40 e2       	ldi	r20, 0x20	; 32
    3758:	51 e4       	ldi	r21, 0x41	; 65
    375a:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
    375e:	dc 01       	movw	r26, r24
    3760:	cb 01       	movw	r24, r22
    3762:	bc 01       	movw	r22, r24
    3764:	cd 01       	movw	r24, r26
    3766:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
    376a:	dc 01       	movw	r26, r24
    376c:	cb 01       	movw	r24, r22
    376e:	9f ab       	std	Y+55, r25	; 0x37
    3770:	8e ab       	std	Y+54, r24	; 0x36
    3772:	0f c0       	rjmp	.+30     	; 0x3792 <config+0x756>
    3774:	80 e9       	ldi	r24, 0x90	; 144
    3776:	91 e0       	ldi	r25, 0x01	; 1
    3778:	9d ab       	std	Y+53, r25	; 0x35
    377a:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    377c:	8c a9       	ldd	r24, Y+52	; 0x34
    377e:	9d a9       	ldd	r25, Y+53	; 0x35
    3780:	01 97       	sbiw	r24, 0x01	; 1
    3782:	f1 f7       	brne	.-4      	; 0x3780 <config+0x744>
    3784:	9d ab       	std	Y+53, r25	; 0x35
    3786:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3788:	8e a9       	ldd	r24, Y+54	; 0x36
    378a:	9f a9       	ldd	r25, Y+55	; 0x37
    378c:	01 97       	sbiw	r24, 0x01	; 1
    378e:	9f ab       	std	Y+55, r25	; 0x37
    3790:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3792:	8e a9       	ldd	r24, Y+54	; 0x36
    3794:	9f a9       	ldd	r25, Y+55	; 0x37
    3796:	00 97       	sbiw	r24, 0x00	; 0
    3798:	69 f7       	brne	.-38     	; 0x3774 <config+0x738>
    379a:	2d c0       	rjmp	.+90     	; 0x37f6 <config+0x7ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    379c:	68 ad       	ldd	r22, Y+56	; 0x38
    379e:	79 ad       	ldd	r23, Y+57	; 0x39
    37a0:	8a ad       	ldd	r24, Y+58	; 0x3a
    37a2:	9b ad       	ldd	r25, Y+59	; 0x3b
    37a4:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
    37a8:	dc 01       	movw	r26, r24
    37aa:	cb 01       	movw	r24, r22
    37ac:	9f ab       	std	Y+55, r25	; 0x37
    37ae:	8e ab       	std	Y+54, r24	; 0x36
    37b0:	8e a9       	ldd	r24, Y+54	; 0x36
    37b2:	9f a9       	ldd	r25, Y+55	; 0x37
    37b4:	9b ab       	std	Y+51, r25	; 0x33
    37b6:	8a ab       	std	Y+50, r24	; 0x32
    37b8:	8a a9       	ldd	r24, Y+50	; 0x32
    37ba:	9b a9       	ldd	r25, Y+51	; 0x33
    37bc:	01 97       	sbiw	r24, 0x01	; 1
    37be:	f1 f7       	brne	.-4      	; 0x37bc <config+0x780>
    37c0:	9b ab       	std	Y+51, r25	; 0x33
    37c2:	8a ab       	std	Y+50, r24	; 0x32
    37c4:	18 c0       	rjmp	.+48     	; 0x37f6 <config+0x7ba>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    37c6:	fe 01       	movw	r30, r28
    37c8:	ef 5b       	subi	r30, 0xBF	; 191
    37ca:	ff 4f       	sbci	r31, 0xFF	; 255
    37cc:	60 81       	ld	r22, Z
    37ce:	71 81       	ldd	r23, Z+1	; 0x01
    37d0:	82 81       	ldd	r24, Z+2	; 0x02
    37d2:	93 81       	ldd	r25, Z+3	; 0x03
    37d4:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
    37d8:	dc 01       	movw	r26, r24
    37da:	cb 01       	movw	r24, r22
    37dc:	fe 01       	movw	r30, r28
    37de:	e0 5c       	subi	r30, 0xC0	; 192
    37e0:	ff 4f       	sbci	r31, 0xFF	; 255
    37e2:	80 83       	st	Z, r24
    37e4:	fe 01       	movw	r30, r28
    37e6:	e0 5c       	subi	r30, 0xC0	; 192
    37e8:	ff 4f       	sbci	r31, 0xFF	; 255
    37ea:	80 81       	ld	r24, Z
    37ec:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    37ee:	89 a9       	ldd	r24, Y+49	; 0x31
    37f0:	8a 95       	dec	r24
    37f2:	f1 f7       	brne	.-4      	; 0x37f0 <config+0x7b4>
    37f4:	89 ab       	std	Y+49, r24	; 0x31
   _delay_us(1);
	
	
	
		
	   for(i=0;i<8;i++)  // 3 byte
    37f6:	10 92 63 00 	sts	0x0063, r1
    37fa:	1a c0       	rjmp	.+52     	; 0x3830 <config+0x7f4>
   {
      CLR(PS2PORT,PS2cmd);
    37fc:	a5 e3       	ldi	r26, 0x35	; 53
    37fe:	b0 e0       	ldi	r27, 0x00	; 0
    3800:	e5 e3       	ldi	r30, 0x35	; 53
    3802:	f0 e0       	ldi	r31, 0x00	; 0
    3804:	80 81       	ld	r24, Z
    3806:	8b 7f       	andi	r24, 0xFB	; 251
    3808:	8c 93       	st	X, r24
      CLR(PS2PORT,PS2clk);
    380a:	a5 e3       	ldi	r26, 0x35	; 53
    380c:	b0 e0       	ldi	r27, 0x00	; 0
    380e:	e5 e3       	ldi	r30, 0x35	; 53
    3810:	f0 e0       	ldi	r31, 0x00	; 0
    3812:	80 81       	ld	r24, Z
    3814:	8e 7f       	andi	r24, 0xFE	; 254
    3816:	8c 93       	st	X, r24
      SET(PS2PORT,PS2clk); 
    3818:	a5 e3       	ldi	r26, 0x35	; 53
    381a:	b0 e0       	ldi	r27, 0x00	; 0
    381c:	e5 e3       	ldi	r30, 0x35	; 53
    381e:	f0 e0       	ldi	r31, 0x00	; 0
    3820:	80 81       	ld	r24, Z
    3822:	81 60       	ori	r24, 0x01	; 1
    3824:	8c 93       	st	X, r24
   _delay_us(1);
	
	
	
		
	   for(i=0;i<8;i++)  // 3 byte
    3826:	80 91 63 00 	lds	r24, 0x0063
    382a:	8f 5f       	subi	r24, 0xFF	; 255
    382c:	80 93 63 00 	sts	0x0063, r24
    3830:	80 91 63 00 	lds	r24, 0x0063
    3834:	88 30       	cpi	r24, 0x08	; 8
    3836:	10 f3       	brcs	.-60     	; 0x37fc <config+0x7c0>
   {
      CLR(PS2PORT,PS2cmd);
      CLR(PS2PORT,PS2clk);
      SET(PS2PORT,PS2clk); 
   }
   SET(PS2PORT,PS2cmd); 
    3838:	a5 e3       	ldi	r26, 0x35	; 53
    383a:	b0 e0       	ldi	r27, 0x00	; 0
    383c:	e5 e3       	ldi	r30, 0x35	; 53
    383e:	f0 e0       	ldi	r31, 0x00	; 0
    3840:	80 81       	ld	r24, Z
    3842:	84 60       	ori	r24, 0x04	; 4
    3844:	8c 93       	st	X, r24

	
	
	PS2byte=0x01;		//byte1
    3846:	81 e0       	ldi	r24, 0x01	; 1
    3848:	80 93 67 00 	sts	0x0067, r24
	
	for(i=0;i<8;i++)
    384c:	10 92 63 00 	sts	0x0063, r1
    3850:	35 c0       	rjmp	.+106    	; 0x38bc <config+0x880>
   {
      if(CHK(PS2byte,i)) SET(PS2PORT,PS2cmd);
    3852:	80 91 67 00 	lds	r24, 0x0067
    3856:	28 2f       	mov	r18, r24
    3858:	30 e0       	ldi	r19, 0x00	; 0
    385a:	80 91 63 00 	lds	r24, 0x0063
    385e:	88 2f       	mov	r24, r24
    3860:	90 e0       	ldi	r25, 0x00	; 0
    3862:	a9 01       	movw	r20, r18
    3864:	02 c0       	rjmp	.+4      	; 0x386a <config+0x82e>
    3866:	55 95       	asr	r21
    3868:	47 95       	ror	r20
    386a:	8a 95       	dec	r24
    386c:	e2 f7       	brpl	.-8      	; 0x3866 <config+0x82a>
    386e:	ca 01       	movw	r24, r20
    3870:	81 70       	andi	r24, 0x01	; 1
    3872:	90 70       	andi	r25, 0x00	; 0
    3874:	88 23       	and	r24, r24
    3876:	41 f0       	breq	.+16     	; 0x3888 <config+0x84c>
    3878:	a5 e3       	ldi	r26, 0x35	; 53
    387a:	b0 e0       	ldi	r27, 0x00	; 0
    387c:	e5 e3       	ldi	r30, 0x35	; 53
    387e:	f0 e0       	ldi	r31, 0x00	; 0
    3880:	80 81       	ld	r24, Z
    3882:	84 60       	ori	r24, 0x04	; 4
    3884:	8c 93       	st	X, r24
    3886:	07 c0       	rjmp	.+14     	; 0x3896 <config+0x85a>
	  else  CLR(PS2PORT,PS2cmd);
    3888:	a5 e3       	ldi	r26, 0x35	; 53
    388a:	b0 e0       	ldi	r27, 0x00	; 0
    388c:	e5 e3       	ldi	r30, 0x35	; 53
    388e:	f0 e0       	ldi	r31, 0x00	; 0
    3890:	80 81       	ld	r24, Z
    3892:	8b 7f       	andi	r24, 0xFB	; 251
    3894:	8c 93       	st	X, r24
      CLR(PS2PORT,PS2clk); 
    3896:	a5 e3       	ldi	r26, 0x35	; 53
    3898:	b0 e0       	ldi	r27, 0x00	; 0
    389a:	e5 e3       	ldi	r30, 0x35	; 53
    389c:	f0 e0       	ldi	r31, 0x00	; 0
    389e:	80 81       	ld	r24, Z
    38a0:	8e 7f       	andi	r24, 0xFE	; 254
    38a2:	8c 93       	st	X, r24
      SET(PS2PORT,PS2clk); 
    38a4:	a5 e3       	ldi	r26, 0x35	; 53
    38a6:	b0 e0       	ldi	r27, 0x00	; 0
    38a8:	e5 e3       	ldi	r30, 0x35	; 53
    38aa:	f0 e0       	ldi	r31, 0x00	; 0
    38ac:	80 81       	ld	r24, Z
    38ae:	81 60       	ori	r24, 0x01	; 1
    38b0:	8c 93       	st	X, r24

	
	
	PS2byte=0x01;		//byte1
	
	for(i=0;i<8;i++)
    38b2:	80 91 63 00 	lds	r24, 0x0063
    38b6:	8f 5f       	subi	r24, 0xFF	; 255
    38b8:	80 93 63 00 	sts	0x0063, r24
    38bc:	80 91 63 00 	lds	r24, 0x0063
    38c0:	88 30       	cpi	r24, 0x08	; 8
    38c2:	38 f2       	brcs	.-114    	; 0x3852 <config+0x816>
      if(CHK(PS2byte,i)) SET(PS2PORT,PS2cmd);
	  else  CLR(PS2PORT,PS2cmd);
      CLR(PS2PORT,PS2clk); 
      SET(PS2PORT,PS2clk); 
   }
   SET(PS2PORT,PS2cmd); 
    38c4:	a5 e3       	ldi	r26, 0x35	; 53
    38c6:	b0 e0       	ldi	r27, 0x00	; 0
    38c8:	e5 e3       	ldi	r30, 0x35	; 53
    38ca:	f0 e0       	ldi	r31, 0x00	; 0
    38cc:	80 81       	ld	r24, Z
    38ce:	84 60       	ori	r24, 0x04	; 4
    38d0:	8c 93       	st	X, r24
    38d2:	80 e0       	ldi	r24, 0x00	; 0
    38d4:	90 e0       	ldi	r25, 0x00	; 0
    38d6:	a0 e8       	ldi	r26, 0x80	; 128
    38d8:	bf e3       	ldi	r27, 0x3F	; 63
    38da:	8d a7       	std	Y+45, r24	; 0x2d
    38dc:	9e a7       	std	Y+46, r25	; 0x2e
    38de:	af a7       	std	Y+47, r26	; 0x2f
    38e0:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    38e2:	6d a5       	ldd	r22, Y+45	; 0x2d
    38e4:	7e a5       	ldd	r23, Y+46	; 0x2e
    38e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    38e8:	98 a9       	ldd	r25, Y+48	; 0x30
    38ea:	2b ea       	ldi	r18, 0xAB	; 171
    38ec:	3a ea       	ldi	r19, 0xAA	; 170
    38ee:	4a ea       	ldi	r20, 0xAA	; 170
    38f0:	50 e4       	ldi	r21, 0x40	; 64
    38f2:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
    38f6:	dc 01       	movw	r26, r24
    38f8:	cb 01       	movw	r24, r22
    38fa:	89 a7       	std	Y+41, r24	; 0x29
    38fc:	9a a7       	std	Y+42, r25	; 0x2a
    38fe:	ab a7       	std	Y+43, r26	; 0x2b
    3900:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    3902:	69 a5       	ldd	r22, Y+41	; 0x29
    3904:	7a a5       	ldd	r23, Y+42	; 0x2a
    3906:	8b a5       	ldd	r24, Y+43	; 0x2b
    3908:	9c a5       	ldd	r25, Y+44	; 0x2c
    390a:	20 e0       	ldi	r18, 0x00	; 0
    390c:	30 e0       	ldi	r19, 0x00	; 0
    390e:	40 e8       	ldi	r20, 0x80	; 128
    3910:	5f e3       	ldi	r21, 0x3F	; 63
    3912:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__cmpsf2>
    3916:	88 23       	and	r24, r24
    3918:	1c f4       	brge	.+6      	; 0x3920 <config+0x8e4>
		__ticks = 1;
    391a:	81 e0       	ldi	r24, 0x01	; 1
    391c:	88 a7       	std	Y+40, r24	; 0x28
    391e:	91 c0       	rjmp	.+290    	; 0x3a42 <config+0xa06>
	else if (__tmp > 255)
    3920:	69 a5       	ldd	r22, Y+41	; 0x29
    3922:	7a a5       	ldd	r23, Y+42	; 0x2a
    3924:	8b a5       	ldd	r24, Y+43	; 0x2b
    3926:	9c a5       	ldd	r25, Y+44	; 0x2c
    3928:	20 e0       	ldi	r18, 0x00	; 0
    392a:	30 e0       	ldi	r19, 0x00	; 0
    392c:	4f e7       	ldi	r20, 0x7F	; 127
    392e:	53 e4       	ldi	r21, 0x43	; 67
    3930:	0e 94 76 26 	call	0x4cec	; 0x4cec <__gesf2>
    3934:	18 16       	cp	r1, r24
    3936:	0c f0       	brlt	.+2      	; 0x393a <config+0x8fe>
    3938:	7b c0       	rjmp	.+246    	; 0x3a30 <config+0x9f4>
	{
		_delay_ms(__us / 1000.0);
    393a:	6d a5       	ldd	r22, Y+45	; 0x2d
    393c:	7e a5       	ldd	r23, Y+46	; 0x2e
    393e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3940:	98 a9       	ldd	r25, Y+48	; 0x30
    3942:	20 e0       	ldi	r18, 0x00	; 0
    3944:	30 e0       	ldi	r19, 0x00	; 0
    3946:	4a e7       	ldi	r20, 0x7A	; 122
    3948:	54 e4       	ldi	r21, 0x44	; 68
    394a:	0e 94 6d 25 	call	0x4ada	; 0x4ada <__divsf3>
    394e:	dc 01       	movw	r26, r24
    3950:	cb 01       	movw	r24, r22
    3952:	8c a3       	std	Y+36, r24	; 0x24
    3954:	9d a3       	std	Y+37, r25	; 0x25
    3956:	ae a3       	std	Y+38, r26	; 0x26
    3958:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    395a:	6c a1       	ldd	r22, Y+36	; 0x24
    395c:	7d a1       	ldd	r23, Y+37	; 0x25
    395e:	8e a1       	ldd	r24, Y+38	; 0x26
    3960:	9f a1       	ldd	r25, Y+39	; 0x27
    3962:	20 e0       	ldi	r18, 0x00	; 0
    3964:	30 e0       	ldi	r19, 0x00	; 0
    3966:	4a e7       	ldi	r20, 0x7A	; 122
    3968:	55 e4       	ldi	r21, 0x45	; 69
    396a:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
    396e:	dc 01       	movw	r26, r24
    3970:	cb 01       	movw	r24, r22
    3972:	88 a3       	std	Y+32, r24	; 0x20
    3974:	99 a3       	std	Y+33, r25	; 0x21
    3976:	aa a3       	std	Y+34, r26	; 0x22
    3978:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    397a:	68 a1       	ldd	r22, Y+32	; 0x20
    397c:	79 a1       	ldd	r23, Y+33	; 0x21
    397e:	8a a1       	ldd	r24, Y+34	; 0x22
    3980:	9b a1       	ldd	r25, Y+35	; 0x23
    3982:	20 e0       	ldi	r18, 0x00	; 0
    3984:	30 e0       	ldi	r19, 0x00	; 0
    3986:	40 e8       	ldi	r20, 0x80	; 128
    3988:	5f e3       	ldi	r21, 0x3F	; 63
    398a:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__cmpsf2>
    398e:	88 23       	and	r24, r24
    3990:	2c f4       	brge	.+10     	; 0x399c <config+0x960>
		__ticks = 1;
    3992:	81 e0       	ldi	r24, 0x01	; 1
    3994:	90 e0       	ldi	r25, 0x00	; 0
    3996:	9f 8f       	std	Y+31, r25	; 0x1f
    3998:	8e 8f       	std	Y+30, r24	; 0x1e
    399a:	3f c0       	rjmp	.+126    	; 0x3a1a <config+0x9de>
	else if (__tmp > 65535)
    399c:	68 a1       	ldd	r22, Y+32	; 0x20
    399e:	79 a1       	ldd	r23, Y+33	; 0x21
    39a0:	8a a1       	ldd	r24, Y+34	; 0x22
    39a2:	9b a1       	ldd	r25, Y+35	; 0x23
    39a4:	20 e0       	ldi	r18, 0x00	; 0
    39a6:	3f ef       	ldi	r19, 0xFF	; 255
    39a8:	4f e7       	ldi	r20, 0x7F	; 127
    39aa:	57 e4       	ldi	r21, 0x47	; 71
    39ac:	0e 94 76 26 	call	0x4cec	; 0x4cec <__gesf2>
    39b0:	18 16       	cp	r1, r24
    39b2:	4c f5       	brge	.+82     	; 0x3a06 <config+0x9ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39b4:	6c a1       	ldd	r22, Y+36	; 0x24
    39b6:	7d a1       	ldd	r23, Y+37	; 0x25
    39b8:	8e a1       	ldd	r24, Y+38	; 0x26
    39ba:	9f a1       	ldd	r25, Y+39	; 0x27
    39bc:	20 e0       	ldi	r18, 0x00	; 0
    39be:	30 e0       	ldi	r19, 0x00	; 0
    39c0:	40 e2       	ldi	r20, 0x20	; 32
    39c2:	51 e4       	ldi	r21, 0x41	; 65
    39c4:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
    39c8:	dc 01       	movw	r26, r24
    39ca:	cb 01       	movw	r24, r22
    39cc:	bc 01       	movw	r22, r24
    39ce:	cd 01       	movw	r24, r26
    39d0:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
    39d4:	dc 01       	movw	r26, r24
    39d6:	cb 01       	movw	r24, r22
    39d8:	9f 8f       	std	Y+31, r25	; 0x1f
    39da:	8e 8f       	std	Y+30, r24	; 0x1e
    39dc:	0f c0       	rjmp	.+30     	; 0x39fc <config+0x9c0>
    39de:	80 e9       	ldi	r24, 0x90	; 144
    39e0:	91 e0       	ldi	r25, 0x01	; 1
    39e2:	9d 8f       	std	Y+29, r25	; 0x1d
    39e4:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    39e6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    39e8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    39ea:	01 97       	sbiw	r24, 0x01	; 1
    39ec:	f1 f7       	brne	.-4      	; 0x39ea <config+0x9ae>
    39ee:	9d 8f       	std	Y+29, r25	; 0x1d
    39f0:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39f2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    39f4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    39f6:	01 97       	sbiw	r24, 0x01	; 1
    39f8:	9f 8f       	std	Y+31, r25	; 0x1f
    39fa:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39fc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    39fe:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3a00:	00 97       	sbiw	r24, 0x00	; 0
    3a02:	69 f7       	brne	.-38     	; 0x39de <config+0x9a2>
    3a04:	24 c0       	rjmp	.+72     	; 0x3a4e <config+0xa12>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a06:	68 a1       	ldd	r22, Y+32	; 0x20
    3a08:	79 a1       	ldd	r23, Y+33	; 0x21
    3a0a:	8a a1       	ldd	r24, Y+34	; 0x22
    3a0c:	9b a1       	ldd	r25, Y+35	; 0x23
    3a0e:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
    3a12:	dc 01       	movw	r26, r24
    3a14:	cb 01       	movw	r24, r22
    3a16:	9f 8f       	std	Y+31, r25	; 0x1f
    3a18:	8e 8f       	std	Y+30, r24	; 0x1e
    3a1a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3a1c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3a1e:	9b 8f       	std	Y+27, r25	; 0x1b
    3a20:	8a 8f       	std	Y+26, r24	; 0x1a
    3a22:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3a24:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3a26:	01 97       	sbiw	r24, 0x01	; 1
    3a28:	f1 f7       	brne	.-4      	; 0x3a26 <config+0x9ea>
    3a2a:	9b 8f       	std	Y+27, r25	; 0x1b
    3a2c:	8a 8f       	std	Y+26, r24	; 0x1a
    3a2e:	0f c0       	rjmp	.+30     	; 0x3a4e <config+0xa12>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3a30:	69 a5       	ldd	r22, Y+41	; 0x29
    3a32:	7a a5       	ldd	r23, Y+42	; 0x2a
    3a34:	8b a5       	ldd	r24, Y+43	; 0x2b
    3a36:	9c a5       	ldd	r25, Y+44	; 0x2c
    3a38:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
    3a3c:	dc 01       	movw	r26, r24
    3a3e:	cb 01       	movw	r24, r22
    3a40:	88 a7       	std	Y+40, r24	; 0x28
    3a42:	88 a5       	ldd	r24, Y+40	; 0x28
    3a44:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3a46:	89 8d       	ldd	r24, Y+25	; 0x19
    3a48:	8a 95       	dec	r24
    3a4a:	f1 f7       	brne	.-4      	; 0x3a48 <config+0xa0c>
    3a4c:	89 8f       	std	Y+25, r24	; 0x19
   _delay_us(1);
	
	
   
	   for(i=0;i<8;i++)  // 3 byte
    3a4e:	10 92 63 00 	sts	0x0063, r1
    3a52:	1a c0       	rjmp	.+52     	; 0x3a88 <config+0xa4c>
   {
      CLR(PS2PORT,PS2cmd);
    3a54:	a5 e3       	ldi	r26, 0x35	; 53
    3a56:	b0 e0       	ldi	r27, 0x00	; 0
    3a58:	e5 e3       	ldi	r30, 0x35	; 53
    3a5a:	f0 e0       	ldi	r31, 0x00	; 0
    3a5c:	80 81       	ld	r24, Z
    3a5e:	8b 7f       	andi	r24, 0xFB	; 251
    3a60:	8c 93       	st	X, r24
      CLR(PS2PORT,PS2clk);
    3a62:	a5 e3       	ldi	r26, 0x35	; 53
    3a64:	b0 e0       	ldi	r27, 0x00	; 0
    3a66:	e5 e3       	ldi	r30, 0x35	; 53
    3a68:	f0 e0       	ldi	r31, 0x00	; 0
    3a6a:	80 81       	ld	r24, Z
    3a6c:	8e 7f       	andi	r24, 0xFE	; 254
    3a6e:	8c 93       	st	X, r24
      SET(PS2PORT,PS2clk); 
    3a70:	a5 e3       	ldi	r26, 0x35	; 53
    3a72:	b0 e0       	ldi	r27, 0x00	; 0
    3a74:	e5 e3       	ldi	r30, 0x35	; 53
    3a76:	f0 e0       	ldi	r31, 0x00	; 0
    3a78:	80 81       	ld	r24, Z
    3a7a:	81 60       	ori	r24, 0x01	; 1
    3a7c:	8c 93       	st	X, r24
   SET(PS2PORT,PS2cmd); 
   _delay_us(1);
	
	
   
	   for(i=0;i<8;i++)  // 3 byte
    3a7e:	80 91 63 00 	lds	r24, 0x0063
    3a82:	8f 5f       	subi	r24, 0xFF	; 255
    3a84:	80 93 63 00 	sts	0x0063, r24
    3a88:	80 91 63 00 	lds	r24, 0x0063
    3a8c:	88 30       	cpi	r24, 0x08	; 8
    3a8e:	10 f3       	brcs	.-60     	; 0x3a54 <config+0xa18>
   {
      CLR(PS2PORT,PS2cmd);
      CLR(PS2PORT,PS2clk);
      SET(PS2PORT,PS2clk); 
   }
   SET(PS2PORT,PS2cmd);
    3a90:	a5 e3       	ldi	r26, 0x35	; 53
    3a92:	b0 e0       	ldi	r27, 0x00	; 0
    3a94:	e5 e3       	ldi	r30, 0x35	; 53
    3a96:	f0 e0       	ldi	r31, 0x00	; 0
    3a98:	80 81       	ld	r24, Z
    3a9a:	84 60       	ori	r24, 0x04	; 4
    3a9c:	8c 93       	st	X, r24
    3a9e:	80 e0       	ldi	r24, 0x00	; 0
    3aa0:	90 e0       	ldi	r25, 0x00	; 0
    3aa2:	a0 e8       	ldi	r26, 0x80	; 128
    3aa4:	bf e3       	ldi	r27, 0x3F	; 63
    3aa6:	8d 8b       	std	Y+21, r24	; 0x15
    3aa8:	9e 8b       	std	Y+22, r25	; 0x16
    3aaa:	af 8b       	std	Y+23, r26	; 0x17
    3aac:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3aae:	6d 89       	ldd	r22, Y+21	; 0x15
    3ab0:	7e 89       	ldd	r23, Y+22	; 0x16
    3ab2:	8f 89       	ldd	r24, Y+23	; 0x17
    3ab4:	98 8d       	ldd	r25, Y+24	; 0x18
    3ab6:	2b ea       	ldi	r18, 0xAB	; 171
    3ab8:	3a ea       	ldi	r19, 0xAA	; 170
    3aba:	4a ea       	ldi	r20, 0xAA	; 170
    3abc:	50 e4       	ldi	r21, 0x40	; 64
    3abe:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
    3ac2:	dc 01       	movw	r26, r24
    3ac4:	cb 01       	movw	r24, r22
    3ac6:	89 8b       	std	Y+17, r24	; 0x11
    3ac8:	9a 8b       	std	Y+18, r25	; 0x12
    3aca:	ab 8b       	std	Y+19, r26	; 0x13
    3acc:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3ace:	69 89       	ldd	r22, Y+17	; 0x11
    3ad0:	7a 89       	ldd	r23, Y+18	; 0x12
    3ad2:	8b 89       	ldd	r24, Y+19	; 0x13
    3ad4:	9c 89       	ldd	r25, Y+20	; 0x14
    3ad6:	20 e0       	ldi	r18, 0x00	; 0
    3ad8:	30 e0       	ldi	r19, 0x00	; 0
    3ada:	40 e8       	ldi	r20, 0x80	; 128
    3adc:	5f e3       	ldi	r21, 0x3F	; 63
    3ade:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__cmpsf2>
    3ae2:	88 23       	and	r24, r24
    3ae4:	1c f4       	brge	.+6      	; 0x3aec <config+0xab0>
		__ticks = 1;
    3ae6:	81 e0       	ldi	r24, 0x01	; 1
    3ae8:	88 8b       	std	Y+16, r24	; 0x10
    3aea:	91 c0       	rjmp	.+290    	; 0x3c0e <config+0xbd2>
	else if (__tmp > 255)
    3aec:	69 89       	ldd	r22, Y+17	; 0x11
    3aee:	7a 89       	ldd	r23, Y+18	; 0x12
    3af0:	8b 89       	ldd	r24, Y+19	; 0x13
    3af2:	9c 89       	ldd	r25, Y+20	; 0x14
    3af4:	20 e0       	ldi	r18, 0x00	; 0
    3af6:	30 e0       	ldi	r19, 0x00	; 0
    3af8:	4f e7       	ldi	r20, 0x7F	; 127
    3afa:	53 e4       	ldi	r21, 0x43	; 67
    3afc:	0e 94 76 26 	call	0x4cec	; 0x4cec <__gesf2>
    3b00:	18 16       	cp	r1, r24
    3b02:	0c f0       	brlt	.+2      	; 0x3b06 <config+0xaca>
    3b04:	7b c0       	rjmp	.+246    	; 0x3bfc <config+0xbc0>
	{
		_delay_ms(__us / 1000.0);
    3b06:	6d 89       	ldd	r22, Y+21	; 0x15
    3b08:	7e 89       	ldd	r23, Y+22	; 0x16
    3b0a:	8f 89       	ldd	r24, Y+23	; 0x17
    3b0c:	98 8d       	ldd	r25, Y+24	; 0x18
    3b0e:	20 e0       	ldi	r18, 0x00	; 0
    3b10:	30 e0       	ldi	r19, 0x00	; 0
    3b12:	4a e7       	ldi	r20, 0x7A	; 122
    3b14:	54 e4       	ldi	r21, 0x44	; 68
    3b16:	0e 94 6d 25 	call	0x4ada	; 0x4ada <__divsf3>
    3b1a:	dc 01       	movw	r26, r24
    3b1c:	cb 01       	movw	r24, r22
    3b1e:	8c 87       	std	Y+12, r24	; 0x0c
    3b20:	9d 87       	std	Y+13, r25	; 0x0d
    3b22:	ae 87       	std	Y+14, r26	; 0x0e
    3b24:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b26:	6c 85       	ldd	r22, Y+12	; 0x0c
    3b28:	7d 85       	ldd	r23, Y+13	; 0x0d
    3b2a:	8e 85       	ldd	r24, Y+14	; 0x0e
    3b2c:	9f 85       	ldd	r25, Y+15	; 0x0f
    3b2e:	20 e0       	ldi	r18, 0x00	; 0
    3b30:	30 e0       	ldi	r19, 0x00	; 0
    3b32:	4a e7       	ldi	r20, 0x7A	; 122
    3b34:	55 e4       	ldi	r21, 0x45	; 69
    3b36:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
    3b3a:	dc 01       	movw	r26, r24
    3b3c:	cb 01       	movw	r24, r22
    3b3e:	88 87       	std	Y+8, r24	; 0x08
    3b40:	99 87       	std	Y+9, r25	; 0x09
    3b42:	aa 87       	std	Y+10, r26	; 0x0a
    3b44:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3b46:	68 85       	ldd	r22, Y+8	; 0x08
    3b48:	79 85       	ldd	r23, Y+9	; 0x09
    3b4a:	8a 85       	ldd	r24, Y+10	; 0x0a
    3b4c:	9b 85       	ldd	r25, Y+11	; 0x0b
    3b4e:	20 e0       	ldi	r18, 0x00	; 0
    3b50:	30 e0       	ldi	r19, 0x00	; 0
    3b52:	40 e8       	ldi	r20, 0x80	; 128
    3b54:	5f e3       	ldi	r21, 0x3F	; 63
    3b56:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__cmpsf2>
    3b5a:	88 23       	and	r24, r24
    3b5c:	2c f4       	brge	.+10     	; 0x3b68 <config+0xb2c>
		__ticks = 1;
    3b5e:	81 e0       	ldi	r24, 0x01	; 1
    3b60:	90 e0       	ldi	r25, 0x00	; 0
    3b62:	9f 83       	std	Y+7, r25	; 0x07
    3b64:	8e 83       	std	Y+6, r24	; 0x06
    3b66:	3f c0       	rjmp	.+126    	; 0x3be6 <config+0xbaa>
	else if (__tmp > 65535)
    3b68:	68 85       	ldd	r22, Y+8	; 0x08
    3b6a:	79 85       	ldd	r23, Y+9	; 0x09
    3b6c:	8a 85       	ldd	r24, Y+10	; 0x0a
    3b6e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3b70:	20 e0       	ldi	r18, 0x00	; 0
    3b72:	3f ef       	ldi	r19, 0xFF	; 255
    3b74:	4f e7       	ldi	r20, 0x7F	; 127
    3b76:	57 e4       	ldi	r21, 0x47	; 71
    3b78:	0e 94 76 26 	call	0x4cec	; 0x4cec <__gesf2>
    3b7c:	18 16       	cp	r1, r24
    3b7e:	4c f5       	brge	.+82     	; 0x3bd2 <config+0xb96>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b80:	6c 85       	ldd	r22, Y+12	; 0x0c
    3b82:	7d 85       	ldd	r23, Y+13	; 0x0d
    3b84:	8e 85       	ldd	r24, Y+14	; 0x0e
    3b86:	9f 85       	ldd	r25, Y+15	; 0x0f
    3b88:	20 e0       	ldi	r18, 0x00	; 0
    3b8a:	30 e0       	ldi	r19, 0x00	; 0
    3b8c:	40 e2       	ldi	r20, 0x20	; 32
    3b8e:	51 e4       	ldi	r21, 0x41	; 65
    3b90:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
    3b94:	dc 01       	movw	r26, r24
    3b96:	cb 01       	movw	r24, r22
    3b98:	bc 01       	movw	r22, r24
    3b9a:	cd 01       	movw	r24, r26
    3b9c:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
    3ba0:	dc 01       	movw	r26, r24
    3ba2:	cb 01       	movw	r24, r22
    3ba4:	9f 83       	std	Y+7, r25	; 0x07
    3ba6:	8e 83       	std	Y+6, r24	; 0x06
    3ba8:	0f c0       	rjmp	.+30     	; 0x3bc8 <config+0xb8c>
    3baa:	80 e9       	ldi	r24, 0x90	; 144
    3bac:	91 e0       	ldi	r25, 0x01	; 1
    3bae:	9d 83       	std	Y+5, r25	; 0x05
    3bb0:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3bb2:	8c 81       	ldd	r24, Y+4	; 0x04
    3bb4:	9d 81       	ldd	r25, Y+5	; 0x05
    3bb6:	01 97       	sbiw	r24, 0x01	; 1
    3bb8:	f1 f7       	brne	.-4      	; 0x3bb6 <config+0xb7a>
    3bba:	9d 83       	std	Y+5, r25	; 0x05
    3bbc:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bbe:	8e 81       	ldd	r24, Y+6	; 0x06
    3bc0:	9f 81       	ldd	r25, Y+7	; 0x07
    3bc2:	01 97       	sbiw	r24, 0x01	; 1
    3bc4:	9f 83       	std	Y+7, r25	; 0x07
    3bc6:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bc8:	8e 81       	ldd	r24, Y+6	; 0x06
    3bca:	9f 81       	ldd	r25, Y+7	; 0x07
    3bcc:	00 97       	sbiw	r24, 0x00	; 0
    3bce:	69 f7       	brne	.-38     	; 0x3baa <config+0xb6e>
    3bd0:	24 c0       	rjmp	.+72     	; 0x3c1a <config+0xbde>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bd2:	68 85       	ldd	r22, Y+8	; 0x08
    3bd4:	79 85       	ldd	r23, Y+9	; 0x09
    3bd6:	8a 85       	ldd	r24, Y+10	; 0x0a
    3bd8:	9b 85       	ldd	r25, Y+11	; 0x0b
    3bda:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
    3bde:	dc 01       	movw	r26, r24
    3be0:	cb 01       	movw	r24, r22
    3be2:	9f 83       	std	Y+7, r25	; 0x07
    3be4:	8e 83       	std	Y+6, r24	; 0x06
    3be6:	8e 81       	ldd	r24, Y+6	; 0x06
    3be8:	9f 81       	ldd	r25, Y+7	; 0x07
    3bea:	9b 83       	std	Y+3, r25	; 0x03
    3bec:	8a 83       	std	Y+2, r24	; 0x02
    3bee:	8a 81       	ldd	r24, Y+2	; 0x02
    3bf0:	9b 81       	ldd	r25, Y+3	; 0x03
    3bf2:	01 97       	sbiw	r24, 0x01	; 1
    3bf4:	f1 f7       	brne	.-4      	; 0x3bf2 <config+0xbb6>
    3bf6:	9b 83       	std	Y+3, r25	; 0x03
    3bf8:	8a 83       	std	Y+2, r24	; 0x02
    3bfa:	0f c0       	rjmp	.+30     	; 0x3c1a <config+0xbde>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3bfc:	69 89       	ldd	r22, Y+17	; 0x11
    3bfe:	7a 89       	ldd	r23, Y+18	; 0x12
    3c00:	8b 89       	ldd	r24, Y+19	; 0x13
    3c02:	9c 89       	ldd	r25, Y+20	; 0x14
    3c04:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
    3c08:	dc 01       	movw	r26, r24
    3c0a:	cb 01       	movw	r24, r22
    3c0c:	88 8b       	std	Y+16, r24	; 0x10
    3c0e:	88 89       	ldd	r24, Y+16	; 0x10
    3c10:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3c12:	89 81       	ldd	r24, Y+1	; 0x01
    3c14:	8a 95       	dec	r24
    3c16:	f1 f7       	brne	.-4      	; 0x3c14 <config+0xbd8>
    3c18:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	SET(PS2PORT,PS2att);
    3c1a:	a5 e3       	ldi	r26, 0x35	; 53
    3c1c:	b0 e0       	ldi	r27, 0x00	; 0
    3c1e:	e5 e3       	ldi	r30, 0x35	; 53
    3c20:	f0 e0       	ldi	r31, 0x00	; 0
    3c22:	80 81       	ld	r24, Z
    3c24:	80 61       	ori	r24, 0x10	; 16
    3c26:	8c 93       	st	X, r24

}
    3c28:	c8 58       	subi	r28, 0x88	; 136
    3c2a:	df 4f       	sbci	r29, 0xFF	; 255
    3c2c:	0f b6       	in	r0, 0x3f	; 63
    3c2e:	f8 94       	cli
    3c30:	de bf       	out	0x3e, r29	; 62
    3c32:	0f be       	out	0x3f, r0	; 63
    3c34:	cd bf       	out	0x3d, r28	; 61
    3c36:	cf 91       	pop	r28
    3c38:	df 91       	pop	r29
    3c3a:	1f 91       	pop	r17
    3c3c:	0f 91       	pop	r16
    3c3e:	08 95       	ret

00003c40 <analog>:

void analog()	//to set permanent  analog mode
{
    3c40:	0f 93       	push	r16
    3c42:	1f 93       	push	r17
    3c44:	df 93       	push	r29
    3c46:	cf 93       	push	r28
    3c48:	cd b7       	in	r28, 0x3d	; 61
    3c4a:	de b7       	in	r29, 0x3e	; 62
    3c4c:	c0 59       	subi	r28, 0x90	; 144
    3c4e:	d0 40       	sbci	r29, 0x00	; 0
    3c50:	0f b6       	in	r0, 0x3f	; 63
    3c52:	f8 94       	cli
    3c54:	de bf       	out	0x3e, r29	; 62
    3c56:	0f be       	out	0x3f, r0	; 63
    3c58:	cd bf       	out	0x3d, r28	; 61
	
	SET(PS2PORT,PS2cmd); 
    3c5a:	a5 e3       	ldi	r26, 0x35	; 53
    3c5c:	b0 e0       	ldi	r27, 0x00	; 0
    3c5e:	e5 e3       	ldi	r30, 0x35	; 53
    3c60:	f0 e0       	ldi	r31, 0x00	; 0
    3c62:	80 81       	ld	r24, Z
    3c64:	84 60       	ori	r24, 0x04	; 4
    3c66:	8c 93       	st	X, r24
   SET(PS2PORT,PS2clk); 
    3c68:	a5 e3       	ldi	r26, 0x35	; 53
    3c6a:	b0 e0       	ldi	r27, 0x00	; 0
    3c6c:	e5 e3       	ldi	r30, 0x35	; 53
    3c6e:	f0 e0       	ldi	r31, 0x00	; 0
    3c70:	80 81       	ld	r24, Z
    3c72:	81 60       	ori	r24, 0x01	; 1
    3c74:	8c 93       	st	X, r24
   CLR(PS2PORT,PS2att); // low enable joystick
    3c76:	a5 e3       	ldi	r26, 0x35	; 53
    3c78:	b0 e0       	ldi	r27, 0x00	; 0
    3c7a:	e5 e3       	ldi	r30, 0x35	; 53
    3c7c:	f0 e0       	ldi	r31, 0x00	; 0
    3c7e:	80 81       	ld	r24, Z
    3c80:	8f 7e       	andi	r24, 0xEF	; 239
    3c82:	8c 93       	st	X, r24
    3c84:	fe 01       	movw	r30, r28
    3c86:	e3 57       	subi	r30, 0x73	; 115
    3c88:	ff 4f       	sbci	r31, 0xFF	; 255
    3c8a:	80 e0       	ldi	r24, 0x00	; 0
    3c8c:	90 e0       	ldi	r25, 0x00	; 0
    3c8e:	a0 e8       	ldi	r26, 0x80	; 128
    3c90:	bf e3       	ldi	r27, 0x3F	; 63
    3c92:	80 83       	st	Z, r24
    3c94:	91 83       	std	Z+1, r25	; 0x01
    3c96:	a2 83       	std	Z+2, r26	; 0x02
    3c98:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3c9a:	8e 01       	movw	r16, r28
    3c9c:	07 57       	subi	r16, 0x77	; 119
    3c9e:	1f 4f       	sbci	r17, 0xFF	; 255
    3ca0:	fe 01       	movw	r30, r28
    3ca2:	e3 57       	subi	r30, 0x73	; 115
    3ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ca6:	60 81       	ld	r22, Z
    3ca8:	71 81       	ldd	r23, Z+1	; 0x01
    3caa:	82 81       	ldd	r24, Z+2	; 0x02
    3cac:	93 81       	ldd	r25, Z+3	; 0x03
    3cae:	2b ea       	ldi	r18, 0xAB	; 171
    3cb0:	3a ea       	ldi	r19, 0xAA	; 170
    3cb2:	4a ea       	ldi	r20, 0xAA	; 170
    3cb4:	50 e4       	ldi	r21, 0x40	; 64
    3cb6:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
    3cba:	dc 01       	movw	r26, r24
    3cbc:	cb 01       	movw	r24, r22
    3cbe:	f8 01       	movw	r30, r16
    3cc0:	80 83       	st	Z, r24
    3cc2:	91 83       	std	Z+1, r25	; 0x01
    3cc4:	a2 83       	std	Z+2, r26	; 0x02
    3cc6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3cc8:	fe 01       	movw	r30, r28
    3cca:	e7 57       	subi	r30, 0x77	; 119
    3ccc:	ff 4f       	sbci	r31, 0xFF	; 255
    3cce:	60 81       	ld	r22, Z
    3cd0:	71 81       	ldd	r23, Z+1	; 0x01
    3cd2:	82 81       	ldd	r24, Z+2	; 0x02
    3cd4:	93 81       	ldd	r25, Z+3	; 0x03
    3cd6:	20 e0       	ldi	r18, 0x00	; 0
    3cd8:	30 e0       	ldi	r19, 0x00	; 0
    3cda:	40 e8       	ldi	r20, 0x80	; 128
    3cdc:	5f e3       	ldi	r21, 0x3F	; 63
    3cde:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__cmpsf2>
    3ce2:	88 23       	and	r24, r24
    3ce4:	34 f4       	brge	.+12     	; 0x3cf2 <analog+0xb2>
		__ticks = 1;
    3ce6:	fe 01       	movw	r30, r28
    3ce8:	e8 57       	subi	r30, 0x78	; 120
    3cea:	ff 4f       	sbci	r31, 0xFF	; 255
    3cec:	81 e0       	ldi	r24, 0x01	; 1
    3cee:	80 83       	st	Z, r24
    3cf0:	e0 c0       	rjmp	.+448    	; 0x3eb2 <analog+0x272>
	else if (__tmp > 255)
    3cf2:	fe 01       	movw	r30, r28
    3cf4:	e7 57       	subi	r30, 0x77	; 119
    3cf6:	ff 4f       	sbci	r31, 0xFF	; 255
    3cf8:	60 81       	ld	r22, Z
    3cfa:	71 81       	ldd	r23, Z+1	; 0x01
    3cfc:	82 81       	ldd	r24, Z+2	; 0x02
    3cfe:	93 81       	ldd	r25, Z+3	; 0x03
    3d00:	20 e0       	ldi	r18, 0x00	; 0
    3d02:	30 e0       	ldi	r19, 0x00	; 0
    3d04:	4f e7       	ldi	r20, 0x7F	; 127
    3d06:	53 e4       	ldi	r21, 0x43	; 67
    3d08:	0e 94 76 26 	call	0x4cec	; 0x4cec <__gesf2>
    3d0c:	18 16       	cp	r1, r24
    3d0e:	0c f0       	brlt	.+2      	; 0x3d12 <analog+0xd2>
    3d10:	c0 c0       	rjmp	.+384    	; 0x3e92 <analog+0x252>
	{
		_delay_ms(__us / 1000.0);
    3d12:	fe 01       	movw	r30, r28
    3d14:	e3 57       	subi	r30, 0x73	; 115
    3d16:	ff 4f       	sbci	r31, 0xFF	; 255
    3d18:	60 81       	ld	r22, Z
    3d1a:	71 81       	ldd	r23, Z+1	; 0x01
    3d1c:	82 81       	ldd	r24, Z+2	; 0x02
    3d1e:	93 81       	ldd	r25, Z+3	; 0x03
    3d20:	20 e0       	ldi	r18, 0x00	; 0
    3d22:	30 e0       	ldi	r19, 0x00	; 0
    3d24:	4a e7       	ldi	r20, 0x7A	; 122
    3d26:	54 e4       	ldi	r21, 0x44	; 68
    3d28:	0e 94 6d 25 	call	0x4ada	; 0x4ada <__divsf3>
    3d2c:	dc 01       	movw	r26, r24
    3d2e:	cb 01       	movw	r24, r22
    3d30:	fe 01       	movw	r30, r28
    3d32:	ec 57       	subi	r30, 0x7C	; 124
    3d34:	ff 4f       	sbci	r31, 0xFF	; 255
    3d36:	80 83       	st	Z, r24
    3d38:	91 83       	std	Z+1, r25	; 0x01
    3d3a:	a2 83       	std	Z+2, r26	; 0x02
    3d3c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d3e:	8e 01       	movw	r16, r28
    3d40:	00 58       	subi	r16, 0x80	; 128
    3d42:	1f 4f       	sbci	r17, 0xFF	; 255
    3d44:	fe 01       	movw	r30, r28
    3d46:	ec 57       	subi	r30, 0x7C	; 124
    3d48:	ff 4f       	sbci	r31, 0xFF	; 255
    3d4a:	60 81       	ld	r22, Z
    3d4c:	71 81       	ldd	r23, Z+1	; 0x01
    3d4e:	82 81       	ldd	r24, Z+2	; 0x02
    3d50:	93 81       	ldd	r25, Z+3	; 0x03
    3d52:	20 e0       	ldi	r18, 0x00	; 0
    3d54:	30 e0       	ldi	r19, 0x00	; 0
    3d56:	4a e7       	ldi	r20, 0x7A	; 122
    3d58:	55 e4       	ldi	r21, 0x45	; 69
    3d5a:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
    3d5e:	dc 01       	movw	r26, r24
    3d60:	cb 01       	movw	r24, r22
    3d62:	f8 01       	movw	r30, r16
    3d64:	80 83       	st	Z, r24
    3d66:	91 83       	std	Z+1, r25	; 0x01
    3d68:	a2 83       	std	Z+2, r26	; 0x02
    3d6a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3d6c:	fe 01       	movw	r30, r28
    3d6e:	e0 58       	subi	r30, 0x80	; 128
    3d70:	ff 4f       	sbci	r31, 0xFF	; 255
    3d72:	60 81       	ld	r22, Z
    3d74:	71 81       	ldd	r23, Z+1	; 0x01
    3d76:	82 81       	ldd	r24, Z+2	; 0x02
    3d78:	93 81       	ldd	r25, Z+3	; 0x03
    3d7a:	20 e0       	ldi	r18, 0x00	; 0
    3d7c:	30 e0       	ldi	r19, 0x00	; 0
    3d7e:	40 e8       	ldi	r20, 0x80	; 128
    3d80:	5f e3       	ldi	r21, 0x3F	; 63
    3d82:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__cmpsf2>
    3d86:	88 23       	and	r24, r24
    3d88:	44 f4       	brge	.+16     	; 0x3d9a <analog+0x15a>
		__ticks = 1;
    3d8a:	fe 01       	movw	r30, r28
    3d8c:	e2 58       	subi	r30, 0x82	; 130
    3d8e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d90:	81 e0       	ldi	r24, 0x01	; 1
    3d92:	90 e0       	ldi	r25, 0x00	; 0
    3d94:	91 83       	std	Z+1, r25	; 0x01
    3d96:	80 83       	st	Z, r24
    3d98:	64 c0       	rjmp	.+200    	; 0x3e62 <analog+0x222>
	else if (__tmp > 65535)
    3d9a:	fe 01       	movw	r30, r28
    3d9c:	e0 58       	subi	r30, 0x80	; 128
    3d9e:	ff 4f       	sbci	r31, 0xFF	; 255
    3da0:	60 81       	ld	r22, Z
    3da2:	71 81       	ldd	r23, Z+1	; 0x01
    3da4:	82 81       	ldd	r24, Z+2	; 0x02
    3da6:	93 81       	ldd	r25, Z+3	; 0x03
    3da8:	20 e0       	ldi	r18, 0x00	; 0
    3daa:	3f ef       	ldi	r19, 0xFF	; 255
    3dac:	4f e7       	ldi	r20, 0x7F	; 127
    3dae:	57 e4       	ldi	r21, 0x47	; 71
    3db0:	0e 94 76 26 	call	0x4cec	; 0x4cec <__gesf2>
    3db4:	18 16       	cp	r1, r24
    3db6:	0c f0       	brlt	.+2      	; 0x3dba <analog+0x17a>
    3db8:	43 c0       	rjmp	.+134    	; 0x3e40 <analog+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3dba:	fe 01       	movw	r30, r28
    3dbc:	ec 57       	subi	r30, 0x7C	; 124
    3dbe:	ff 4f       	sbci	r31, 0xFF	; 255
    3dc0:	60 81       	ld	r22, Z
    3dc2:	71 81       	ldd	r23, Z+1	; 0x01
    3dc4:	82 81       	ldd	r24, Z+2	; 0x02
    3dc6:	93 81       	ldd	r25, Z+3	; 0x03
    3dc8:	20 e0       	ldi	r18, 0x00	; 0
    3dca:	30 e0       	ldi	r19, 0x00	; 0
    3dcc:	40 e2       	ldi	r20, 0x20	; 32
    3dce:	51 e4       	ldi	r21, 0x41	; 65
    3dd0:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
    3dd4:	dc 01       	movw	r26, r24
    3dd6:	cb 01       	movw	r24, r22
    3dd8:	8e 01       	movw	r16, r28
    3dda:	02 58       	subi	r16, 0x82	; 130
    3ddc:	1f 4f       	sbci	r17, 0xFF	; 255
    3dde:	bc 01       	movw	r22, r24
    3de0:	cd 01       	movw	r24, r26
    3de2:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
    3de6:	dc 01       	movw	r26, r24
    3de8:	cb 01       	movw	r24, r22
    3dea:	f8 01       	movw	r30, r16
    3dec:	91 83       	std	Z+1, r25	; 0x01
    3dee:	80 83       	st	Z, r24
    3df0:	1f c0       	rjmp	.+62     	; 0x3e30 <analog+0x1f0>
    3df2:	fe 01       	movw	r30, r28
    3df4:	e4 58       	subi	r30, 0x84	; 132
    3df6:	ff 4f       	sbci	r31, 0xFF	; 255
    3df8:	80 e9       	ldi	r24, 0x90	; 144
    3dfa:	91 e0       	ldi	r25, 0x01	; 1
    3dfc:	91 83       	std	Z+1, r25	; 0x01
    3dfe:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3e00:	fe 01       	movw	r30, r28
    3e02:	e4 58       	subi	r30, 0x84	; 132
    3e04:	ff 4f       	sbci	r31, 0xFF	; 255
    3e06:	80 81       	ld	r24, Z
    3e08:	91 81       	ldd	r25, Z+1	; 0x01
    3e0a:	01 97       	sbiw	r24, 0x01	; 1
    3e0c:	f1 f7       	brne	.-4      	; 0x3e0a <analog+0x1ca>
    3e0e:	fe 01       	movw	r30, r28
    3e10:	e4 58       	subi	r30, 0x84	; 132
    3e12:	ff 4f       	sbci	r31, 0xFF	; 255
    3e14:	91 83       	std	Z+1, r25	; 0x01
    3e16:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e18:	de 01       	movw	r26, r28
    3e1a:	a2 58       	subi	r26, 0x82	; 130
    3e1c:	bf 4f       	sbci	r27, 0xFF	; 255
    3e1e:	fe 01       	movw	r30, r28
    3e20:	e2 58       	subi	r30, 0x82	; 130
    3e22:	ff 4f       	sbci	r31, 0xFF	; 255
    3e24:	80 81       	ld	r24, Z
    3e26:	91 81       	ldd	r25, Z+1	; 0x01
    3e28:	01 97       	sbiw	r24, 0x01	; 1
    3e2a:	11 96       	adiw	r26, 0x01	; 1
    3e2c:	9c 93       	st	X, r25
    3e2e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e30:	fe 01       	movw	r30, r28
    3e32:	e2 58       	subi	r30, 0x82	; 130
    3e34:	ff 4f       	sbci	r31, 0xFF	; 255
    3e36:	80 81       	ld	r24, Z
    3e38:	91 81       	ldd	r25, Z+1	; 0x01
    3e3a:	00 97       	sbiw	r24, 0x00	; 0
    3e3c:	d1 f6       	brne	.-76     	; 0x3df2 <analog+0x1b2>
    3e3e:	4b c0       	rjmp	.+150    	; 0x3ed6 <analog+0x296>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e40:	8e 01       	movw	r16, r28
    3e42:	02 58       	subi	r16, 0x82	; 130
    3e44:	1f 4f       	sbci	r17, 0xFF	; 255
    3e46:	fe 01       	movw	r30, r28
    3e48:	e0 58       	subi	r30, 0x80	; 128
    3e4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e4c:	60 81       	ld	r22, Z
    3e4e:	71 81       	ldd	r23, Z+1	; 0x01
    3e50:	82 81       	ldd	r24, Z+2	; 0x02
    3e52:	93 81       	ldd	r25, Z+3	; 0x03
    3e54:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
    3e58:	dc 01       	movw	r26, r24
    3e5a:	cb 01       	movw	r24, r22
    3e5c:	f8 01       	movw	r30, r16
    3e5e:	91 83       	std	Z+1, r25	; 0x01
    3e60:	80 83       	st	Z, r24
    3e62:	de 01       	movw	r26, r28
    3e64:	a6 58       	subi	r26, 0x86	; 134
    3e66:	bf 4f       	sbci	r27, 0xFF	; 255
    3e68:	fe 01       	movw	r30, r28
    3e6a:	e2 58       	subi	r30, 0x82	; 130
    3e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e6e:	80 81       	ld	r24, Z
    3e70:	91 81       	ldd	r25, Z+1	; 0x01
    3e72:	11 96       	adiw	r26, 0x01	; 1
    3e74:	9c 93       	st	X, r25
    3e76:	8e 93       	st	-X, r24
    3e78:	fe 01       	movw	r30, r28
    3e7a:	e6 58       	subi	r30, 0x86	; 134
    3e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e7e:	80 81       	ld	r24, Z
    3e80:	91 81       	ldd	r25, Z+1	; 0x01
    3e82:	01 97       	sbiw	r24, 0x01	; 1
    3e84:	f1 f7       	brne	.-4      	; 0x3e82 <analog+0x242>
    3e86:	fe 01       	movw	r30, r28
    3e88:	e6 58       	subi	r30, 0x86	; 134
    3e8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e8c:	91 83       	std	Z+1, r25	; 0x01
    3e8e:	80 83       	st	Z, r24
    3e90:	22 c0       	rjmp	.+68     	; 0x3ed6 <analog+0x296>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3e92:	8e 01       	movw	r16, r28
    3e94:	08 57       	subi	r16, 0x78	; 120
    3e96:	1f 4f       	sbci	r17, 0xFF	; 255
    3e98:	fe 01       	movw	r30, r28
    3e9a:	e7 57       	subi	r30, 0x77	; 119
    3e9c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e9e:	60 81       	ld	r22, Z
    3ea0:	71 81       	ldd	r23, Z+1	; 0x01
    3ea2:	82 81       	ldd	r24, Z+2	; 0x02
    3ea4:	93 81       	ldd	r25, Z+3	; 0x03
    3ea6:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
    3eaa:	dc 01       	movw	r26, r24
    3eac:	cb 01       	movw	r24, r22
    3eae:	f8 01       	movw	r30, r16
    3eb0:	80 83       	st	Z, r24
    3eb2:	de 01       	movw	r26, r28
    3eb4:	a7 58       	subi	r26, 0x87	; 135
    3eb6:	bf 4f       	sbci	r27, 0xFF	; 255
    3eb8:	fe 01       	movw	r30, r28
    3eba:	e8 57       	subi	r30, 0x78	; 120
    3ebc:	ff 4f       	sbci	r31, 0xFF	; 255
    3ebe:	80 81       	ld	r24, Z
    3ec0:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3ec2:	fe 01       	movw	r30, r28
    3ec4:	e7 58       	subi	r30, 0x87	; 135
    3ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ec8:	80 81       	ld	r24, Z
    3eca:	8a 95       	dec	r24
    3ecc:	f1 f7       	brne	.-4      	; 0x3eca <analog+0x28a>
    3ece:	fe 01       	movw	r30, r28
    3ed0:	e7 58       	subi	r30, 0x87	; 135
    3ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ed4:	80 83       	st	Z, r24
  _delay_us(1);
  PS2byte=0x01;		//byte1
    3ed6:	81 e0       	ldi	r24, 0x01	; 1
    3ed8:	80 93 67 00 	sts	0x0067, r24
	for(i=0;i<8;i++)
    3edc:	10 92 63 00 	sts	0x0063, r1
    3ee0:	35 c0       	rjmp	.+106    	; 0x3f4c <analog+0x30c>
   {
      if(CHK(PS2byte,i)) SET(PS2PORT,PS2cmd);
    3ee2:	80 91 67 00 	lds	r24, 0x0067
    3ee6:	28 2f       	mov	r18, r24
    3ee8:	30 e0       	ldi	r19, 0x00	; 0
    3eea:	80 91 63 00 	lds	r24, 0x0063
    3eee:	88 2f       	mov	r24, r24
    3ef0:	90 e0       	ldi	r25, 0x00	; 0
    3ef2:	a9 01       	movw	r20, r18
    3ef4:	02 c0       	rjmp	.+4      	; 0x3efa <analog+0x2ba>
    3ef6:	55 95       	asr	r21
    3ef8:	47 95       	ror	r20
    3efa:	8a 95       	dec	r24
    3efc:	e2 f7       	brpl	.-8      	; 0x3ef6 <analog+0x2b6>
    3efe:	ca 01       	movw	r24, r20
    3f00:	81 70       	andi	r24, 0x01	; 1
    3f02:	90 70       	andi	r25, 0x00	; 0
    3f04:	88 23       	and	r24, r24
    3f06:	41 f0       	breq	.+16     	; 0x3f18 <analog+0x2d8>
    3f08:	a5 e3       	ldi	r26, 0x35	; 53
    3f0a:	b0 e0       	ldi	r27, 0x00	; 0
    3f0c:	e5 e3       	ldi	r30, 0x35	; 53
    3f0e:	f0 e0       	ldi	r31, 0x00	; 0
    3f10:	80 81       	ld	r24, Z
    3f12:	84 60       	ori	r24, 0x04	; 4
    3f14:	8c 93       	st	X, r24
    3f16:	07 c0       	rjmp	.+14     	; 0x3f26 <analog+0x2e6>
	  else  CLR(PS2PORT,PS2cmd);
    3f18:	a5 e3       	ldi	r26, 0x35	; 53
    3f1a:	b0 e0       	ldi	r27, 0x00	; 0
    3f1c:	e5 e3       	ldi	r30, 0x35	; 53
    3f1e:	f0 e0       	ldi	r31, 0x00	; 0
    3f20:	80 81       	ld	r24, Z
    3f22:	8b 7f       	andi	r24, 0xFB	; 251
    3f24:	8c 93       	st	X, r24
      CLR(PS2PORT,PS2clk); 
    3f26:	a5 e3       	ldi	r26, 0x35	; 53
    3f28:	b0 e0       	ldi	r27, 0x00	; 0
    3f2a:	e5 e3       	ldi	r30, 0x35	; 53
    3f2c:	f0 e0       	ldi	r31, 0x00	; 0
    3f2e:	80 81       	ld	r24, Z
    3f30:	8e 7f       	andi	r24, 0xFE	; 254
    3f32:	8c 93       	st	X, r24
      SET(PS2PORT,PS2clk); 
    3f34:	a5 e3       	ldi	r26, 0x35	; 53
    3f36:	b0 e0       	ldi	r27, 0x00	; 0
    3f38:	e5 e3       	ldi	r30, 0x35	; 53
    3f3a:	f0 e0       	ldi	r31, 0x00	; 0
    3f3c:	80 81       	ld	r24, Z
    3f3e:	81 60       	ori	r24, 0x01	; 1
    3f40:	8c 93       	st	X, r24
	SET(PS2PORT,PS2cmd); 
   SET(PS2PORT,PS2clk); 
   CLR(PS2PORT,PS2att); // low enable joystick
  _delay_us(1);
  PS2byte=0x01;		//byte1
	for(i=0;i<8;i++)
    3f42:	80 91 63 00 	lds	r24, 0x0063
    3f46:	8f 5f       	subi	r24, 0xFF	; 255
    3f48:	80 93 63 00 	sts	0x0063, r24
    3f4c:	80 91 63 00 	lds	r24, 0x0063
    3f50:	88 30       	cpi	r24, 0x08	; 8
    3f52:	38 f2       	brcs	.-114    	; 0x3ee2 <analog+0x2a2>
      if(CHK(PS2byte,i)) SET(PS2PORT,PS2cmd);
	  else  CLR(PS2PORT,PS2cmd);
      CLR(PS2PORT,PS2clk); 
      SET(PS2PORT,PS2clk); 
   }
   SET(PS2PORT,PS2cmd); 
    3f54:	a5 e3       	ldi	r26, 0x35	; 53
    3f56:	b0 e0       	ldi	r27, 0x00	; 0
    3f58:	e5 e3       	ldi	r30, 0x35	; 53
    3f5a:	f0 e0       	ldi	r31, 0x00	; 0
    3f5c:	80 81       	ld	r24, Z
    3f5e:	84 60       	ori	r24, 0x04	; 4
    3f60:	8c 93       	st	X, r24
    3f62:	fe 01       	movw	r30, r28
    3f64:	eb 58       	subi	r30, 0x8B	; 139
    3f66:	ff 4f       	sbci	r31, 0xFF	; 255
    3f68:	80 e0       	ldi	r24, 0x00	; 0
    3f6a:	90 e0       	ldi	r25, 0x00	; 0
    3f6c:	a0 e8       	ldi	r26, 0x80	; 128
    3f6e:	bf e3       	ldi	r27, 0x3F	; 63
    3f70:	80 83       	st	Z, r24
    3f72:	91 83       	std	Z+1, r25	; 0x01
    3f74:	a2 83       	std	Z+2, r26	; 0x02
    3f76:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3f78:	8e 01       	movw	r16, r28
    3f7a:	0f 58       	subi	r16, 0x8F	; 143
    3f7c:	1f 4f       	sbci	r17, 0xFF	; 255
    3f7e:	fe 01       	movw	r30, r28
    3f80:	eb 58       	subi	r30, 0x8B	; 139
    3f82:	ff 4f       	sbci	r31, 0xFF	; 255
    3f84:	60 81       	ld	r22, Z
    3f86:	71 81       	ldd	r23, Z+1	; 0x01
    3f88:	82 81       	ldd	r24, Z+2	; 0x02
    3f8a:	93 81       	ldd	r25, Z+3	; 0x03
    3f8c:	2b ea       	ldi	r18, 0xAB	; 171
    3f8e:	3a ea       	ldi	r19, 0xAA	; 170
    3f90:	4a ea       	ldi	r20, 0xAA	; 170
    3f92:	50 e4       	ldi	r21, 0x40	; 64
    3f94:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
    3f98:	dc 01       	movw	r26, r24
    3f9a:	cb 01       	movw	r24, r22
    3f9c:	f8 01       	movw	r30, r16
    3f9e:	80 83       	st	Z, r24
    3fa0:	91 83       	std	Z+1, r25	; 0x01
    3fa2:	a2 83       	std	Z+2, r26	; 0x02
    3fa4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3fa6:	fe 01       	movw	r30, r28
    3fa8:	ef 58       	subi	r30, 0x8F	; 143
    3faa:	ff 4f       	sbci	r31, 0xFF	; 255
    3fac:	60 81       	ld	r22, Z
    3fae:	71 81       	ldd	r23, Z+1	; 0x01
    3fb0:	82 81       	ldd	r24, Z+2	; 0x02
    3fb2:	93 81       	ldd	r25, Z+3	; 0x03
    3fb4:	20 e0       	ldi	r18, 0x00	; 0
    3fb6:	30 e0       	ldi	r19, 0x00	; 0
    3fb8:	40 e8       	ldi	r20, 0x80	; 128
    3fba:	5f e3       	ldi	r21, 0x3F	; 63
    3fbc:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__cmpsf2>
    3fc0:	88 23       	and	r24, r24
    3fc2:	34 f4       	brge	.+12     	; 0x3fd0 <analog+0x390>
		__ticks = 1;
    3fc4:	fe 01       	movw	r30, r28
    3fc6:	e0 59       	subi	r30, 0x90	; 144
    3fc8:	ff 4f       	sbci	r31, 0xFF	; 255
    3fca:	81 e0       	ldi	r24, 0x01	; 1
    3fcc:	80 83       	st	Z, r24
    3fce:	e0 c0       	rjmp	.+448    	; 0x4190 <analog+0x550>
	else if (__tmp > 255)
    3fd0:	fe 01       	movw	r30, r28
    3fd2:	ef 58       	subi	r30, 0x8F	; 143
    3fd4:	ff 4f       	sbci	r31, 0xFF	; 255
    3fd6:	60 81       	ld	r22, Z
    3fd8:	71 81       	ldd	r23, Z+1	; 0x01
    3fda:	82 81       	ldd	r24, Z+2	; 0x02
    3fdc:	93 81       	ldd	r25, Z+3	; 0x03
    3fde:	20 e0       	ldi	r18, 0x00	; 0
    3fe0:	30 e0       	ldi	r19, 0x00	; 0
    3fe2:	4f e7       	ldi	r20, 0x7F	; 127
    3fe4:	53 e4       	ldi	r21, 0x43	; 67
    3fe6:	0e 94 76 26 	call	0x4cec	; 0x4cec <__gesf2>
    3fea:	18 16       	cp	r1, r24
    3fec:	0c f0       	brlt	.+2      	; 0x3ff0 <analog+0x3b0>
    3fee:	c0 c0       	rjmp	.+384    	; 0x4170 <analog+0x530>
	{
		_delay_ms(__us / 1000.0);
    3ff0:	fe 01       	movw	r30, r28
    3ff2:	eb 58       	subi	r30, 0x8B	; 139
    3ff4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ff6:	60 81       	ld	r22, Z
    3ff8:	71 81       	ldd	r23, Z+1	; 0x01
    3ffa:	82 81       	ldd	r24, Z+2	; 0x02
    3ffc:	93 81       	ldd	r25, Z+3	; 0x03
    3ffe:	20 e0       	ldi	r18, 0x00	; 0
    4000:	30 e0       	ldi	r19, 0x00	; 0
    4002:	4a e7       	ldi	r20, 0x7A	; 122
    4004:	54 e4       	ldi	r21, 0x44	; 68
    4006:	0e 94 6d 25 	call	0x4ada	; 0x4ada <__divsf3>
    400a:	dc 01       	movw	r26, r24
    400c:	cb 01       	movw	r24, r22
    400e:	fe 01       	movw	r30, r28
    4010:	e4 59       	subi	r30, 0x94	; 148
    4012:	ff 4f       	sbci	r31, 0xFF	; 255
    4014:	80 83       	st	Z, r24
    4016:	91 83       	std	Z+1, r25	; 0x01
    4018:	a2 83       	std	Z+2, r26	; 0x02
    401a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    401c:	8e 01       	movw	r16, r28
    401e:	08 59       	subi	r16, 0x98	; 152
    4020:	1f 4f       	sbci	r17, 0xFF	; 255
    4022:	fe 01       	movw	r30, r28
    4024:	e4 59       	subi	r30, 0x94	; 148
    4026:	ff 4f       	sbci	r31, 0xFF	; 255
    4028:	60 81       	ld	r22, Z
    402a:	71 81       	ldd	r23, Z+1	; 0x01
    402c:	82 81       	ldd	r24, Z+2	; 0x02
    402e:	93 81       	ldd	r25, Z+3	; 0x03
    4030:	20 e0       	ldi	r18, 0x00	; 0
    4032:	30 e0       	ldi	r19, 0x00	; 0
    4034:	4a e7       	ldi	r20, 0x7A	; 122
    4036:	55 e4       	ldi	r21, 0x45	; 69
    4038:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
    403c:	dc 01       	movw	r26, r24
    403e:	cb 01       	movw	r24, r22
    4040:	f8 01       	movw	r30, r16
    4042:	80 83       	st	Z, r24
    4044:	91 83       	std	Z+1, r25	; 0x01
    4046:	a2 83       	std	Z+2, r26	; 0x02
    4048:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    404a:	fe 01       	movw	r30, r28
    404c:	e8 59       	subi	r30, 0x98	; 152
    404e:	ff 4f       	sbci	r31, 0xFF	; 255
    4050:	60 81       	ld	r22, Z
    4052:	71 81       	ldd	r23, Z+1	; 0x01
    4054:	82 81       	ldd	r24, Z+2	; 0x02
    4056:	93 81       	ldd	r25, Z+3	; 0x03
    4058:	20 e0       	ldi	r18, 0x00	; 0
    405a:	30 e0       	ldi	r19, 0x00	; 0
    405c:	40 e8       	ldi	r20, 0x80	; 128
    405e:	5f e3       	ldi	r21, 0x3F	; 63
    4060:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__cmpsf2>
    4064:	88 23       	and	r24, r24
    4066:	44 f4       	brge	.+16     	; 0x4078 <analog+0x438>
		__ticks = 1;
    4068:	fe 01       	movw	r30, r28
    406a:	ea 59       	subi	r30, 0x9A	; 154
    406c:	ff 4f       	sbci	r31, 0xFF	; 255
    406e:	81 e0       	ldi	r24, 0x01	; 1
    4070:	90 e0       	ldi	r25, 0x00	; 0
    4072:	91 83       	std	Z+1, r25	; 0x01
    4074:	80 83       	st	Z, r24
    4076:	64 c0       	rjmp	.+200    	; 0x4140 <analog+0x500>
	else if (__tmp > 65535)
    4078:	fe 01       	movw	r30, r28
    407a:	e8 59       	subi	r30, 0x98	; 152
    407c:	ff 4f       	sbci	r31, 0xFF	; 255
    407e:	60 81       	ld	r22, Z
    4080:	71 81       	ldd	r23, Z+1	; 0x01
    4082:	82 81       	ldd	r24, Z+2	; 0x02
    4084:	93 81       	ldd	r25, Z+3	; 0x03
    4086:	20 e0       	ldi	r18, 0x00	; 0
    4088:	3f ef       	ldi	r19, 0xFF	; 255
    408a:	4f e7       	ldi	r20, 0x7F	; 127
    408c:	57 e4       	ldi	r21, 0x47	; 71
    408e:	0e 94 76 26 	call	0x4cec	; 0x4cec <__gesf2>
    4092:	18 16       	cp	r1, r24
    4094:	0c f0       	brlt	.+2      	; 0x4098 <analog+0x458>
    4096:	43 c0       	rjmp	.+134    	; 0x411e <analog+0x4de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4098:	fe 01       	movw	r30, r28
    409a:	e4 59       	subi	r30, 0x94	; 148
    409c:	ff 4f       	sbci	r31, 0xFF	; 255
    409e:	60 81       	ld	r22, Z
    40a0:	71 81       	ldd	r23, Z+1	; 0x01
    40a2:	82 81       	ldd	r24, Z+2	; 0x02
    40a4:	93 81       	ldd	r25, Z+3	; 0x03
    40a6:	20 e0       	ldi	r18, 0x00	; 0
    40a8:	30 e0       	ldi	r19, 0x00	; 0
    40aa:	40 e2       	ldi	r20, 0x20	; 32
    40ac:	51 e4       	ldi	r21, 0x41	; 65
    40ae:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
    40b2:	dc 01       	movw	r26, r24
    40b4:	cb 01       	movw	r24, r22
    40b6:	8e 01       	movw	r16, r28
    40b8:	0a 59       	subi	r16, 0x9A	; 154
    40ba:	1f 4f       	sbci	r17, 0xFF	; 255
    40bc:	bc 01       	movw	r22, r24
    40be:	cd 01       	movw	r24, r26
    40c0:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
    40c4:	dc 01       	movw	r26, r24
    40c6:	cb 01       	movw	r24, r22
    40c8:	f8 01       	movw	r30, r16
    40ca:	91 83       	std	Z+1, r25	; 0x01
    40cc:	80 83       	st	Z, r24
    40ce:	1f c0       	rjmp	.+62     	; 0x410e <analog+0x4ce>
    40d0:	fe 01       	movw	r30, r28
    40d2:	ec 59       	subi	r30, 0x9C	; 156
    40d4:	ff 4f       	sbci	r31, 0xFF	; 255
    40d6:	80 e9       	ldi	r24, 0x90	; 144
    40d8:	91 e0       	ldi	r25, 0x01	; 1
    40da:	91 83       	std	Z+1, r25	; 0x01
    40dc:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    40de:	fe 01       	movw	r30, r28
    40e0:	ec 59       	subi	r30, 0x9C	; 156
    40e2:	ff 4f       	sbci	r31, 0xFF	; 255
    40e4:	80 81       	ld	r24, Z
    40e6:	91 81       	ldd	r25, Z+1	; 0x01
    40e8:	01 97       	sbiw	r24, 0x01	; 1
    40ea:	f1 f7       	brne	.-4      	; 0x40e8 <analog+0x4a8>
    40ec:	fe 01       	movw	r30, r28
    40ee:	ec 59       	subi	r30, 0x9C	; 156
    40f0:	ff 4f       	sbci	r31, 0xFF	; 255
    40f2:	91 83       	std	Z+1, r25	; 0x01
    40f4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40f6:	de 01       	movw	r26, r28
    40f8:	aa 59       	subi	r26, 0x9A	; 154
    40fa:	bf 4f       	sbci	r27, 0xFF	; 255
    40fc:	fe 01       	movw	r30, r28
    40fe:	ea 59       	subi	r30, 0x9A	; 154
    4100:	ff 4f       	sbci	r31, 0xFF	; 255
    4102:	80 81       	ld	r24, Z
    4104:	91 81       	ldd	r25, Z+1	; 0x01
    4106:	01 97       	sbiw	r24, 0x01	; 1
    4108:	11 96       	adiw	r26, 0x01	; 1
    410a:	9c 93       	st	X, r25
    410c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    410e:	fe 01       	movw	r30, r28
    4110:	ea 59       	subi	r30, 0x9A	; 154
    4112:	ff 4f       	sbci	r31, 0xFF	; 255
    4114:	80 81       	ld	r24, Z
    4116:	91 81       	ldd	r25, Z+1	; 0x01
    4118:	00 97       	sbiw	r24, 0x00	; 0
    411a:	d1 f6       	brne	.-76     	; 0x40d0 <analog+0x490>
    411c:	4b c0       	rjmp	.+150    	; 0x41b4 <analog+0x574>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    411e:	8e 01       	movw	r16, r28
    4120:	0a 59       	subi	r16, 0x9A	; 154
    4122:	1f 4f       	sbci	r17, 0xFF	; 255
    4124:	fe 01       	movw	r30, r28
    4126:	e8 59       	subi	r30, 0x98	; 152
    4128:	ff 4f       	sbci	r31, 0xFF	; 255
    412a:	60 81       	ld	r22, Z
    412c:	71 81       	ldd	r23, Z+1	; 0x01
    412e:	82 81       	ldd	r24, Z+2	; 0x02
    4130:	93 81       	ldd	r25, Z+3	; 0x03
    4132:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
    4136:	dc 01       	movw	r26, r24
    4138:	cb 01       	movw	r24, r22
    413a:	f8 01       	movw	r30, r16
    413c:	91 83       	std	Z+1, r25	; 0x01
    413e:	80 83       	st	Z, r24
    4140:	de 01       	movw	r26, r28
    4142:	ae 59       	subi	r26, 0x9E	; 158
    4144:	bf 4f       	sbci	r27, 0xFF	; 255
    4146:	fe 01       	movw	r30, r28
    4148:	ea 59       	subi	r30, 0x9A	; 154
    414a:	ff 4f       	sbci	r31, 0xFF	; 255
    414c:	80 81       	ld	r24, Z
    414e:	91 81       	ldd	r25, Z+1	; 0x01
    4150:	11 96       	adiw	r26, 0x01	; 1
    4152:	9c 93       	st	X, r25
    4154:	8e 93       	st	-X, r24
    4156:	fe 01       	movw	r30, r28
    4158:	ee 59       	subi	r30, 0x9E	; 158
    415a:	ff 4f       	sbci	r31, 0xFF	; 255
    415c:	80 81       	ld	r24, Z
    415e:	91 81       	ldd	r25, Z+1	; 0x01
    4160:	01 97       	sbiw	r24, 0x01	; 1
    4162:	f1 f7       	brne	.-4      	; 0x4160 <analog+0x520>
    4164:	fe 01       	movw	r30, r28
    4166:	ee 59       	subi	r30, 0x9E	; 158
    4168:	ff 4f       	sbci	r31, 0xFF	; 255
    416a:	91 83       	std	Z+1, r25	; 0x01
    416c:	80 83       	st	Z, r24
    416e:	22 c0       	rjmp	.+68     	; 0x41b4 <analog+0x574>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4170:	8e 01       	movw	r16, r28
    4172:	00 59       	subi	r16, 0x90	; 144
    4174:	1f 4f       	sbci	r17, 0xFF	; 255
    4176:	fe 01       	movw	r30, r28
    4178:	ef 58       	subi	r30, 0x8F	; 143
    417a:	ff 4f       	sbci	r31, 0xFF	; 255
    417c:	60 81       	ld	r22, Z
    417e:	71 81       	ldd	r23, Z+1	; 0x01
    4180:	82 81       	ldd	r24, Z+2	; 0x02
    4182:	93 81       	ldd	r25, Z+3	; 0x03
    4184:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
    4188:	dc 01       	movw	r26, r24
    418a:	cb 01       	movw	r24, r22
    418c:	f8 01       	movw	r30, r16
    418e:	80 83       	st	Z, r24
    4190:	de 01       	movw	r26, r28
    4192:	af 59       	subi	r26, 0x9F	; 159
    4194:	bf 4f       	sbci	r27, 0xFF	; 255
    4196:	fe 01       	movw	r30, r28
    4198:	e0 59       	subi	r30, 0x90	; 144
    419a:	ff 4f       	sbci	r31, 0xFF	; 255
    419c:	80 81       	ld	r24, Z
    419e:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    41a0:	fe 01       	movw	r30, r28
    41a2:	ef 59       	subi	r30, 0x9F	; 159
    41a4:	ff 4f       	sbci	r31, 0xFF	; 255
    41a6:	80 81       	ld	r24, Z
    41a8:	8a 95       	dec	r24
    41aa:	f1 f7       	brne	.-4      	; 0x41a8 <analog+0x568>
    41ac:	fe 01       	movw	r30, r28
    41ae:	ef 59       	subi	r30, 0x9F	; 159
    41b0:	ff 4f       	sbci	r31, 0xFF	; 255
    41b2:	80 83       	st	Z, r24
   _delay_us(1);


	
	
	PS2byte=0x43; // sec command
    41b4:	83 e4       	ldi	r24, 0x43	; 67
    41b6:	80 93 67 00 	sts	0x0067, r24
   for(i=0;i<8;i++)
    41ba:	10 92 63 00 	sts	0x0063, r1
    41be:	35 c0       	rjmp	.+106    	; 0x422a <analog+0x5ea>
   {
      if(CHK(PS2byte,i)) SET(PS2PORT,PS2cmd);
    41c0:	80 91 67 00 	lds	r24, 0x0067
    41c4:	28 2f       	mov	r18, r24
    41c6:	30 e0       	ldi	r19, 0x00	; 0
    41c8:	80 91 63 00 	lds	r24, 0x0063
    41cc:	88 2f       	mov	r24, r24
    41ce:	90 e0       	ldi	r25, 0x00	; 0
    41d0:	a9 01       	movw	r20, r18
    41d2:	02 c0       	rjmp	.+4      	; 0x41d8 <analog+0x598>
    41d4:	55 95       	asr	r21
    41d6:	47 95       	ror	r20
    41d8:	8a 95       	dec	r24
    41da:	e2 f7       	brpl	.-8      	; 0x41d4 <analog+0x594>
    41dc:	ca 01       	movw	r24, r20
    41de:	81 70       	andi	r24, 0x01	; 1
    41e0:	90 70       	andi	r25, 0x00	; 0
    41e2:	88 23       	and	r24, r24
    41e4:	41 f0       	breq	.+16     	; 0x41f6 <analog+0x5b6>
    41e6:	a5 e3       	ldi	r26, 0x35	; 53
    41e8:	b0 e0       	ldi	r27, 0x00	; 0
    41ea:	e5 e3       	ldi	r30, 0x35	; 53
    41ec:	f0 e0       	ldi	r31, 0x00	; 0
    41ee:	80 81       	ld	r24, Z
    41f0:	84 60       	ori	r24, 0x04	; 4
    41f2:	8c 93       	st	X, r24
    41f4:	07 c0       	rjmp	.+14     	; 0x4204 <analog+0x5c4>
	  else  CLR(PS2PORT,PS2cmd);
    41f6:	a5 e3       	ldi	r26, 0x35	; 53
    41f8:	b0 e0       	ldi	r27, 0x00	; 0
    41fa:	e5 e3       	ldi	r30, 0x35	; 53
    41fc:	f0 e0       	ldi	r31, 0x00	; 0
    41fe:	80 81       	ld	r24, Z
    4200:	8b 7f       	andi	r24, 0xFB	; 251
    4202:	8c 93       	st	X, r24
      CLR(PS2PORT,PS2clk); 
    4204:	a5 e3       	ldi	r26, 0x35	; 53
    4206:	b0 e0       	ldi	r27, 0x00	; 0
    4208:	e5 e3       	ldi	r30, 0x35	; 53
    420a:	f0 e0       	ldi	r31, 0x00	; 0
    420c:	80 81       	ld	r24, Z
    420e:	8e 7f       	andi	r24, 0xFE	; 254
    4210:	8c 93       	st	X, r24
      SET(PS2PORT,PS2clk); 
    4212:	a5 e3       	ldi	r26, 0x35	; 53
    4214:	b0 e0       	ldi	r27, 0x00	; 0
    4216:	e5 e3       	ldi	r30, 0x35	; 53
    4218:	f0 e0       	ldi	r31, 0x00	; 0
    421a:	80 81       	ld	r24, Z
    421c:	81 60       	ori	r24, 0x01	; 1
    421e:	8c 93       	st	X, r24


	
	
	PS2byte=0x43; // sec command
   for(i=0;i<8;i++)
    4220:	80 91 63 00 	lds	r24, 0x0063
    4224:	8f 5f       	subi	r24, 0xFF	; 255
    4226:	80 93 63 00 	sts	0x0063, r24
    422a:	80 91 63 00 	lds	r24, 0x0063
    422e:	88 30       	cpi	r24, 0x08	; 8
    4230:	38 f2       	brcs	.-114    	; 0x41c0 <analog+0x580>
      if(CHK(PS2byte,i)) SET(PS2PORT,PS2cmd);
	  else  CLR(PS2PORT,PS2cmd);
      CLR(PS2PORT,PS2clk); 
      SET(PS2PORT,PS2clk); 
   }
   SET(PS2PORT,PS2cmd); 
    4232:	a5 e3       	ldi	r26, 0x35	; 53
    4234:	b0 e0       	ldi	r27, 0x00	; 0
    4236:	e5 e3       	ldi	r30, 0x35	; 53
    4238:	f0 e0       	ldi	r31, 0x00	; 0
    423a:	80 81       	ld	r24, Z
    423c:	84 60       	ori	r24, 0x04	; 4
    423e:	8c 93       	st	X, r24
    4240:	fe 01       	movw	r30, r28
    4242:	e3 5a       	subi	r30, 0xA3	; 163
    4244:	ff 4f       	sbci	r31, 0xFF	; 255
    4246:	80 e0       	ldi	r24, 0x00	; 0
    4248:	90 e0       	ldi	r25, 0x00	; 0
    424a:	a0 e8       	ldi	r26, 0x80	; 128
    424c:	bf e3       	ldi	r27, 0x3F	; 63
    424e:	80 83       	st	Z, r24
    4250:	91 83       	std	Z+1, r25	; 0x01
    4252:	a2 83       	std	Z+2, r26	; 0x02
    4254:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4256:	8e 01       	movw	r16, r28
    4258:	07 5a       	subi	r16, 0xA7	; 167
    425a:	1f 4f       	sbci	r17, 0xFF	; 255
    425c:	fe 01       	movw	r30, r28
    425e:	e3 5a       	subi	r30, 0xA3	; 163
    4260:	ff 4f       	sbci	r31, 0xFF	; 255
    4262:	60 81       	ld	r22, Z
    4264:	71 81       	ldd	r23, Z+1	; 0x01
    4266:	82 81       	ldd	r24, Z+2	; 0x02
    4268:	93 81       	ldd	r25, Z+3	; 0x03
    426a:	2b ea       	ldi	r18, 0xAB	; 171
    426c:	3a ea       	ldi	r19, 0xAA	; 170
    426e:	4a ea       	ldi	r20, 0xAA	; 170
    4270:	50 e4       	ldi	r21, 0x40	; 64
    4272:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
    4276:	dc 01       	movw	r26, r24
    4278:	cb 01       	movw	r24, r22
    427a:	f8 01       	movw	r30, r16
    427c:	80 83       	st	Z, r24
    427e:	91 83       	std	Z+1, r25	; 0x01
    4280:	a2 83       	std	Z+2, r26	; 0x02
    4282:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4284:	fe 01       	movw	r30, r28
    4286:	e7 5a       	subi	r30, 0xA7	; 167
    4288:	ff 4f       	sbci	r31, 0xFF	; 255
    428a:	60 81       	ld	r22, Z
    428c:	71 81       	ldd	r23, Z+1	; 0x01
    428e:	82 81       	ldd	r24, Z+2	; 0x02
    4290:	93 81       	ldd	r25, Z+3	; 0x03
    4292:	20 e0       	ldi	r18, 0x00	; 0
    4294:	30 e0       	ldi	r19, 0x00	; 0
    4296:	40 e8       	ldi	r20, 0x80	; 128
    4298:	5f e3       	ldi	r21, 0x3F	; 63
    429a:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__cmpsf2>
    429e:	88 23       	and	r24, r24
    42a0:	34 f4       	brge	.+12     	; 0x42ae <analog+0x66e>
		__ticks = 1;
    42a2:	fe 01       	movw	r30, r28
    42a4:	e8 5a       	subi	r30, 0xA8	; 168
    42a6:	ff 4f       	sbci	r31, 0xFF	; 255
    42a8:	81 e0       	ldi	r24, 0x01	; 1
    42aa:	80 83       	st	Z, r24
    42ac:	e0 c0       	rjmp	.+448    	; 0x446e <analog+0x82e>
	else if (__tmp > 255)
    42ae:	fe 01       	movw	r30, r28
    42b0:	e7 5a       	subi	r30, 0xA7	; 167
    42b2:	ff 4f       	sbci	r31, 0xFF	; 255
    42b4:	60 81       	ld	r22, Z
    42b6:	71 81       	ldd	r23, Z+1	; 0x01
    42b8:	82 81       	ldd	r24, Z+2	; 0x02
    42ba:	93 81       	ldd	r25, Z+3	; 0x03
    42bc:	20 e0       	ldi	r18, 0x00	; 0
    42be:	30 e0       	ldi	r19, 0x00	; 0
    42c0:	4f e7       	ldi	r20, 0x7F	; 127
    42c2:	53 e4       	ldi	r21, 0x43	; 67
    42c4:	0e 94 76 26 	call	0x4cec	; 0x4cec <__gesf2>
    42c8:	18 16       	cp	r1, r24
    42ca:	0c f0       	brlt	.+2      	; 0x42ce <analog+0x68e>
    42cc:	c0 c0       	rjmp	.+384    	; 0x444e <analog+0x80e>
	{
		_delay_ms(__us / 1000.0);
    42ce:	fe 01       	movw	r30, r28
    42d0:	e3 5a       	subi	r30, 0xA3	; 163
    42d2:	ff 4f       	sbci	r31, 0xFF	; 255
    42d4:	60 81       	ld	r22, Z
    42d6:	71 81       	ldd	r23, Z+1	; 0x01
    42d8:	82 81       	ldd	r24, Z+2	; 0x02
    42da:	93 81       	ldd	r25, Z+3	; 0x03
    42dc:	20 e0       	ldi	r18, 0x00	; 0
    42de:	30 e0       	ldi	r19, 0x00	; 0
    42e0:	4a e7       	ldi	r20, 0x7A	; 122
    42e2:	54 e4       	ldi	r21, 0x44	; 68
    42e4:	0e 94 6d 25 	call	0x4ada	; 0x4ada <__divsf3>
    42e8:	dc 01       	movw	r26, r24
    42ea:	cb 01       	movw	r24, r22
    42ec:	fe 01       	movw	r30, r28
    42ee:	ec 5a       	subi	r30, 0xAC	; 172
    42f0:	ff 4f       	sbci	r31, 0xFF	; 255
    42f2:	80 83       	st	Z, r24
    42f4:	91 83       	std	Z+1, r25	; 0x01
    42f6:	a2 83       	std	Z+2, r26	; 0x02
    42f8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42fa:	8e 01       	movw	r16, r28
    42fc:	00 5b       	subi	r16, 0xB0	; 176
    42fe:	1f 4f       	sbci	r17, 0xFF	; 255
    4300:	fe 01       	movw	r30, r28
    4302:	ec 5a       	subi	r30, 0xAC	; 172
    4304:	ff 4f       	sbci	r31, 0xFF	; 255
    4306:	60 81       	ld	r22, Z
    4308:	71 81       	ldd	r23, Z+1	; 0x01
    430a:	82 81       	ldd	r24, Z+2	; 0x02
    430c:	93 81       	ldd	r25, Z+3	; 0x03
    430e:	20 e0       	ldi	r18, 0x00	; 0
    4310:	30 e0       	ldi	r19, 0x00	; 0
    4312:	4a e7       	ldi	r20, 0x7A	; 122
    4314:	55 e4       	ldi	r21, 0x45	; 69
    4316:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
    431a:	dc 01       	movw	r26, r24
    431c:	cb 01       	movw	r24, r22
    431e:	f8 01       	movw	r30, r16
    4320:	80 83       	st	Z, r24
    4322:	91 83       	std	Z+1, r25	; 0x01
    4324:	a2 83       	std	Z+2, r26	; 0x02
    4326:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4328:	fe 01       	movw	r30, r28
    432a:	e0 5b       	subi	r30, 0xB0	; 176
    432c:	ff 4f       	sbci	r31, 0xFF	; 255
    432e:	60 81       	ld	r22, Z
    4330:	71 81       	ldd	r23, Z+1	; 0x01
    4332:	82 81       	ldd	r24, Z+2	; 0x02
    4334:	93 81       	ldd	r25, Z+3	; 0x03
    4336:	20 e0       	ldi	r18, 0x00	; 0
    4338:	30 e0       	ldi	r19, 0x00	; 0
    433a:	40 e8       	ldi	r20, 0x80	; 128
    433c:	5f e3       	ldi	r21, 0x3F	; 63
    433e:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__cmpsf2>
    4342:	88 23       	and	r24, r24
    4344:	44 f4       	brge	.+16     	; 0x4356 <analog+0x716>
		__ticks = 1;
    4346:	fe 01       	movw	r30, r28
    4348:	e2 5b       	subi	r30, 0xB2	; 178
    434a:	ff 4f       	sbci	r31, 0xFF	; 255
    434c:	81 e0       	ldi	r24, 0x01	; 1
    434e:	90 e0       	ldi	r25, 0x00	; 0
    4350:	91 83       	std	Z+1, r25	; 0x01
    4352:	80 83       	st	Z, r24
    4354:	64 c0       	rjmp	.+200    	; 0x441e <analog+0x7de>
	else if (__tmp > 65535)
    4356:	fe 01       	movw	r30, r28
    4358:	e0 5b       	subi	r30, 0xB0	; 176
    435a:	ff 4f       	sbci	r31, 0xFF	; 255
    435c:	60 81       	ld	r22, Z
    435e:	71 81       	ldd	r23, Z+1	; 0x01
    4360:	82 81       	ldd	r24, Z+2	; 0x02
    4362:	93 81       	ldd	r25, Z+3	; 0x03
    4364:	20 e0       	ldi	r18, 0x00	; 0
    4366:	3f ef       	ldi	r19, 0xFF	; 255
    4368:	4f e7       	ldi	r20, 0x7F	; 127
    436a:	57 e4       	ldi	r21, 0x47	; 71
    436c:	0e 94 76 26 	call	0x4cec	; 0x4cec <__gesf2>
    4370:	18 16       	cp	r1, r24
    4372:	0c f0       	brlt	.+2      	; 0x4376 <analog+0x736>
    4374:	43 c0       	rjmp	.+134    	; 0x43fc <analog+0x7bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4376:	fe 01       	movw	r30, r28
    4378:	ec 5a       	subi	r30, 0xAC	; 172
    437a:	ff 4f       	sbci	r31, 0xFF	; 255
    437c:	60 81       	ld	r22, Z
    437e:	71 81       	ldd	r23, Z+1	; 0x01
    4380:	82 81       	ldd	r24, Z+2	; 0x02
    4382:	93 81       	ldd	r25, Z+3	; 0x03
    4384:	20 e0       	ldi	r18, 0x00	; 0
    4386:	30 e0       	ldi	r19, 0x00	; 0
    4388:	40 e2       	ldi	r20, 0x20	; 32
    438a:	51 e4       	ldi	r21, 0x41	; 65
    438c:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
    4390:	dc 01       	movw	r26, r24
    4392:	cb 01       	movw	r24, r22
    4394:	8e 01       	movw	r16, r28
    4396:	02 5b       	subi	r16, 0xB2	; 178
    4398:	1f 4f       	sbci	r17, 0xFF	; 255
    439a:	bc 01       	movw	r22, r24
    439c:	cd 01       	movw	r24, r26
    439e:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
    43a2:	dc 01       	movw	r26, r24
    43a4:	cb 01       	movw	r24, r22
    43a6:	f8 01       	movw	r30, r16
    43a8:	91 83       	std	Z+1, r25	; 0x01
    43aa:	80 83       	st	Z, r24
    43ac:	1f c0       	rjmp	.+62     	; 0x43ec <analog+0x7ac>
    43ae:	fe 01       	movw	r30, r28
    43b0:	e4 5b       	subi	r30, 0xB4	; 180
    43b2:	ff 4f       	sbci	r31, 0xFF	; 255
    43b4:	80 e9       	ldi	r24, 0x90	; 144
    43b6:	91 e0       	ldi	r25, 0x01	; 1
    43b8:	91 83       	std	Z+1, r25	; 0x01
    43ba:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    43bc:	fe 01       	movw	r30, r28
    43be:	e4 5b       	subi	r30, 0xB4	; 180
    43c0:	ff 4f       	sbci	r31, 0xFF	; 255
    43c2:	80 81       	ld	r24, Z
    43c4:	91 81       	ldd	r25, Z+1	; 0x01
    43c6:	01 97       	sbiw	r24, 0x01	; 1
    43c8:	f1 f7       	brne	.-4      	; 0x43c6 <analog+0x786>
    43ca:	fe 01       	movw	r30, r28
    43cc:	e4 5b       	subi	r30, 0xB4	; 180
    43ce:	ff 4f       	sbci	r31, 0xFF	; 255
    43d0:	91 83       	std	Z+1, r25	; 0x01
    43d2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43d4:	de 01       	movw	r26, r28
    43d6:	a2 5b       	subi	r26, 0xB2	; 178
    43d8:	bf 4f       	sbci	r27, 0xFF	; 255
    43da:	fe 01       	movw	r30, r28
    43dc:	e2 5b       	subi	r30, 0xB2	; 178
    43de:	ff 4f       	sbci	r31, 0xFF	; 255
    43e0:	80 81       	ld	r24, Z
    43e2:	91 81       	ldd	r25, Z+1	; 0x01
    43e4:	01 97       	sbiw	r24, 0x01	; 1
    43e6:	11 96       	adiw	r26, 0x01	; 1
    43e8:	9c 93       	st	X, r25
    43ea:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43ec:	fe 01       	movw	r30, r28
    43ee:	e2 5b       	subi	r30, 0xB2	; 178
    43f0:	ff 4f       	sbci	r31, 0xFF	; 255
    43f2:	80 81       	ld	r24, Z
    43f4:	91 81       	ldd	r25, Z+1	; 0x01
    43f6:	00 97       	sbiw	r24, 0x00	; 0
    43f8:	d1 f6       	brne	.-76     	; 0x43ae <analog+0x76e>
    43fa:	4b c0       	rjmp	.+150    	; 0x4492 <analog+0x852>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43fc:	8e 01       	movw	r16, r28
    43fe:	02 5b       	subi	r16, 0xB2	; 178
    4400:	1f 4f       	sbci	r17, 0xFF	; 255
    4402:	fe 01       	movw	r30, r28
    4404:	e0 5b       	subi	r30, 0xB0	; 176
    4406:	ff 4f       	sbci	r31, 0xFF	; 255
    4408:	60 81       	ld	r22, Z
    440a:	71 81       	ldd	r23, Z+1	; 0x01
    440c:	82 81       	ldd	r24, Z+2	; 0x02
    440e:	93 81       	ldd	r25, Z+3	; 0x03
    4410:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
    4414:	dc 01       	movw	r26, r24
    4416:	cb 01       	movw	r24, r22
    4418:	f8 01       	movw	r30, r16
    441a:	91 83       	std	Z+1, r25	; 0x01
    441c:	80 83       	st	Z, r24
    441e:	de 01       	movw	r26, r28
    4420:	a6 5b       	subi	r26, 0xB6	; 182
    4422:	bf 4f       	sbci	r27, 0xFF	; 255
    4424:	fe 01       	movw	r30, r28
    4426:	e2 5b       	subi	r30, 0xB2	; 178
    4428:	ff 4f       	sbci	r31, 0xFF	; 255
    442a:	80 81       	ld	r24, Z
    442c:	91 81       	ldd	r25, Z+1	; 0x01
    442e:	11 96       	adiw	r26, 0x01	; 1
    4430:	9c 93       	st	X, r25
    4432:	8e 93       	st	-X, r24
    4434:	fe 01       	movw	r30, r28
    4436:	e6 5b       	subi	r30, 0xB6	; 182
    4438:	ff 4f       	sbci	r31, 0xFF	; 255
    443a:	80 81       	ld	r24, Z
    443c:	91 81       	ldd	r25, Z+1	; 0x01
    443e:	01 97       	sbiw	r24, 0x01	; 1
    4440:	f1 f7       	brne	.-4      	; 0x443e <analog+0x7fe>
    4442:	fe 01       	movw	r30, r28
    4444:	e6 5b       	subi	r30, 0xB6	; 182
    4446:	ff 4f       	sbci	r31, 0xFF	; 255
    4448:	91 83       	std	Z+1, r25	; 0x01
    444a:	80 83       	st	Z, r24
    444c:	22 c0       	rjmp	.+68     	; 0x4492 <analog+0x852>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    444e:	8e 01       	movw	r16, r28
    4450:	08 5a       	subi	r16, 0xA8	; 168
    4452:	1f 4f       	sbci	r17, 0xFF	; 255
    4454:	fe 01       	movw	r30, r28
    4456:	e7 5a       	subi	r30, 0xA7	; 167
    4458:	ff 4f       	sbci	r31, 0xFF	; 255
    445a:	60 81       	ld	r22, Z
    445c:	71 81       	ldd	r23, Z+1	; 0x01
    445e:	82 81       	ldd	r24, Z+2	; 0x02
    4460:	93 81       	ldd	r25, Z+3	; 0x03
    4462:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
    4466:	dc 01       	movw	r26, r24
    4468:	cb 01       	movw	r24, r22
    446a:	f8 01       	movw	r30, r16
    446c:	80 83       	st	Z, r24
    446e:	de 01       	movw	r26, r28
    4470:	a7 5b       	subi	r26, 0xB7	; 183
    4472:	bf 4f       	sbci	r27, 0xFF	; 255
    4474:	fe 01       	movw	r30, r28
    4476:	e8 5a       	subi	r30, 0xA8	; 168
    4478:	ff 4f       	sbci	r31, 0xFF	; 255
    447a:	80 81       	ld	r24, Z
    447c:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    447e:	fe 01       	movw	r30, r28
    4480:	e7 5b       	subi	r30, 0xB7	; 183
    4482:	ff 4f       	sbci	r31, 0xFF	; 255
    4484:	80 81       	ld	r24, Z
    4486:	8a 95       	dec	r24
    4488:	f1 f7       	brne	.-4      	; 0x4486 <analog+0x846>
    448a:	fe 01       	movw	r30, r28
    448c:	e7 5b       	subi	r30, 0xB7	; 183
    448e:	ff 4f       	sbci	r31, 0xFF	; 255
    4490:	80 83       	st	Z, r24
	
	
	
		
	
	   for(i=0;i<8;i++)  // 3 byte
    4492:	10 92 63 00 	sts	0x0063, r1
    4496:	1a c0       	rjmp	.+52     	; 0x44cc <analog+0x88c>
   {
      CLR(PS2PORT,PS2cmd);
    4498:	a5 e3       	ldi	r26, 0x35	; 53
    449a:	b0 e0       	ldi	r27, 0x00	; 0
    449c:	e5 e3       	ldi	r30, 0x35	; 53
    449e:	f0 e0       	ldi	r31, 0x00	; 0
    44a0:	80 81       	ld	r24, Z
    44a2:	8b 7f       	andi	r24, 0xFB	; 251
    44a4:	8c 93       	st	X, r24
      CLR(PS2PORT,PS2clk);
    44a6:	a5 e3       	ldi	r26, 0x35	; 53
    44a8:	b0 e0       	ldi	r27, 0x00	; 0
    44aa:	e5 e3       	ldi	r30, 0x35	; 53
    44ac:	f0 e0       	ldi	r31, 0x00	; 0
    44ae:	80 81       	ld	r24, Z
    44b0:	8e 7f       	andi	r24, 0xFE	; 254
    44b2:	8c 93       	st	X, r24
      SET(PS2PORT,PS2clk); 
    44b4:	a5 e3       	ldi	r26, 0x35	; 53
    44b6:	b0 e0       	ldi	r27, 0x00	; 0
    44b8:	e5 e3       	ldi	r30, 0x35	; 53
    44ba:	f0 e0       	ldi	r31, 0x00	; 0
    44bc:	80 81       	ld	r24, Z
    44be:	81 60       	ori	r24, 0x01	; 1
    44c0:	8c 93       	st	X, r24
	
	
	
		
	
	   for(i=0;i<8;i++)  // 3 byte
    44c2:	80 91 63 00 	lds	r24, 0x0063
    44c6:	8f 5f       	subi	r24, 0xFF	; 255
    44c8:	80 93 63 00 	sts	0x0063, r24
    44cc:	80 91 63 00 	lds	r24, 0x0063
    44d0:	88 30       	cpi	r24, 0x08	; 8
    44d2:	10 f3       	brcs	.-60     	; 0x4498 <analog+0x858>
   {
      CLR(PS2PORT,PS2cmd);
      CLR(PS2PORT,PS2clk);
      SET(PS2PORT,PS2clk); 
   }
   SET(PS2PORT,PS2cmd);
    44d4:	a5 e3       	ldi	r26, 0x35	; 53
    44d6:	b0 e0       	ldi	r27, 0x00	; 0
    44d8:	e5 e3       	ldi	r30, 0x35	; 53
    44da:	f0 e0       	ldi	r31, 0x00	; 0
    44dc:	80 81       	ld	r24, Z
    44de:	84 60       	ori	r24, 0x04	; 4
    44e0:	8c 93       	st	X, r24
    44e2:	fe 01       	movw	r30, r28
    44e4:	eb 5b       	subi	r30, 0xBB	; 187
    44e6:	ff 4f       	sbci	r31, 0xFF	; 255
    44e8:	80 e0       	ldi	r24, 0x00	; 0
    44ea:	90 e0       	ldi	r25, 0x00	; 0
    44ec:	a0 e8       	ldi	r26, 0x80	; 128
    44ee:	bf e3       	ldi	r27, 0x3F	; 63
    44f0:	80 83       	st	Z, r24
    44f2:	91 83       	std	Z+1, r25	; 0x01
    44f4:	a2 83       	std	Z+2, r26	; 0x02
    44f6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    44f8:	8e 01       	movw	r16, r28
    44fa:	0f 5b       	subi	r16, 0xBF	; 191
    44fc:	1f 4f       	sbci	r17, 0xFF	; 255
    44fe:	fe 01       	movw	r30, r28
    4500:	eb 5b       	subi	r30, 0xBB	; 187
    4502:	ff 4f       	sbci	r31, 0xFF	; 255
    4504:	60 81       	ld	r22, Z
    4506:	71 81       	ldd	r23, Z+1	; 0x01
    4508:	82 81       	ldd	r24, Z+2	; 0x02
    450a:	93 81       	ldd	r25, Z+3	; 0x03
    450c:	2b ea       	ldi	r18, 0xAB	; 171
    450e:	3a ea       	ldi	r19, 0xAA	; 170
    4510:	4a ea       	ldi	r20, 0xAA	; 170
    4512:	50 e4       	ldi	r21, 0x40	; 64
    4514:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
    4518:	dc 01       	movw	r26, r24
    451a:	cb 01       	movw	r24, r22
    451c:	f8 01       	movw	r30, r16
    451e:	80 83       	st	Z, r24
    4520:	91 83       	std	Z+1, r25	; 0x01
    4522:	a2 83       	std	Z+2, r26	; 0x02
    4524:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4526:	fe 01       	movw	r30, r28
    4528:	ef 5b       	subi	r30, 0xBF	; 191
    452a:	ff 4f       	sbci	r31, 0xFF	; 255
    452c:	60 81       	ld	r22, Z
    452e:	71 81       	ldd	r23, Z+1	; 0x01
    4530:	82 81       	ldd	r24, Z+2	; 0x02
    4532:	93 81       	ldd	r25, Z+3	; 0x03
    4534:	20 e0       	ldi	r18, 0x00	; 0
    4536:	30 e0       	ldi	r19, 0x00	; 0
    4538:	40 e8       	ldi	r20, 0x80	; 128
    453a:	5f e3       	ldi	r21, 0x3F	; 63
    453c:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__cmpsf2>
    4540:	88 23       	and	r24, r24
    4542:	34 f4       	brge	.+12     	; 0x4550 <analog+0x910>
		__ticks = 1;
    4544:	81 e0       	ldi	r24, 0x01	; 1
    4546:	fe 01       	movw	r30, r28
    4548:	e0 5c       	subi	r30, 0xC0	; 192
    454a:	ff 4f       	sbci	r31, 0xFF	; 255
    454c:	80 83       	st	Z, r24
    454e:	9d c0       	rjmp	.+314    	; 0x468a <analog+0xa4a>
	else if (__tmp > 255)
    4550:	fe 01       	movw	r30, r28
    4552:	ef 5b       	subi	r30, 0xBF	; 191
    4554:	ff 4f       	sbci	r31, 0xFF	; 255
    4556:	60 81       	ld	r22, Z
    4558:	71 81       	ldd	r23, Z+1	; 0x01
    455a:	82 81       	ldd	r24, Z+2	; 0x02
    455c:	93 81       	ldd	r25, Z+3	; 0x03
    455e:	20 e0       	ldi	r18, 0x00	; 0
    4560:	30 e0       	ldi	r19, 0x00	; 0
    4562:	4f e7       	ldi	r20, 0x7F	; 127
    4564:	53 e4       	ldi	r21, 0x43	; 67
    4566:	0e 94 76 26 	call	0x4cec	; 0x4cec <__gesf2>
    456a:	18 16       	cp	r1, r24
    456c:	0c f0       	brlt	.+2      	; 0x4570 <analog+0x930>
    456e:	7e c0       	rjmp	.+252    	; 0x466c <analog+0xa2c>
	{
		_delay_ms(__us / 1000.0);
    4570:	fe 01       	movw	r30, r28
    4572:	eb 5b       	subi	r30, 0xBB	; 187
    4574:	ff 4f       	sbci	r31, 0xFF	; 255
    4576:	60 81       	ld	r22, Z
    4578:	71 81       	ldd	r23, Z+1	; 0x01
    457a:	82 81       	ldd	r24, Z+2	; 0x02
    457c:	93 81       	ldd	r25, Z+3	; 0x03
    457e:	20 e0       	ldi	r18, 0x00	; 0
    4580:	30 e0       	ldi	r19, 0x00	; 0
    4582:	4a e7       	ldi	r20, 0x7A	; 122
    4584:	54 e4       	ldi	r21, 0x44	; 68
    4586:	0e 94 6d 25 	call	0x4ada	; 0x4ada <__divsf3>
    458a:	dc 01       	movw	r26, r24
    458c:	cb 01       	movw	r24, r22
    458e:	8c af       	std	Y+60, r24	; 0x3c
    4590:	9d af       	std	Y+61, r25	; 0x3d
    4592:	ae af       	std	Y+62, r26	; 0x3e
    4594:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4596:	6c ad       	ldd	r22, Y+60	; 0x3c
    4598:	7d ad       	ldd	r23, Y+61	; 0x3d
    459a:	8e ad       	ldd	r24, Y+62	; 0x3e
    459c:	9f ad       	ldd	r25, Y+63	; 0x3f
    459e:	20 e0       	ldi	r18, 0x00	; 0
    45a0:	30 e0       	ldi	r19, 0x00	; 0
    45a2:	4a e7       	ldi	r20, 0x7A	; 122
    45a4:	55 e4       	ldi	r21, 0x45	; 69
    45a6:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
    45aa:	dc 01       	movw	r26, r24
    45ac:	cb 01       	movw	r24, r22
    45ae:	88 af       	std	Y+56, r24	; 0x38
    45b0:	99 af       	std	Y+57, r25	; 0x39
    45b2:	aa af       	std	Y+58, r26	; 0x3a
    45b4:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    45b6:	68 ad       	ldd	r22, Y+56	; 0x38
    45b8:	79 ad       	ldd	r23, Y+57	; 0x39
    45ba:	8a ad       	ldd	r24, Y+58	; 0x3a
    45bc:	9b ad       	ldd	r25, Y+59	; 0x3b
    45be:	20 e0       	ldi	r18, 0x00	; 0
    45c0:	30 e0       	ldi	r19, 0x00	; 0
    45c2:	40 e8       	ldi	r20, 0x80	; 128
    45c4:	5f e3       	ldi	r21, 0x3F	; 63
    45c6:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__cmpsf2>
    45ca:	88 23       	and	r24, r24
    45cc:	2c f4       	brge	.+10     	; 0x45d8 <analog+0x998>
		__ticks = 1;
    45ce:	81 e0       	ldi	r24, 0x01	; 1
    45d0:	90 e0       	ldi	r25, 0x00	; 0
    45d2:	9f ab       	std	Y+55, r25	; 0x37
    45d4:	8e ab       	std	Y+54, r24	; 0x36
    45d6:	3f c0       	rjmp	.+126    	; 0x4656 <analog+0xa16>
	else if (__tmp > 65535)
    45d8:	68 ad       	ldd	r22, Y+56	; 0x38
    45da:	79 ad       	ldd	r23, Y+57	; 0x39
    45dc:	8a ad       	ldd	r24, Y+58	; 0x3a
    45de:	9b ad       	ldd	r25, Y+59	; 0x3b
    45e0:	20 e0       	ldi	r18, 0x00	; 0
    45e2:	3f ef       	ldi	r19, 0xFF	; 255
    45e4:	4f e7       	ldi	r20, 0x7F	; 127
    45e6:	57 e4       	ldi	r21, 0x47	; 71
    45e8:	0e 94 76 26 	call	0x4cec	; 0x4cec <__gesf2>
    45ec:	18 16       	cp	r1, r24
    45ee:	4c f5       	brge	.+82     	; 0x4642 <analog+0xa02>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45f0:	6c ad       	ldd	r22, Y+60	; 0x3c
    45f2:	7d ad       	ldd	r23, Y+61	; 0x3d
    45f4:	8e ad       	ldd	r24, Y+62	; 0x3e
    45f6:	9f ad       	ldd	r25, Y+63	; 0x3f
    45f8:	20 e0       	ldi	r18, 0x00	; 0
    45fa:	30 e0       	ldi	r19, 0x00	; 0
    45fc:	40 e2       	ldi	r20, 0x20	; 32
    45fe:	51 e4       	ldi	r21, 0x41	; 65
    4600:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
    4604:	dc 01       	movw	r26, r24
    4606:	cb 01       	movw	r24, r22
    4608:	bc 01       	movw	r22, r24
    460a:	cd 01       	movw	r24, r26
    460c:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
    4610:	dc 01       	movw	r26, r24
    4612:	cb 01       	movw	r24, r22
    4614:	9f ab       	std	Y+55, r25	; 0x37
    4616:	8e ab       	std	Y+54, r24	; 0x36
    4618:	0f c0       	rjmp	.+30     	; 0x4638 <analog+0x9f8>
    461a:	80 e9       	ldi	r24, 0x90	; 144
    461c:	91 e0       	ldi	r25, 0x01	; 1
    461e:	9d ab       	std	Y+53, r25	; 0x35
    4620:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4622:	8c a9       	ldd	r24, Y+52	; 0x34
    4624:	9d a9       	ldd	r25, Y+53	; 0x35
    4626:	01 97       	sbiw	r24, 0x01	; 1
    4628:	f1 f7       	brne	.-4      	; 0x4626 <analog+0x9e6>
    462a:	9d ab       	std	Y+53, r25	; 0x35
    462c:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    462e:	8e a9       	ldd	r24, Y+54	; 0x36
    4630:	9f a9       	ldd	r25, Y+55	; 0x37
    4632:	01 97       	sbiw	r24, 0x01	; 1
    4634:	9f ab       	std	Y+55, r25	; 0x37
    4636:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4638:	8e a9       	ldd	r24, Y+54	; 0x36
    463a:	9f a9       	ldd	r25, Y+55	; 0x37
    463c:	00 97       	sbiw	r24, 0x00	; 0
    463e:	69 f7       	brne	.-38     	; 0x461a <analog+0x9da>
    4640:	2d c0       	rjmp	.+90     	; 0x469c <analog+0xa5c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4642:	68 ad       	ldd	r22, Y+56	; 0x38
    4644:	79 ad       	ldd	r23, Y+57	; 0x39
    4646:	8a ad       	ldd	r24, Y+58	; 0x3a
    4648:	9b ad       	ldd	r25, Y+59	; 0x3b
    464a:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
    464e:	dc 01       	movw	r26, r24
    4650:	cb 01       	movw	r24, r22
    4652:	9f ab       	std	Y+55, r25	; 0x37
    4654:	8e ab       	std	Y+54, r24	; 0x36
    4656:	8e a9       	ldd	r24, Y+54	; 0x36
    4658:	9f a9       	ldd	r25, Y+55	; 0x37
    465a:	9b ab       	std	Y+51, r25	; 0x33
    465c:	8a ab       	std	Y+50, r24	; 0x32
    465e:	8a a9       	ldd	r24, Y+50	; 0x32
    4660:	9b a9       	ldd	r25, Y+51	; 0x33
    4662:	01 97       	sbiw	r24, 0x01	; 1
    4664:	f1 f7       	brne	.-4      	; 0x4662 <analog+0xa22>
    4666:	9b ab       	std	Y+51, r25	; 0x33
    4668:	8a ab       	std	Y+50, r24	; 0x32
    466a:	18 c0       	rjmp	.+48     	; 0x469c <analog+0xa5c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    466c:	fe 01       	movw	r30, r28
    466e:	ef 5b       	subi	r30, 0xBF	; 191
    4670:	ff 4f       	sbci	r31, 0xFF	; 255
    4672:	60 81       	ld	r22, Z
    4674:	71 81       	ldd	r23, Z+1	; 0x01
    4676:	82 81       	ldd	r24, Z+2	; 0x02
    4678:	93 81       	ldd	r25, Z+3	; 0x03
    467a:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
    467e:	dc 01       	movw	r26, r24
    4680:	cb 01       	movw	r24, r22
    4682:	fe 01       	movw	r30, r28
    4684:	e0 5c       	subi	r30, 0xC0	; 192
    4686:	ff 4f       	sbci	r31, 0xFF	; 255
    4688:	80 83       	st	Z, r24
    468a:	fe 01       	movw	r30, r28
    468c:	e0 5c       	subi	r30, 0xC0	; 192
    468e:	ff 4f       	sbci	r31, 0xFF	; 255
    4690:	80 81       	ld	r24, Z
    4692:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4694:	89 a9       	ldd	r24, Y+49	; 0x31
    4696:	8a 95       	dec	r24
    4698:	f1 f7       	brne	.-4      	; 0x4696 <analog+0xa56>
    469a:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(1);
	
	PS2byte=0x01;		//byte1
    469c:	81 e0       	ldi	r24, 0x01	; 1
    469e:	80 93 67 00 	sts	0x0067, r24
	
	for(i=0;i<8;i++)
    46a2:	10 92 63 00 	sts	0x0063, r1
    46a6:	35 c0       	rjmp	.+106    	; 0x4712 <analog+0xad2>
   {
      if(CHK(PS2byte,i)) SET(PS2PORT,PS2cmd);
    46a8:	80 91 67 00 	lds	r24, 0x0067
    46ac:	28 2f       	mov	r18, r24
    46ae:	30 e0       	ldi	r19, 0x00	; 0
    46b0:	80 91 63 00 	lds	r24, 0x0063
    46b4:	88 2f       	mov	r24, r24
    46b6:	90 e0       	ldi	r25, 0x00	; 0
    46b8:	a9 01       	movw	r20, r18
    46ba:	02 c0       	rjmp	.+4      	; 0x46c0 <analog+0xa80>
    46bc:	55 95       	asr	r21
    46be:	47 95       	ror	r20
    46c0:	8a 95       	dec	r24
    46c2:	e2 f7       	brpl	.-8      	; 0x46bc <analog+0xa7c>
    46c4:	ca 01       	movw	r24, r20
    46c6:	81 70       	andi	r24, 0x01	; 1
    46c8:	90 70       	andi	r25, 0x00	; 0
    46ca:	88 23       	and	r24, r24
    46cc:	41 f0       	breq	.+16     	; 0x46de <analog+0xa9e>
    46ce:	a5 e3       	ldi	r26, 0x35	; 53
    46d0:	b0 e0       	ldi	r27, 0x00	; 0
    46d2:	e5 e3       	ldi	r30, 0x35	; 53
    46d4:	f0 e0       	ldi	r31, 0x00	; 0
    46d6:	80 81       	ld	r24, Z
    46d8:	84 60       	ori	r24, 0x04	; 4
    46da:	8c 93       	st	X, r24
    46dc:	07 c0       	rjmp	.+14     	; 0x46ec <analog+0xaac>
	  else  CLR(PS2PORT,PS2cmd);
    46de:	a5 e3       	ldi	r26, 0x35	; 53
    46e0:	b0 e0       	ldi	r27, 0x00	; 0
    46e2:	e5 e3       	ldi	r30, 0x35	; 53
    46e4:	f0 e0       	ldi	r31, 0x00	; 0
    46e6:	80 81       	ld	r24, Z
    46e8:	8b 7f       	andi	r24, 0xFB	; 251
    46ea:	8c 93       	st	X, r24
      CLR(PS2PORT,PS2clk); 
    46ec:	a5 e3       	ldi	r26, 0x35	; 53
    46ee:	b0 e0       	ldi	r27, 0x00	; 0
    46f0:	e5 e3       	ldi	r30, 0x35	; 53
    46f2:	f0 e0       	ldi	r31, 0x00	; 0
    46f4:	80 81       	ld	r24, Z
    46f6:	8e 7f       	andi	r24, 0xFE	; 254
    46f8:	8c 93       	st	X, r24
      SET(PS2PORT,PS2clk); 
    46fa:	a5 e3       	ldi	r26, 0x35	; 53
    46fc:	b0 e0       	ldi	r27, 0x00	; 0
    46fe:	e5 e3       	ldi	r30, 0x35	; 53
    4700:	f0 e0       	ldi	r31, 0x00	; 0
    4702:	80 81       	ld	r24, Z
    4704:	81 60       	ori	r24, 0x01	; 1
    4706:	8c 93       	st	X, r24
   SET(PS2PORT,PS2cmd);
	_delay_us(1);
	
	PS2byte=0x01;		//byte1
	
	for(i=0;i<8;i++)
    4708:	80 91 63 00 	lds	r24, 0x0063
    470c:	8f 5f       	subi	r24, 0xFF	; 255
    470e:	80 93 63 00 	sts	0x0063, r24
    4712:	80 91 63 00 	lds	r24, 0x0063
    4716:	88 30       	cpi	r24, 0x08	; 8
    4718:	38 f2       	brcs	.-114    	; 0x46a8 <analog+0xa68>
      if(CHK(PS2byte,i)) SET(PS2PORT,PS2cmd);
	  else  CLR(PS2PORT,PS2cmd);
      CLR(PS2PORT,PS2clk); 
      SET(PS2PORT,PS2clk); 
   }
   SET(PS2PORT,PS2cmd); 
    471a:	a5 e3       	ldi	r26, 0x35	; 53
    471c:	b0 e0       	ldi	r27, 0x00	; 0
    471e:	e5 e3       	ldi	r30, 0x35	; 53
    4720:	f0 e0       	ldi	r31, 0x00	; 0
    4722:	80 81       	ld	r24, Z
    4724:	84 60       	ori	r24, 0x04	; 4
    4726:	8c 93       	st	X, r24
    4728:	80 e0       	ldi	r24, 0x00	; 0
    472a:	90 e0       	ldi	r25, 0x00	; 0
    472c:	a0 e8       	ldi	r26, 0x80	; 128
    472e:	bf e3       	ldi	r27, 0x3F	; 63
    4730:	8d a7       	std	Y+45, r24	; 0x2d
    4732:	9e a7       	std	Y+46, r25	; 0x2e
    4734:	af a7       	std	Y+47, r26	; 0x2f
    4736:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4738:	6d a5       	ldd	r22, Y+45	; 0x2d
    473a:	7e a5       	ldd	r23, Y+46	; 0x2e
    473c:	8f a5       	ldd	r24, Y+47	; 0x2f
    473e:	98 a9       	ldd	r25, Y+48	; 0x30
    4740:	2b ea       	ldi	r18, 0xAB	; 171
    4742:	3a ea       	ldi	r19, 0xAA	; 170
    4744:	4a ea       	ldi	r20, 0xAA	; 170
    4746:	50 e4       	ldi	r21, 0x40	; 64
    4748:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
    474c:	dc 01       	movw	r26, r24
    474e:	cb 01       	movw	r24, r22
    4750:	89 a7       	std	Y+41, r24	; 0x29
    4752:	9a a7       	std	Y+42, r25	; 0x2a
    4754:	ab a7       	std	Y+43, r26	; 0x2b
    4756:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    4758:	69 a5       	ldd	r22, Y+41	; 0x29
    475a:	7a a5       	ldd	r23, Y+42	; 0x2a
    475c:	8b a5       	ldd	r24, Y+43	; 0x2b
    475e:	9c a5       	ldd	r25, Y+44	; 0x2c
    4760:	20 e0       	ldi	r18, 0x00	; 0
    4762:	30 e0       	ldi	r19, 0x00	; 0
    4764:	40 e8       	ldi	r20, 0x80	; 128
    4766:	5f e3       	ldi	r21, 0x3F	; 63
    4768:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__cmpsf2>
    476c:	88 23       	and	r24, r24
    476e:	1c f4       	brge	.+6      	; 0x4776 <analog+0xb36>
		__ticks = 1;
    4770:	81 e0       	ldi	r24, 0x01	; 1
    4772:	88 a7       	std	Y+40, r24	; 0x28
    4774:	91 c0       	rjmp	.+290    	; 0x4898 <analog+0xc58>
	else if (__tmp > 255)
    4776:	69 a5       	ldd	r22, Y+41	; 0x29
    4778:	7a a5       	ldd	r23, Y+42	; 0x2a
    477a:	8b a5       	ldd	r24, Y+43	; 0x2b
    477c:	9c a5       	ldd	r25, Y+44	; 0x2c
    477e:	20 e0       	ldi	r18, 0x00	; 0
    4780:	30 e0       	ldi	r19, 0x00	; 0
    4782:	4f e7       	ldi	r20, 0x7F	; 127
    4784:	53 e4       	ldi	r21, 0x43	; 67
    4786:	0e 94 76 26 	call	0x4cec	; 0x4cec <__gesf2>
    478a:	18 16       	cp	r1, r24
    478c:	0c f0       	brlt	.+2      	; 0x4790 <analog+0xb50>
    478e:	7b c0       	rjmp	.+246    	; 0x4886 <analog+0xc46>
	{
		_delay_ms(__us / 1000.0);
    4790:	6d a5       	ldd	r22, Y+45	; 0x2d
    4792:	7e a5       	ldd	r23, Y+46	; 0x2e
    4794:	8f a5       	ldd	r24, Y+47	; 0x2f
    4796:	98 a9       	ldd	r25, Y+48	; 0x30
    4798:	20 e0       	ldi	r18, 0x00	; 0
    479a:	30 e0       	ldi	r19, 0x00	; 0
    479c:	4a e7       	ldi	r20, 0x7A	; 122
    479e:	54 e4       	ldi	r21, 0x44	; 68
    47a0:	0e 94 6d 25 	call	0x4ada	; 0x4ada <__divsf3>
    47a4:	dc 01       	movw	r26, r24
    47a6:	cb 01       	movw	r24, r22
    47a8:	8c a3       	std	Y+36, r24	; 0x24
    47aa:	9d a3       	std	Y+37, r25	; 0x25
    47ac:	ae a3       	std	Y+38, r26	; 0x26
    47ae:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47b0:	6c a1       	ldd	r22, Y+36	; 0x24
    47b2:	7d a1       	ldd	r23, Y+37	; 0x25
    47b4:	8e a1       	ldd	r24, Y+38	; 0x26
    47b6:	9f a1       	ldd	r25, Y+39	; 0x27
    47b8:	20 e0       	ldi	r18, 0x00	; 0
    47ba:	30 e0       	ldi	r19, 0x00	; 0
    47bc:	4a e7       	ldi	r20, 0x7A	; 122
    47be:	55 e4       	ldi	r21, 0x45	; 69
    47c0:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
    47c4:	dc 01       	movw	r26, r24
    47c6:	cb 01       	movw	r24, r22
    47c8:	88 a3       	std	Y+32, r24	; 0x20
    47ca:	99 a3       	std	Y+33, r25	; 0x21
    47cc:	aa a3       	std	Y+34, r26	; 0x22
    47ce:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    47d0:	68 a1       	ldd	r22, Y+32	; 0x20
    47d2:	79 a1       	ldd	r23, Y+33	; 0x21
    47d4:	8a a1       	ldd	r24, Y+34	; 0x22
    47d6:	9b a1       	ldd	r25, Y+35	; 0x23
    47d8:	20 e0       	ldi	r18, 0x00	; 0
    47da:	30 e0       	ldi	r19, 0x00	; 0
    47dc:	40 e8       	ldi	r20, 0x80	; 128
    47de:	5f e3       	ldi	r21, 0x3F	; 63
    47e0:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__cmpsf2>
    47e4:	88 23       	and	r24, r24
    47e6:	2c f4       	brge	.+10     	; 0x47f2 <analog+0xbb2>
		__ticks = 1;
    47e8:	81 e0       	ldi	r24, 0x01	; 1
    47ea:	90 e0       	ldi	r25, 0x00	; 0
    47ec:	9f 8f       	std	Y+31, r25	; 0x1f
    47ee:	8e 8f       	std	Y+30, r24	; 0x1e
    47f0:	3f c0       	rjmp	.+126    	; 0x4870 <analog+0xc30>
	else if (__tmp > 65535)
    47f2:	68 a1       	ldd	r22, Y+32	; 0x20
    47f4:	79 a1       	ldd	r23, Y+33	; 0x21
    47f6:	8a a1       	ldd	r24, Y+34	; 0x22
    47f8:	9b a1       	ldd	r25, Y+35	; 0x23
    47fa:	20 e0       	ldi	r18, 0x00	; 0
    47fc:	3f ef       	ldi	r19, 0xFF	; 255
    47fe:	4f e7       	ldi	r20, 0x7F	; 127
    4800:	57 e4       	ldi	r21, 0x47	; 71
    4802:	0e 94 76 26 	call	0x4cec	; 0x4cec <__gesf2>
    4806:	18 16       	cp	r1, r24
    4808:	4c f5       	brge	.+82     	; 0x485c <analog+0xc1c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    480a:	6c a1       	ldd	r22, Y+36	; 0x24
    480c:	7d a1       	ldd	r23, Y+37	; 0x25
    480e:	8e a1       	ldd	r24, Y+38	; 0x26
    4810:	9f a1       	ldd	r25, Y+39	; 0x27
    4812:	20 e0       	ldi	r18, 0x00	; 0
    4814:	30 e0       	ldi	r19, 0x00	; 0
    4816:	40 e2       	ldi	r20, 0x20	; 32
    4818:	51 e4       	ldi	r21, 0x41	; 65
    481a:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
    481e:	dc 01       	movw	r26, r24
    4820:	cb 01       	movw	r24, r22
    4822:	bc 01       	movw	r22, r24
    4824:	cd 01       	movw	r24, r26
    4826:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
    482a:	dc 01       	movw	r26, r24
    482c:	cb 01       	movw	r24, r22
    482e:	9f 8f       	std	Y+31, r25	; 0x1f
    4830:	8e 8f       	std	Y+30, r24	; 0x1e
    4832:	0f c0       	rjmp	.+30     	; 0x4852 <analog+0xc12>
    4834:	80 e9       	ldi	r24, 0x90	; 144
    4836:	91 e0       	ldi	r25, 0x01	; 1
    4838:	9d 8f       	std	Y+29, r25	; 0x1d
    483a:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    483c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    483e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4840:	01 97       	sbiw	r24, 0x01	; 1
    4842:	f1 f7       	brne	.-4      	; 0x4840 <analog+0xc00>
    4844:	9d 8f       	std	Y+29, r25	; 0x1d
    4846:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4848:	8e 8d       	ldd	r24, Y+30	; 0x1e
    484a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    484c:	01 97       	sbiw	r24, 0x01	; 1
    484e:	9f 8f       	std	Y+31, r25	; 0x1f
    4850:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4852:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4854:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4856:	00 97       	sbiw	r24, 0x00	; 0
    4858:	69 f7       	brne	.-38     	; 0x4834 <analog+0xbf4>
    485a:	24 c0       	rjmp	.+72     	; 0x48a4 <analog+0xc64>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    485c:	68 a1       	ldd	r22, Y+32	; 0x20
    485e:	79 a1       	ldd	r23, Y+33	; 0x21
    4860:	8a a1       	ldd	r24, Y+34	; 0x22
    4862:	9b a1       	ldd	r25, Y+35	; 0x23
    4864:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
    4868:	dc 01       	movw	r26, r24
    486a:	cb 01       	movw	r24, r22
    486c:	9f 8f       	std	Y+31, r25	; 0x1f
    486e:	8e 8f       	std	Y+30, r24	; 0x1e
    4870:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4872:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4874:	9b 8f       	std	Y+27, r25	; 0x1b
    4876:	8a 8f       	std	Y+26, r24	; 0x1a
    4878:	8a 8d       	ldd	r24, Y+26	; 0x1a
    487a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    487c:	01 97       	sbiw	r24, 0x01	; 1
    487e:	f1 f7       	brne	.-4      	; 0x487c <analog+0xc3c>
    4880:	9b 8f       	std	Y+27, r25	; 0x1b
    4882:	8a 8f       	std	Y+26, r24	; 0x1a
    4884:	0f c0       	rjmp	.+30     	; 0x48a4 <analog+0xc64>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4886:	69 a5       	ldd	r22, Y+41	; 0x29
    4888:	7a a5       	ldd	r23, Y+42	; 0x2a
    488a:	8b a5       	ldd	r24, Y+43	; 0x2b
    488c:	9c a5       	ldd	r25, Y+44	; 0x2c
    488e:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
    4892:	dc 01       	movw	r26, r24
    4894:	cb 01       	movw	r24, r22
    4896:	88 a7       	std	Y+40, r24	; 0x28
    4898:	88 a5       	ldd	r24, Y+40	; 0x28
    489a:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    489c:	89 8d       	ldd	r24, Y+25	; 0x19
    489e:	8a 95       	dec	r24
    48a0:	f1 f7       	brne	.-4      	; 0x489e <analog+0xc5e>
    48a2:	89 8f       	std	Y+25, r24	; 0x19
   _delay_us(1);
	
	
   
	PS2byte = 0x03;			//byte4
    48a4:	83 e0       	ldi	r24, 0x03	; 3
    48a6:	80 93 67 00 	sts	0x0067, r24
	for(i=0;i<8;i++)
    48aa:	10 92 63 00 	sts	0x0063, r1
    48ae:	35 c0       	rjmp	.+106    	; 0x491a <analog+0xcda>
   {
      if(CHK(PS2byte,i)) SET(PS2PORT,PS2cmd);
    48b0:	80 91 67 00 	lds	r24, 0x0067
    48b4:	28 2f       	mov	r18, r24
    48b6:	30 e0       	ldi	r19, 0x00	; 0
    48b8:	80 91 63 00 	lds	r24, 0x0063
    48bc:	88 2f       	mov	r24, r24
    48be:	90 e0       	ldi	r25, 0x00	; 0
    48c0:	f9 01       	movw	r30, r18
    48c2:	02 c0       	rjmp	.+4      	; 0x48c8 <analog+0xc88>
    48c4:	f5 95       	asr	r31
    48c6:	e7 95       	ror	r30
    48c8:	8a 95       	dec	r24
    48ca:	e2 f7       	brpl	.-8      	; 0x48c4 <analog+0xc84>
    48cc:	cf 01       	movw	r24, r30
    48ce:	81 70       	andi	r24, 0x01	; 1
    48d0:	90 70       	andi	r25, 0x00	; 0
    48d2:	88 23       	and	r24, r24
    48d4:	41 f0       	breq	.+16     	; 0x48e6 <analog+0xca6>
    48d6:	a5 e3       	ldi	r26, 0x35	; 53
    48d8:	b0 e0       	ldi	r27, 0x00	; 0
    48da:	e5 e3       	ldi	r30, 0x35	; 53
    48dc:	f0 e0       	ldi	r31, 0x00	; 0
    48de:	80 81       	ld	r24, Z
    48e0:	84 60       	ori	r24, 0x04	; 4
    48e2:	8c 93       	st	X, r24
    48e4:	07 c0       	rjmp	.+14     	; 0x48f4 <analog+0xcb4>
	  else  CLR(PS2PORT,PS2cmd);
    48e6:	a5 e3       	ldi	r26, 0x35	; 53
    48e8:	b0 e0       	ldi	r27, 0x00	; 0
    48ea:	e5 e3       	ldi	r30, 0x35	; 53
    48ec:	f0 e0       	ldi	r31, 0x00	; 0
    48ee:	80 81       	ld	r24, Z
    48f0:	8b 7f       	andi	r24, 0xFB	; 251
    48f2:	8c 93       	st	X, r24
      CLR(PS2PORT,PS2clk); 
    48f4:	a5 e3       	ldi	r26, 0x35	; 53
    48f6:	b0 e0       	ldi	r27, 0x00	; 0
    48f8:	e5 e3       	ldi	r30, 0x35	; 53
    48fa:	f0 e0       	ldi	r31, 0x00	; 0
    48fc:	80 81       	ld	r24, Z
    48fe:	8e 7f       	andi	r24, 0xFE	; 254
    4900:	8c 93       	st	X, r24
      SET(PS2PORT,PS2clk); 
    4902:	a5 e3       	ldi	r26, 0x35	; 53
    4904:	b0 e0       	ldi	r27, 0x00	; 0
    4906:	e5 e3       	ldi	r30, 0x35	; 53
    4908:	f0 e0       	ldi	r31, 0x00	; 0
    490a:	80 81       	ld	r24, Z
    490c:	81 60       	ori	r24, 0x01	; 1
    490e:	8c 93       	st	X, r24
   _delay_us(1);
	
	
   
	PS2byte = 0x03;			//byte4
	for(i=0;i<8;i++)
    4910:	80 91 63 00 	lds	r24, 0x0063
    4914:	8f 5f       	subi	r24, 0xFF	; 255
    4916:	80 93 63 00 	sts	0x0063, r24
    491a:	80 91 63 00 	lds	r24, 0x0063
    491e:	88 30       	cpi	r24, 0x08	; 8
    4920:	38 f2       	brcs	.-114    	; 0x48b0 <analog+0xc70>
      if(CHK(PS2byte,i)) SET(PS2PORT,PS2cmd);
	  else  CLR(PS2PORT,PS2cmd);
      CLR(PS2PORT,PS2clk); 
      SET(PS2PORT,PS2clk); 
   }
   SET(PS2PORT,PS2cmd); 
    4922:	a5 e3       	ldi	r26, 0x35	; 53
    4924:	b0 e0       	ldi	r27, 0x00	; 0
    4926:	e5 e3       	ldi	r30, 0x35	; 53
    4928:	f0 e0       	ldi	r31, 0x00	; 0
    492a:	80 81       	ld	r24, Z
    492c:	84 60       	ori	r24, 0x04	; 4
    492e:	8c 93       	st	X, r24
    4930:	80 e0       	ldi	r24, 0x00	; 0
    4932:	90 e0       	ldi	r25, 0x00	; 0
    4934:	a0 e8       	ldi	r26, 0x80	; 128
    4936:	bf e3       	ldi	r27, 0x3F	; 63
    4938:	8d 8b       	std	Y+21, r24	; 0x15
    493a:	9e 8b       	std	Y+22, r25	; 0x16
    493c:	af 8b       	std	Y+23, r26	; 0x17
    493e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4940:	6d 89       	ldd	r22, Y+21	; 0x15
    4942:	7e 89       	ldd	r23, Y+22	; 0x16
    4944:	8f 89       	ldd	r24, Y+23	; 0x17
    4946:	98 8d       	ldd	r25, Y+24	; 0x18
    4948:	2b ea       	ldi	r18, 0xAB	; 171
    494a:	3a ea       	ldi	r19, 0xAA	; 170
    494c:	4a ea       	ldi	r20, 0xAA	; 170
    494e:	50 e4       	ldi	r21, 0x40	; 64
    4950:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
    4954:	dc 01       	movw	r26, r24
    4956:	cb 01       	movw	r24, r22
    4958:	89 8b       	std	Y+17, r24	; 0x11
    495a:	9a 8b       	std	Y+18, r25	; 0x12
    495c:	ab 8b       	std	Y+19, r26	; 0x13
    495e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    4960:	69 89       	ldd	r22, Y+17	; 0x11
    4962:	7a 89       	ldd	r23, Y+18	; 0x12
    4964:	8b 89       	ldd	r24, Y+19	; 0x13
    4966:	9c 89       	ldd	r25, Y+20	; 0x14
    4968:	20 e0       	ldi	r18, 0x00	; 0
    496a:	30 e0       	ldi	r19, 0x00	; 0
    496c:	40 e8       	ldi	r20, 0x80	; 128
    496e:	5f e3       	ldi	r21, 0x3F	; 63
    4970:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__cmpsf2>
    4974:	88 23       	and	r24, r24
    4976:	1c f4       	brge	.+6      	; 0x497e <analog+0xd3e>
		__ticks = 1;
    4978:	81 e0       	ldi	r24, 0x01	; 1
    497a:	88 8b       	std	Y+16, r24	; 0x10
    497c:	91 c0       	rjmp	.+290    	; 0x4aa0 <analog+0xe60>
	else if (__tmp > 255)
    497e:	69 89       	ldd	r22, Y+17	; 0x11
    4980:	7a 89       	ldd	r23, Y+18	; 0x12
    4982:	8b 89       	ldd	r24, Y+19	; 0x13
    4984:	9c 89       	ldd	r25, Y+20	; 0x14
    4986:	20 e0       	ldi	r18, 0x00	; 0
    4988:	30 e0       	ldi	r19, 0x00	; 0
    498a:	4f e7       	ldi	r20, 0x7F	; 127
    498c:	53 e4       	ldi	r21, 0x43	; 67
    498e:	0e 94 76 26 	call	0x4cec	; 0x4cec <__gesf2>
    4992:	18 16       	cp	r1, r24
    4994:	0c f0       	brlt	.+2      	; 0x4998 <analog+0xd58>
    4996:	7b c0       	rjmp	.+246    	; 0x4a8e <analog+0xe4e>
	{
		_delay_ms(__us / 1000.0);
    4998:	6d 89       	ldd	r22, Y+21	; 0x15
    499a:	7e 89       	ldd	r23, Y+22	; 0x16
    499c:	8f 89       	ldd	r24, Y+23	; 0x17
    499e:	98 8d       	ldd	r25, Y+24	; 0x18
    49a0:	20 e0       	ldi	r18, 0x00	; 0
    49a2:	30 e0       	ldi	r19, 0x00	; 0
    49a4:	4a e7       	ldi	r20, 0x7A	; 122
    49a6:	54 e4       	ldi	r21, 0x44	; 68
    49a8:	0e 94 6d 25 	call	0x4ada	; 0x4ada <__divsf3>
    49ac:	dc 01       	movw	r26, r24
    49ae:	cb 01       	movw	r24, r22
    49b0:	8c 87       	std	Y+12, r24	; 0x0c
    49b2:	9d 87       	std	Y+13, r25	; 0x0d
    49b4:	ae 87       	std	Y+14, r26	; 0x0e
    49b6:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    49b8:	6c 85       	ldd	r22, Y+12	; 0x0c
    49ba:	7d 85       	ldd	r23, Y+13	; 0x0d
    49bc:	8e 85       	ldd	r24, Y+14	; 0x0e
    49be:	9f 85       	ldd	r25, Y+15	; 0x0f
    49c0:	20 e0       	ldi	r18, 0x00	; 0
    49c2:	30 e0       	ldi	r19, 0x00	; 0
    49c4:	4a e7       	ldi	r20, 0x7A	; 122
    49c6:	55 e4       	ldi	r21, 0x45	; 69
    49c8:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
    49cc:	dc 01       	movw	r26, r24
    49ce:	cb 01       	movw	r24, r22
    49d0:	88 87       	std	Y+8, r24	; 0x08
    49d2:	99 87       	std	Y+9, r25	; 0x09
    49d4:	aa 87       	std	Y+10, r26	; 0x0a
    49d6:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    49d8:	68 85       	ldd	r22, Y+8	; 0x08
    49da:	79 85       	ldd	r23, Y+9	; 0x09
    49dc:	8a 85       	ldd	r24, Y+10	; 0x0a
    49de:	9b 85       	ldd	r25, Y+11	; 0x0b
    49e0:	20 e0       	ldi	r18, 0x00	; 0
    49e2:	30 e0       	ldi	r19, 0x00	; 0
    49e4:	40 e8       	ldi	r20, 0x80	; 128
    49e6:	5f e3       	ldi	r21, 0x3F	; 63
    49e8:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <__cmpsf2>
    49ec:	88 23       	and	r24, r24
    49ee:	2c f4       	brge	.+10     	; 0x49fa <analog+0xdba>
		__ticks = 1;
    49f0:	81 e0       	ldi	r24, 0x01	; 1
    49f2:	90 e0       	ldi	r25, 0x00	; 0
    49f4:	9f 83       	std	Y+7, r25	; 0x07
    49f6:	8e 83       	std	Y+6, r24	; 0x06
    49f8:	3f c0       	rjmp	.+126    	; 0x4a78 <analog+0xe38>
	else if (__tmp > 65535)
    49fa:	68 85       	ldd	r22, Y+8	; 0x08
    49fc:	79 85       	ldd	r23, Y+9	; 0x09
    49fe:	8a 85       	ldd	r24, Y+10	; 0x0a
    4a00:	9b 85       	ldd	r25, Y+11	; 0x0b
    4a02:	20 e0       	ldi	r18, 0x00	; 0
    4a04:	3f ef       	ldi	r19, 0xFF	; 255
    4a06:	4f e7       	ldi	r20, 0x7F	; 127
    4a08:	57 e4       	ldi	r21, 0x47	; 71
    4a0a:	0e 94 76 26 	call	0x4cec	; 0x4cec <__gesf2>
    4a0e:	18 16       	cp	r1, r24
    4a10:	4c f5       	brge	.+82     	; 0x4a64 <analog+0xe24>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a12:	6c 85       	ldd	r22, Y+12	; 0x0c
    4a14:	7d 85       	ldd	r23, Y+13	; 0x0d
    4a16:	8e 85       	ldd	r24, Y+14	; 0x0e
    4a18:	9f 85       	ldd	r25, Y+15	; 0x0f
    4a1a:	20 e0       	ldi	r18, 0x00	; 0
    4a1c:	30 e0       	ldi	r19, 0x00	; 0
    4a1e:	40 e2       	ldi	r20, 0x20	; 32
    4a20:	51 e4       	ldi	r21, 0x41	; 65
    4a22:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
    4a26:	dc 01       	movw	r26, r24
    4a28:	cb 01       	movw	r24, r22
    4a2a:	bc 01       	movw	r22, r24
    4a2c:	cd 01       	movw	r24, r26
    4a2e:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
    4a32:	dc 01       	movw	r26, r24
    4a34:	cb 01       	movw	r24, r22
    4a36:	9f 83       	std	Y+7, r25	; 0x07
    4a38:	8e 83       	std	Y+6, r24	; 0x06
    4a3a:	0f c0       	rjmp	.+30     	; 0x4a5a <analog+0xe1a>
    4a3c:	80 e9       	ldi	r24, 0x90	; 144
    4a3e:	91 e0       	ldi	r25, 0x01	; 1
    4a40:	9d 83       	std	Y+5, r25	; 0x05
    4a42:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4a44:	8c 81       	ldd	r24, Y+4	; 0x04
    4a46:	9d 81       	ldd	r25, Y+5	; 0x05
    4a48:	01 97       	sbiw	r24, 0x01	; 1
    4a4a:	f1 f7       	brne	.-4      	; 0x4a48 <analog+0xe08>
    4a4c:	9d 83       	std	Y+5, r25	; 0x05
    4a4e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a50:	8e 81       	ldd	r24, Y+6	; 0x06
    4a52:	9f 81       	ldd	r25, Y+7	; 0x07
    4a54:	01 97       	sbiw	r24, 0x01	; 1
    4a56:	9f 83       	std	Y+7, r25	; 0x07
    4a58:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a5a:	8e 81       	ldd	r24, Y+6	; 0x06
    4a5c:	9f 81       	ldd	r25, Y+7	; 0x07
    4a5e:	00 97       	sbiw	r24, 0x00	; 0
    4a60:	69 f7       	brne	.-38     	; 0x4a3c <analog+0xdfc>
    4a62:	24 c0       	rjmp	.+72     	; 0x4aac <analog+0xe6c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a64:	68 85       	ldd	r22, Y+8	; 0x08
    4a66:	79 85       	ldd	r23, Y+9	; 0x09
    4a68:	8a 85       	ldd	r24, Y+10	; 0x0a
    4a6a:	9b 85       	ldd	r25, Y+11	; 0x0b
    4a6c:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
    4a70:	dc 01       	movw	r26, r24
    4a72:	cb 01       	movw	r24, r22
    4a74:	9f 83       	std	Y+7, r25	; 0x07
    4a76:	8e 83       	std	Y+6, r24	; 0x06
    4a78:	8e 81       	ldd	r24, Y+6	; 0x06
    4a7a:	9f 81       	ldd	r25, Y+7	; 0x07
    4a7c:	9b 83       	std	Y+3, r25	; 0x03
    4a7e:	8a 83       	std	Y+2, r24	; 0x02
    4a80:	8a 81       	ldd	r24, Y+2	; 0x02
    4a82:	9b 81       	ldd	r25, Y+3	; 0x03
    4a84:	01 97       	sbiw	r24, 0x01	; 1
    4a86:	f1 f7       	brne	.-4      	; 0x4a84 <analog+0xe44>
    4a88:	9b 83       	std	Y+3, r25	; 0x03
    4a8a:	8a 83       	std	Y+2, r24	; 0x02
    4a8c:	0f c0       	rjmp	.+30     	; 0x4aac <analog+0xe6c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4a8e:	69 89       	ldd	r22, Y+17	; 0x11
    4a90:	7a 89       	ldd	r23, Y+18	; 0x12
    4a92:	8b 89       	ldd	r24, Y+19	; 0x13
    4a94:	9c 89       	ldd	r25, Y+20	; 0x14
    4a96:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__fixunssfsi>
    4a9a:	dc 01       	movw	r26, r24
    4a9c:	cb 01       	movw	r24, r22
    4a9e:	88 8b       	std	Y+16, r24	; 0x10
    4aa0:	88 89       	ldd	r24, Y+16	; 0x10
    4aa2:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4aa4:	89 81       	ldd	r24, Y+1	; 0x01
    4aa6:	8a 95       	dec	r24
    4aa8:	f1 f7       	brne	.-4      	; 0x4aa6 <analog+0xe66>
    4aaa:	89 83       	std	Y+1, r24	; 0x01
   _delay_us(1);

	SET(PS2PORT,PS2att);
    4aac:	a5 e3       	ldi	r26, 0x35	; 53
    4aae:	b0 e0       	ldi	r27, 0x00	; 0
    4ab0:	e5 e3       	ldi	r30, 0x35	; 53
    4ab2:	f0 e0       	ldi	r31, 0x00	; 0
    4ab4:	80 81       	ld	r24, Z
    4ab6:	80 61       	ori	r24, 0x10	; 16
    4ab8:	8c 93       	st	X, r24

}
    4aba:	c0 57       	subi	r28, 0x70	; 112
    4abc:	df 4f       	sbci	r29, 0xFF	; 255
    4abe:	0f b6       	in	r0, 0x3f	; 63
    4ac0:	f8 94       	cli
    4ac2:	de bf       	out	0x3e, r29	; 62
    4ac4:	0f be       	out	0x3f, r0	; 63
    4ac6:	cd bf       	out	0x3d, r28	; 61
    4ac8:	cf 91       	pop	r28
    4aca:	df 91       	pop	r29
    4acc:	1f 91       	pop	r17
    4ace:	0f 91       	pop	r16
    4ad0:	08 95       	ret

00004ad2 <__cmpsf2>:
    4ad2:	97 d0       	rcall	.+302    	; 0x4c02 <__fp_cmp>
    4ad4:	08 f4       	brcc	.+2      	; 0x4ad8 <__cmpsf2+0x6>
    4ad6:	81 e0       	ldi	r24, 0x01	; 1
    4ad8:	08 95       	ret

00004ada <__divsf3>:
    4ada:	0c d0       	rcall	.+24     	; 0x4af4 <__divsf3x>
    4adc:	cd c0       	rjmp	.+410    	; 0x4c78 <__fp_round>
    4ade:	c5 d0       	rcall	.+394    	; 0x4c6a <__fp_pscB>
    4ae0:	40 f0       	brcs	.+16     	; 0x4af2 <__divsf3+0x18>
    4ae2:	bc d0       	rcall	.+376    	; 0x4c5c <__fp_pscA>
    4ae4:	30 f0       	brcs	.+12     	; 0x4af2 <__divsf3+0x18>
    4ae6:	21 f4       	brne	.+8      	; 0x4af0 <__divsf3+0x16>
    4ae8:	5f 3f       	cpi	r21, 0xFF	; 255
    4aea:	19 f0       	breq	.+6      	; 0x4af2 <__divsf3+0x18>
    4aec:	ae c0       	rjmp	.+348    	; 0x4c4a <__fp_inf>
    4aee:	51 11       	cpse	r21, r1
    4af0:	f7 c0       	rjmp	.+494    	; 0x4ce0 <__fp_szero>
    4af2:	b1 c0       	rjmp	.+354    	; 0x4c56 <__fp_nan>

00004af4 <__divsf3x>:
    4af4:	d2 d0       	rcall	.+420    	; 0x4c9a <__fp_split3>
    4af6:	98 f3       	brcs	.-26     	; 0x4ade <__divsf3+0x4>

00004af8 <__divsf3_pse>:
    4af8:	99 23       	and	r25, r25
    4afa:	c9 f3       	breq	.-14     	; 0x4aee <__divsf3+0x14>
    4afc:	55 23       	and	r21, r21
    4afe:	b1 f3       	breq	.-20     	; 0x4aec <__divsf3+0x12>
    4b00:	95 1b       	sub	r25, r21
    4b02:	55 0b       	sbc	r21, r21
    4b04:	bb 27       	eor	r27, r27
    4b06:	aa 27       	eor	r26, r26
    4b08:	62 17       	cp	r22, r18
    4b0a:	73 07       	cpc	r23, r19
    4b0c:	84 07       	cpc	r24, r20
    4b0e:	38 f0       	brcs	.+14     	; 0x4b1e <__divsf3_pse+0x26>
    4b10:	9f 5f       	subi	r25, 0xFF	; 255
    4b12:	5f 4f       	sbci	r21, 0xFF	; 255
    4b14:	22 0f       	add	r18, r18
    4b16:	33 1f       	adc	r19, r19
    4b18:	44 1f       	adc	r20, r20
    4b1a:	aa 1f       	adc	r26, r26
    4b1c:	a9 f3       	breq	.-22     	; 0x4b08 <__divsf3_pse+0x10>
    4b1e:	33 d0       	rcall	.+102    	; 0x4b86 <__divsf3_pse+0x8e>
    4b20:	0e 2e       	mov	r0, r30
    4b22:	3a f0       	brmi	.+14     	; 0x4b32 <__divsf3_pse+0x3a>
    4b24:	e0 e8       	ldi	r30, 0x80	; 128
    4b26:	30 d0       	rcall	.+96     	; 0x4b88 <__divsf3_pse+0x90>
    4b28:	91 50       	subi	r25, 0x01	; 1
    4b2a:	50 40       	sbci	r21, 0x00	; 0
    4b2c:	e6 95       	lsr	r30
    4b2e:	00 1c       	adc	r0, r0
    4b30:	ca f7       	brpl	.-14     	; 0x4b24 <__divsf3_pse+0x2c>
    4b32:	29 d0       	rcall	.+82     	; 0x4b86 <__divsf3_pse+0x8e>
    4b34:	fe 2f       	mov	r31, r30
    4b36:	27 d0       	rcall	.+78     	; 0x4b86 <__divsf3_pse+0x8e>
    4b38:	66 0f       	add	r22, r22
    4b3a:	77 1f       	adc	r23, r23
    4b3c:	88 1f       	adc	r24, r24
    4b3e:	bb 1f       	adc	r27, r27
    4b40:	26 17       	cp	r18, r22
    4b42:	37 07       	cpc	r19, r23
    4b44:	48 07       	cpc	r20, r24
    4b46:	ab 07       	cpc	r26, r27
    4b48:	b0 e8       	ldi	r27, 0x80	; 128
    4b4a:	09 f0       	breq	.+2      	; 0x4b4e <__divsf3_pse+0x56>
    4b4c:	bb 0b       	sbc	r27, r27
    4b4e:	80 2d       	mov	r24, r0
    4b50:	bf 01       	movw	r22, r30
    4b52:	ff 27       	eor	r31, r31
    4b54:	93 58       	subi	r25, 0x83	; 131
    4b56:	5f 4f       	sbci	r21, 0xFF	; 255
    4b58:	2a f0       	brmi	.+10     	; 0x4b64 <__divsf3_pse+0x6c>
    4b5a:	9e 3f       	cpi	r25, 0xFE	; 254
    4b5c:	51 05       	cpc	r21, r1
    4b5e:	68 f0       	brcs	.+26     	; 0x4b7a <__divsf3_pse+0x82>
    4b60:	74 c0       	rjmp	.+232    	; 0x4c4a <__fp_inf>
    4b62:	be c0       	rjmp	.+380    	; 0x4ce0 <__fp_szero>
    4b64:	5f 3f       	cpi	r21, 0xFF	; 255
    4b66:	ec f3       	brlt	.-6      	; 0x4b62 <__divsf3_pse+0x6a>
    4b68:	98 3e       	cpi	r25, 0xE8	; 232
    4b6a:	dc f3       	brlt	.-10     	; 0x4b62 <__divsf3_pse+0x6a>
    4b6c:	86 95       	lsr	r24
    4b6e:	77 95       	ror	r23
    4b70:	67 95       	ror	r22
    4b72:	b7 95       	ror	r27
    4b74:	f7 95       	ror	r31
    4b76:	9f 5f       	subi	r25, 0xFF	; 255
    4b78:	c9 f7       	brne	.-14     	; 0x4b6c <__divsf3_pse+0x74>
    4b7a:	88 0f       	add	r24, r24
    4b7c:	91 1d       	adc	r25, r1
    4b7e:	96 95       	lsr	r25
    4b80:	87 95       	ror	r24
    4b82:	97 f9       	bld	r25, 7
    4b84:	08 95       	ret
    4b86:	e1 e0       	ldi	r30, 0x01	; 1
    4b88:	66 0f       	add	r22, r22
    4b8a:	77 1f       	adc	r23, r23
    4b8c:	88 1f       	adc	r24, r24
    4b8e:	bb 1f       	adc	r27, r27
    4b90:	62 17       	cp	r22, r18
    4b92:	73 07       	cpc	r23, r19
    4b94:	84 07       	cpc	r24, r20
    4b96:	ba 07       	cpc	r27, r26
    4b98:	20 f0       	brcs	.+8      	; 0x4ba2 <__divsf3_pse+0xaa>
    4b9a:	62 1b       	sub	r22, r18
    4b9c:	73 0b       	sbc	r23, r19
    4b9e:	84 0b       	sbc	r24, r20
    4ba0:	ba 0b       	sbc	r27, r26
    4ba2:	ee 1f       	adc	r30, r30
    4ba4:	88 f7       	brcc	.-30     	; 0x4b88 <__divsf3_pse+0x90>
    4ba6:	e0 95       	com	r30
    4ba8:	08 95       	ret

00004baa <__fixunssfsi>:
    4baa:	7f d0       	rcall	.+254    	; 0x4caa <__fp_splitA>
    4bac:	88 f0       	brcs	.+34     	; 0x4bd0 <__fixunssfsi+0x26>
    4bae:	9f 57       	subi	r25, 0x7F	; 127
    4bb0:	90 f0       	brcs	.+36     	; 0x4bd6 <__fixunssfsi+0x2c>
    4bb2:	b9 2f       	mov	r27, r25
    4bb4:	99 27       	eor	r25, r25
    4bb6:	b7 51       	subi	r27, 0x17	; 23
    4bb8:	a0 f0       	brcs	.+40     	; 0x4be2 <__fixunssfsi+0x38>
    4bba:	d1 f0       	breq	.+52     	; 0x4bf0 <__fixunssfsi+0x46>
    4bbc:	66 0f       	add	r22, r22
    4bbe:	77 1f       	adc	r23, r23
    4bc0:	88 1f       	adc	r24, r24
    4bc2:	99 1f       	adc	r25, r25
    4bc4:	1a f0       	brmi	.+6      	; 0x4bcc <__fixunssfsi+0x22>
    4bc6:	ba 95       	dec	r27
    4bc8:	c9 f7       	brne	.-14     	; 0x4bbc <__fixunssfsi+0x12>
    4bca:	12 c0       	rjmp	.+36     	; 0x4bf0 <__fixunssfsi+0x46>
    4bcc:	b1 30       	cpi	r27, 0x01	; 1
    4bce:	81 f0       	breq	.+32     	; 0x4bf0 <__fixunssfsi+0x46>
    4bd0:	86 d0       	rcall	.+268    	; 0x4cde <__fp_zero>
    4bd2:	b1 e0       	ldi	r27, 0x01	; 1
    4bd4:	08 95       	ret
    4bd6:	83 c0       	rjmp	.+262    	; 0x4cde <__fp_zero>
    4bd8:	67 2f       	mov	r22, r23
    4bda:	78 2f       	mov	r23, r24
    4bdc:	88 27       	eor	r24, r24
    4bde:	b8 5f       	subi	r27, 0xF8	; 248
    4be0:	39 f0       	breq	.+14     	; 0x4bf0 <__fixunssfsi+0x46>
    4be2:	b9 3f       	cpi	r27, 0xF9	; 249
    4be4:	cc f3       	brlt	.-14     	; 0x4bd8 <__fixunssfsi+0x2e>
    4be6:	86 95       	lsr	r24
    4be8:	77 95       	ror	r23
    4bea:	67 95       	ror	r22
    4bec:	b3 95       	inc	r27
    4bee:	d9 f7       	brne	.-10     	; 0x4be6 <__fixunssfsi+0x3c>
    4bf0:	3e f4       	brtc	.+14     	; 0x4c00 <__fixunssfsi+0x56>
    4bf2:	90 95       	com	r25
    4bf4:	80 95       	com	r24
    4bf6:	70 95       	com	r23
    4bf8:	61 95       	neg	r22
    4bfa:	7f 4f       	sbci	r23, 0xFF	; 255
    4bfc:	8f 4f       	sbci	r24, 0xFF	; 255
    4bfe:	9f 4f       	sbci	r25, 0xFF	; 255
    4c00:	08 95       	ret

00004c02 <__fp_cmp>:
    4c02:	99 0f       	add	r25, r25
    4c04:	00 08       	sbc	r0, r0
    4c06:	55 0f       	add	r21, r21
    4c08:	aa 0b       	sbc	r26, r26
    4c0a:	e0 e8       	ldi	r30, 0x80	; 128
    4c0c:	fe ef       	ldi	r31, 0xFE	; 254
    4c0e:	16 16       	cp	r1, r22
    4c10:	17 06       	cpc	r1, r23
    4c12:	e8 07       	cpc	r30, r24
    4c14:	f9 07       	cpc	r31, r25
    4c16:	c0 f0       	brcs	.+48     	; 0x4c48 <__fp_cmp+0x46>
    4c18:	12 16       	cp	r1, r18
    4c1a:	13 06       	cpc	r1, r19
    4c1c:	e4 07       	cpc	r30, r20
    4c1e:	f5 07       	cpc	r31, r21
    4c20:	98 f0       	brcs	.+38     	; 0x4c48 <__fp_cmp+0x46>
    4c22:	62 1b       	sub	r22, r18
    4c24:	73 0b       	sbc	r23, r19
    4c26:	84 0b       	sbc	r24, r20
    4c28:	95 0b       	sbc	r25, r21
    4c2a:	39 f4       	brne	.+14     	; 0x4c3a <__fp_cmp+0x38>
    4c2c:	0a 26       	eor	r0, r26
    4c2e:	61 f0       	breq	.+24     	; 0x4c48 <__fp_cmp+0x46>
    4c30:	23 2b       	or	r18, r19
    4c32:	24 2b       	or	r18, r20
    4c34:	25 2b       	or	r18, r21
    4c36:	21 f4       	brne	.+8      	; 0x4c40 <__fp_cmp+0x3e>
    4c38:	08 95       	ret
    4c3a:	0a 26       	eor	r0, r26
    4c3c:	09 f4       	brne	.+2      	; 0x4c40 <__fp_cmp+0x3e>
    4c3e:	a1 40       	sbci	r26, 0x01	; 1
    4c40:	a6 95       	lsr	r26
    4c42:	8f ef       	ldi	r24, 0xFF	; 255
    4c44:	81 1d       	adc	r24, r1
    4c46:	81 1d       	adc	r24, r1
    4c48:	08 95       	ret

00004c4a <__fp_inf>:
    4c4a:	97 f9       	bld	r25, 7
    4c4c:	9f 67       	ori	r25, 0x7F	; 127
    4c4e:	80 e8       	ldi	r24, 0x80	; 128
    4c50:	70 e0       	ldi	r23, 0x00	; 0
    4c52:	60 e0       	ldi	r22, 0x00	; 0
    4c54:	08 95       	ret

00004c56 <__fp_nan>:
    4c56:	9f ef       	ldi	r25, 0xFF	; 255
    4c58:	80 ec       	ldi	r24, 0xC0	; 192
    4c5a:	08 95       	ret

00004c5c <__fp_pscA>:
    4c5c:	00 24       	eor	r0, r0
    4c5e:	0a 94       	dec	r0
    4c60:	16 16       	cp	r1, r22
    4c62:	17 06       	cpc	r1, r23
    4c64:	18 06       	cpc	r1, r24
    4c66:	09 06       	cpc	r0, r25
    4c68:	08 95       	ret

00004c6a <__fp_pscB>:
    4c6a:	00 24       	eor	r0, r0
    4c6c:	0a 94       	dec	r0
    4c6e:	12 16       	cp	r1, r18
    4c70:	13 06       	cpc	r1, r19
    4c72:	14 06       	cpc	r1, r20
    4c74:	05 06       	cpc	r0, r21
    4c76:	08 95       	ret

00004c78 <__fp_round>:
    4c78:	09 2e       	mov	r0, r25
    4c7a:	03 94       	inc	r0
    4c7c:	00 0c       	add	r0, r0
    4c7e:	11 f4       	brne	.+4      	; 0x4c84 <__fp_round+0xc>
    4c80:	88 23       	and	r24, r24
    4c82:	52 f0       	brmi	.+20     	; 0x4c98 <__fp_round+0x20>
    4c84:	bb 0f       	add	r27, r27
    4c86:	40 f4       	brcc	.+16     	; 0x4c98 <__fp_round+0x20>
    4c88:	bf 2b       	or	r27, r31
    4c8a:	11 f4       	brne	.+4      	; 0x4c90 <__fp_round+0x18>
    4c8c:	60 ff       	sbrs	r22, 0
    4c8e:	04 c0       	rjmp	.+8      	; 0x4c98 <__fp_round+0x20>
    4c90:	6f 5f       	subi	r22, 0xFF	; 255
    4c92:	7f 4f       	sbci	r23, 0xFF	; 255
    4c94:	8f 4f       	sbci	r24, 0xFF	; 255
    4c96:	9f 4f       	sbci	r25, 0xFF	; 255
    4c98:	08 95       	ret

00004c9a <__fp_split3>:
    4c9a:	57 fd       	sbrc	r21, 7
    4c9c:	90 58       	subi	r25, 0x80	; 128
    4c9e:	44 0f       	add	r20, r20
    4ca0:	55 1f       	adc	r21, r21
    4ca2:	59 f0       	breq	.+22     	; 0x4cba <__fp_splitA+0x10>
    4ca4:	5f 3f       	cpi	r21, 0xFF	; 255
    4ca6:	71 f0       	breq	.+28     	; 0x4cc4 <__fp_splitA+0x1a>
    4ca8:	47 95       	ror	r20

00004caa <__fp_splitA>:
    4caa:	88 0f       	add	r24, r24
    4cac:	97 fb       	bst	r25, 7
    4cae:	99 1f       	adc	r25, r25
    4cb0:	61 f0       	breq	.+24     	; 0x4cca <__fp_splitA+0x20>
    4cb2:	9f 3f       	cpi	r25, 0xFF	; 255
    4cb4:	79 f0       	breq	.+30     	; 0x4cd4 <__fp_splitA+0x2a>
    4cb6:	87 95       	ror	r24
    4cb8:	08 95       	ret
    4cba:	12 16       	cp	r1, r18
    4cbc:	13 06       	cpc	r1, r19
    4cbe:	14 06       	cpc	r1, r20
    4cc0:	55 1f       	adc	r21, r21
    4cc2:	f2 cf       	rjmp	.-28     	; 0x4ca8 <__fp_split3+0xe>
    4cc4:	46 95       	lsr	r20
    4cc6:	f1 df       	rcall	.-30     	; 0x4caa <__fp_splitA>
    4cc8:	08 c0       	rjmp	.+16     	; 0x4cda <__fp_splitA+0x30>
    4cca:	16 16       	cp	r1, r22
    4ccc:	17 06       	cpc	r1, r23
    4cce:	18 06       	cpc	r1, r24
    4cd0:	99 1f       	adc	r25, r25
    4cd2:	f1 cf       	rjmp	.-30     	; 0x4cb6 <__fp_splitA+0xc>
    4cd4:	86 95       	lsr	r24
    4cd6:	71 05       	cpc	r23, r1
    4cd8:	61 05       	cpc	r22, r1
    4cda:	08 94       	sec
    4cdc:	08 95       	ret

00004cde <__fp_zero>:
    4cde:	e8 94       	clt

00004ce0 <__fp_szero>:
    4ce0:	bb 27       	eor	r27, r27
    4ce2:	66 27       	eor	r22, r22
    4ce4:	77 27       	eor	r23, r23
    4ce6:	cb 01       	movw	r24, r22
    4ce8:	97 f9       	bld	r25, 7
    4cea:	08 95       	ret

00004cec <__gesf2>:
    4cec:	8a df       	rcall	.-236    	; 0x4c02 <__fp_cmp>
    4cee:	08 f4       	brcc	.+2      	; 0x4cf2 <__gesf2+0x6>
    4cf0:	8f ef       	ldi	r24, 0xFF	; 255
    4cf2:	08 95       	ret

00004cf4 <__mulsf3>:
    4cf4:	0b d0       	rcall	.+22     	; 0x4d0c <__mulsf3x>
    4cf6:	c0 cf       	rjmp	.-128    	; 0x4c78 <__fp_round>
    4cf8:	b1 df       	rcall	.-158    	; 0x4c5c <__fp_pscA>
    4cfa:	28 f0       	brcs	.+10     	; 0x4d06 <__mulsf3+0x12>
    4cfc:	b6 df       	rcall	.-148    	; 0x4c6a <__fp_pscB>
    4cfe:	18 f0       	brcs	.+6      	; 0x4d06 <__mulsf3+0x12>
    4d00:	95 23       	and	r25, r21
    4d02:	09 f0       	breq	.+2      	; 0x4d06 <__mulsf3+0x12>
    4d04:	a2 cf       	rjmp	.-188    	; 0x4c4a <__fp_inf>
    4d06:	a7 cf       	rjmp	.-178    	; 0x4c56 <__fp_nan>
    4d08:	11 24       	eor	r1, r1
    4d0a:	ea cf       	rjmp	.-44     	; 0x4ce0 <__fp_szero>

00004d0c <__mulsf3x>:
    4d0c:	c6 df       	rcall	.-116    	; 0x4c9a <__fp_split3>
    4d0e:	a0 f3       	brcs	.-24     	; 0x4cf8 <__mulsf3+0x4>

00004d10 <__mulsf3_pse>:
    4d10:	95 9f       	mul	r25, r21
    4d12:	d1 f3       	breq	.-12     	; 0x4d08 <__mulsf3+0x14>
    4d14:	95 0f       	add	r25, r21
    4d16:	50 e0       	ldi	r21, 0x00	; 0
    4d18:	55 1f       	adc	r21, r21
    4d1a:	62 9f       	mul	r22, r18
    4d1c:	f0 01       	movw	r30, r0
    4d1e:	72 9f       	mul	r23, r18
    4d20:	bb 27       	eor	r27, r27
    4d22:	f0 0d       	add	r31, r0
    4d24:	b1 1d       	adc	r27, r1
    4d26:	63 9f       	mul	r22, r19
    4d28:	aa 27       	eor	r26, r26
    4d2a:	f0 0d       	add	r31, r0
    4d2c:	b1 1d       	adc	r27, r1
    4d2e:	aa 1f       	adc	r26, r26
    4d30:	64 9f       	mul	r22, r20
    4d32:	66 27       	eor	r22, r22
    4d34:	b0 0d       	add	r27, r0
    4d36:	a1 1d       	adc	r26, r1
    4d38:	66 1f       	adc	r22, r22
    4d3a:	82 9f       	mul	r24, r18
    4d3c:	22 27       	eor	r18, r18
    4d3e:	b0 0d       	add	r27, r0
    4d40:	a1 1d       	adc	r26, r1
    4d42:	62 1f       	adc	r22, r18
    4d44:	73 9f       	mul	r23, r19
    4d46:	b0 0d       	add	r27, r0
    4d48:	a1 1d       	adc	r26, r1
    4d4a:	62 1f       	adc	r22, r18
    4d4c:	83 9f       	mul	r24, r19
    4d4e:	a0 0d       	add	r26, r0
    4d50:	61 1d       	adc	r22, r1
    4d52:	22 1f       	adc	r18, r18
    4d54:	74 9f       	mul	r23, r20
    4d56:	33 27       	eor	r19, r19
    4d58:	a0 0d       	add	r26, r0
    4d5a:	61 1d       	adc	r22, r1
    4d5c:	23 1f       	adc	r18, r19
    4d5e:	84 9f       	mul	r24, r20
    4d60:	60 0d       	add	r22, r0
    4d62:	21 1d       	adc	r18, r1
    4d64:	82 2f       	mov	r24, r18
    4d66:	76 2f       	mov	r23, r22
    4d68:	6a 2f       	mov	r22, r26
    4d6a:	11 24       	eor	r1, r1
    4d6c:	9f 57       	subi	r25, 0x7F	; 127
    4d6e:	50 40       	sbci	r21, 0x00	; 0
    4d70:	8a f0       	brmi	.+34     	; 0x4d94 <__mulsf3_pse+0x84>
    4d72:	e1 f0       	breq	.+56     	; 0x4dac <__mulsf3_pse+0x9c>
    4d74:	88 23       	and	r24, r24
    4d76:	4a f0       	brmi	.+18     	; 0x4d8a <__mulsf3_pse+0x7a>
    4d78:	ee 0f       	add	r30, r30
    4d7a:	ff 1f       	adc	r31, r31
    4d7c:	bb 1f       	adc	r27, r27
    4d7e:	66 1f       	adc	r22, r22
    4d80:	77 1f       	adc	r23, r23
    4d82:	88 1f       	adc	r24, r24
    4d84:	91 50       	subi	r25, 0x01	; 1
    4d86:	50 40       	sbci	r21, 0x00	; 0
    4d88:	a9 f7       	brne	.-22     	; 0x4d74 <__mulsf3_pse+0x64>
    4d8a:	9e 3f       	cpi	r25, 0xFE	; 254
    4d8c:	51 05       	cpc	r21, r1
    4d8e:	70 f0       	brcs	.+28     	; 0x4dac <__mulsf3_pse+0x9c>
    4d90:	5c cf       	rjmp	.-328    	; 0x4c4a <__fp_inf>
    4d92:	a6 cf       	rjmp	.-180    	; 0x4ce0 <__fp_szero>
    4d94:	5f 3f       	cpi	r21, 0xFF	; 255
    4d96:	ec f3       	brlt	.-6      	; 0x4d92 <__mulsf3_pse+0x82>
    4d98:	98 3e       	cpi	r25, 0xE8	; 232
    4d9a:	dc f3       	brlt	.-10     	; 0x4d92 <__mulsf3_pse+0x82>
    4d9c:	86 95       	lsr	r24
    4d9e:	77 95       	ror	r23
    4da0:	67 95       	ror	r22
    4da2:	b7 95       	ror	r27
    4da4:	f7 95       	ror	r31
    4da6:	e7 95       	ror	r30
    4da8:	9f 5f       	subi	r25, 0xFF	; 255
    4daa:	c1 f7       	brne	.-16     	; 0x4d9c <__mulsf3_pse+0x8c>
    4dac:	fe 2b       	or	r31, r30
    4dae:	88 0f       	add	r24, r24
    4db0:	91 1d       	adc	r25, r1
    4db2:	96 95       	lsr	r25
    4db4:	87 95       	ror	r24
    4db6:	97 f9       	bld	r25, 7
    4db8:	08 95       	ret

00004dba <_exit>:
    4dba:	f8 94       	cli

00004dbc <__stop_program>:
    4dbc:	ff cf       	rjmp	.-2      	; 0x4dbc <__stop_program>
